/* ----------------------Preliminary Declarations Section--------------------*/

package parser;
import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;
import lexer.VbLexer;
import parser.VbSyntaxError;
import parser.sym;
import symtable.*;
import org.fife.ui.rsyntaxtextarea.parser.Parser;
import org.fife.ui.rsyntaxtextarea.parser.ExtendedHyperlinkListener;
import org.fife.ui.rsyntaxtextarea.parser.ParseResult;
import org.fife.ui.rsyntaxtextarea.parser.ParserNotice;

/*
scan with {:
	Symbol symbol = null;
	while (symbol == null || symbol.sym == sym.error){
		symbol = getScanner().next_token();
		if (symbol.sym == sym.error){
			MyToken mySymbol = (MyToken)symbol;
			String msg = "Error en linea " + mySymbol.left; 
			addErr(msg, mySymbol.left, mySymbol.right, mySymbol.offset, mySymbol.value.toString().length());
			if (mySymbol.value.toString().equalsIgnoreCase("runaway string")){
				appendErr("Cadena no cerrada");
			}else{
				appendErr("Caracter invalido '" + mySymbol.value.toString() + "'");
			}
		}
	}

	return symbol != null ? symbol : getSymbolFactory().newSymbol("END_OF_FILE", EOF_sym());
:}
*/
parser code {: 
	private VbLexer lexer;
	private ArrayList<VbSyntaxError> errLst = new ArrayList<>();

	public VbParser(VbLexer lex) {
		super(lex);
		this.lexer = lex;
	}

	public void user_init(){
		this.errLst = new ArrayList<>();
		SymTable.init();
	}

	public Symbol getCurToken(){
		return this.cur_token;
	}

	public void report_fatal_error(String message, Object info) throws Exception{
		done_parsing();
		report_error(message, info);
		throw new Exception("Can't recover from previous error(s)");
	}

	public void report_error(String message, Object info){
		System.err.print(message);
		System.err.flush();
		if ((info instanceof Symbol)){
		  if (((Symbol)info).left != -1){
			System.err.println(" at character " + ((Symbol)info).left + " of input");
		  }else{
			System.err.println("");
		  }
		}else{
		  System.err.println("");
	   }
	}

	public void syntax_error(Symbol cur_token){
		System.out.println("syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("1cur_token '" + cur_token + "' no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
		System.out.println("unrec_syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error fatal en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("2unrec cur_token no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	protected int error_sync_size(){
		return 3;
	}
	
	public void addErr(String msg, int left, int right, int offset, int length){
		this.errLst.add(new VbSyntaxError(msg, left, right, offset, length));
	}

	public void appendErr(String msg){
		if (!this.errLst.isEmpty()){
			int index = this.errLst.size() - 1;
			this.errLst.get(index).message += ": " + msg;
		}
	}

	public ArrayList getErrLst(){
		return this.errLst;
	}

	public void setLexer(VbLexer lexer){
		this.lexer = lexer;
	}

	public MyToken tokenAt(java.util.Stack stack, int top, int offset){
		return (MyToken)stack.elementAt(top + offset);
	}

	public MyToken toMyToken(Object o){
		return (MyToken)o;
	}
:};

terminal			Dim,Mas,Menos,Por,Entre,Menor,Mayor,Not,And,Or,
					For,To,Step,Next,Loop,Do,While,Until,If,Then,Else,ElseIf,End,Integer,
					Boolean,Char,String,ByVal,ByRef,As,Sub,Function,
					Write,Writeln,Coma,Punto,ParI,ParD,True,GuionBajo,Igual,Id,
					CambioDeLinea,Concatenar,InicioDeLinea,NuevaLinea,MayorIgual,
					MenorIgual,False,Call,Exit,Input,Type,Ampersand;

terminal			Public,Private;
//non terminal		AccessMod;

terminal			IntLiteral, StrLiteral;

terminal			FinDeLinea;

non terminal		ProgStart, Root, RootStmts, RootStmt, RootDecl, VarDecl ,
					Block, BlockStmts, BlockStmt, BlockDecl, IdLst,
					FuncDecl, FuncBody, SubDecl, SubBody, ArgDecl, ArgLst;

non terminal		MainDecl, MainHead, MainBody;

non terminal		TypeDecl, TypeBlock, TypeBlockStmts, TypeVarDecl;

non terminal		Asignable, Asignacion, Comparacion, Condicion, Expresion, Termino, Operador;

non terminal		ForLoop, DoWhile, IfStmt, ElseStmts;

non terminal		Args;

non terminal		PassMech;

non terminal		ArrayList<Parametro> Params, ParamLst;

non terminal		Distinto, BoolLiteral;

non terminal		MethodCall, FuncEval, LineEnd;

non terminal		Property, PropChain;

non terminal		MyToken Tipo;

/* -------------Precedence and Associatively of Terminals Section----------- 
precedence left MAS, MENOS;
precedence left POR, DIV;
precedence left IGUAL;
*/

precedence right Not;

start with ProgStart;

/*-----------------------------------------------------------------*/
/* ----------------------------Grammar Section-------------------- */
/*-----------------------------------------------------------------*/

ProgStart				::= Root;



/* ROOT */

Root					::= RootStmts | LineEnd RootStmts;

RootStmts				::= RootStmt
						|	RootStmts RootStmt;

RootStmt				::= RootDecl | error {: parser.appendErr("error"); :};

RootDecl				::= VarDecl
						|	SubDecl
						|	FuncDecl
						|	TypeDecl;

VarDecl					::= Dim Id As Tipo:tipo LineEnd {: 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);

								if (SymTable.curScope.hasLocalVar(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" ya existe en este contexto");
								}else{
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						:}
						|	Dim error LineEnd {: parser.appendErr("Se esperaba Id"); :}
						|	Dim Id error LineEnd {: parser.appendErr("Se esperaba 'As'"); :}
						|	Dim Id As error LineEnd {: parser.appendErr("Se esperaba Tipo"); :};

SubDecl					::= Sub Id {: 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Sub \"" + myid.value.toString() + "\" ya existe");
								}else{
									if (myid.value.toString().equalsIgnoreCase("main")){
										SymTable.existeMain = true;
									}
								}
								
								Sub newSub = new Sub(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curScope.addSub(newSub);
								SymTable.curMethod = newSub;
								SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						:} Params Block End Sub LineEnd {:
								SymTable.endScope();
								SymTable.curMethod = null;
						:};

FuncDecl				::= Function Id {: 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Function \"" + myid.value.toString() + "\" ya existe");
								}
								
								Funcion newFunc = new Funcion(myid.value.toString(), myid.left, myid.right, myid.offset, "void");
								SymTable.curScope.addFunc(newFunc);
								SymTable.curMethod = newFunc;
								Scope s = SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						:} Params As Tipo:tipo {: 
								((Funcion)SymTable.curMethod).tipo = tipo.value.toString();
								
								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}

								SymTable.curMethod = null;
						:} Block {:
								SymTable.endScope();
						:}End Function LineEnd;

TypeDecl				::= Type Id:id {: 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								TypeStruct t = new TypeStruct(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curTypeStruct = t;
								SymTable.curScope.addTypeStruct(t);
						:} TypeBlock End Type LineEnd {:
								SymTable.curTypeStruct = null;
						:};

TypeBlock				::= LineEnd TypeBlockStmts | LineEnd;

TypeBlockStmts			::= TypeVarDecl
						|	TypeBlockStmts TypeVarDecl;

TypeVarDecl				::= Id As Tipo:tipo LineEnd {:
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);

								if (SymTable.curTypeStruct.hasVar(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La propiedad \"" + myid.value.toString() + "\" ya existe en este Type");
								}else{
									SymTable.curTypeStruct.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.rootScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						:};/*
						|	Id error LineEnd {: parser.appendErr("Se esperaba 'As'"); :}
						|	Id As error LineEnd {: parser.appendErr("Se esperaba Tipo"); :}
						|	Id As Tipo error LineEnd {: parser.appendErr("Se esperaba fin de linea"); :}
						|	error TypeVarDecl {: parser.appendErr("Sentencia invalida dentro de Type"); :};*/



/* BLOCK */

Block					::= LineEnd BlockStmts 
						|	LineEnd;

BlockStmts				::= BlockStmt
						|	BlockStmts BlockStmt;

BlockStmt				::= VarDecl
						|	ForLoop
						|	DoWhile
						|	IfStmt
						|	Asignacion
						|	MethodCall;



/* Asignacion, Comparacion, Expresiones etc */

Asignable				::= Id {:
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									RESULT = new Asignable("variable", v.tipo);
								}
						:}
						|	Property;


Asignacion				::= Asignable Igual Expresion LineEnd;

Comparacion				::= Expresion Igual Expresion;

Condicion				::= Expresion
						|	Comparacion;

Expresion				::= Termino
						|	Not Termino
						|	Expresion Operador Termino
						|	Expresion Operador GuionBajo LineEnd Termino;

Termino					::= IntLiteral
						|	BoolLiteral
						|	StrLiteral
						|	Id
						|	FuncEval
						|	Property
						|	ParI Expresion ParD;

Operador				::= Mas
						|	Menos
						|	Por
						|	Entre
						|	And
						|	Or
						|	Not
						|	Menor
						|	MenorIgual
						|	Mayor
						|	MayorIgual
						|	Distinto
						|	Ampersand;



/* Estructuras */

ForLoop					::= For Id Igual Expresion To Expresion {:
								MyToken forTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5);
								SymTable.createSubScope("For" + SymTable.blockName(), forTok.left, forTok.right, forTok.offset); 	
						:} Block {:
								SymTable.endScope();
						:} Next Id LineEnd;

DoWhile					::= Do While Condicion {:
								MyToken doTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("Do" + SymTable.blockName(), doTok.left, doTok.right, doTok.offset); 	
						:} Block {:
								SymTable.endScope();
						:} Loop LineEnd;

IfStmt					::= If Condicion Then {:
								MyToken ifTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("If" + SymTable.blockName(), ifTok.left, ifTok.right, ifTok.offset); 
						:} Block {: 
								SymTable.endScope();
						:} ElseStmts End If LineEnd;

ElseStmts				::= ElseIf Condicion Then {: 
								MyToken myelif = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("ElseIf" + SymTable.blockName(), myelif.left, myelif.right, myelif.offset); 
						:} Block {: 
								SymTable.endScope();
						:} ElseStmts
						|	Else {: 
								MyToken elseTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								SymTable.createSubScope("Else" + SymTable.blockName(), elseTok.left, elseTok.right, elseTok.offset); 
						:} Block {: 
								SymTable.endScope();
						:}
						|	/* lambda */;


/* Tipos */

Tipo					::= Integer:i {: RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); :}
						|	Boolean:b {: RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); :}
						|	String:s {: RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); :}
						|	Char:c {: RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); :}
						|	Id:id {: RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); :};

/*AccessMod				::= Public
						|	Private;*/



/* Argumentos y Parametros */

Params					::= ParI ParD
						|	ParI ParamLst:paramLst ParD;
						

ParamLst				::= PassMech:passMech Id As Tipo:tipo {:
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						:}
						|	ParamLst:paramLst Coma PassMech:passMech Id:id As Tipo:tipo {:
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						:};

PassMech				::= ByVal:byVal {: RESULT = byVal.toString().toLowerCase(); :}
						|	ByRef:byRef {: RESULT = byRef.toString().toLowerCase(); :};



/* Cositas... */

BoolLiteral				::= True
						|	False;

Distinto				::= Menor Mayor;

MethodCall				::= FuncEval LineEnd
						|	Call FuncEval LineEnd;

FuncEval				::= Id Args;

Args					::= ParI ParD
						|	ParI ArgLst ParD
						|	ParI ArgLst error {: parser.appendErr("Se esperaba ')'"); :}
						|	ParI error ParD {: parser.appendErr("Argumentos invalidos"); :};

ArgLst					::= Expresion
						|	ArgLst Coma Expresion
						|	ArgLst Coma error {: parser.appendErr("Se esperaba Argumento"); :};

/*Args					::= Expresion
						|	Args Coma Expresion
						|	 lambda; ;*/



Property				::= Id:id PropChain:propChain;

/*

{:
		MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
		Variable v = SymTable.curScope.findVar(myid.value.toString());

		if (v == null){
			parser.syntax_error(myid);
			parser.appendErr("La variable \"" + myid.value.toString + "\" no ha sido declarada");
		}else{
			switch(v.tipo){
				case "integer":
				case "string":
				case "boolean":
				case "char":
					parser.syntax_error(myid);
					parser.appendErr("La variable \"" + v.id + "\" no es un Type");
					break;
				default:
					TypeStruct t = SymTable.curScope.findTypeStruct(v.tipo);

					for (int i = 1; i < segments.length; i++){
						Variable prop = t.findVar(segments[i]);

						if (prop == null){
							parser.syntax_error(myid);
							parser.appendErr("El Type \"" + t.id + "\" no tiene una propiedad llamada \"" + segments[i] + "\"");
							break;
						}else{
							if (prop.tipo.equals("integer") || prop.tipo.equals("string") || prop.tipo.equals("boolean") || prop.tipo.equals("char")){
								if (i < segments.length - 1){
									parser.syntax_error(myid);
									parser.appendErr("La propiedad \"" + prop.id + "\" del Type \"" + t.id + " es de tipo \"" + prop.tipo + "\" y no tiene propiedades");
									break;
								}
							}else{
								t = SymTable.curScope.findTypeStruct(prop.tipo);
							}
						}

						if (i == segments.length - 1){
							RESULT = new Asignable("property", prop.tipo);
						}
					}
			}
		}
:}

*/
PropChain				::= Punto Id:id {:
								RESULT = "." + id.toString();
						:}
						|	Punto Id:id PropChain:propChain {:
								RESULT = "." + id.toString() + propChain;
						:};

LineEnd					::= FinDeLinea | FinDeLinea LineEnd;