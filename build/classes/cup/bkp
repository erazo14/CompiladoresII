/* ----------------------Preliminary Declarations Section--------------------*/

package parser;
import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;
import lexer.VbLexer;
import parser.VbSyntaxError;
import org.fife.ui.rsyntaxtextarea.parser.Parser;
import org.fife.ui.rsyntaxtextarea.parser.ExtendedHyperlinkListener;
import org.fife.ui.rsyntaxtextarea.parser.ParseResult;
import org.fife.ui.rsyntaxtextarea.parser.ParserNotice;

scan with {:
	Symbol sym = null;
	try{
		sym = getScanner().next_token();
	}catch (Error ex){
		report_fatal_error(ex.toString(),null);
	}

	return sym != null ? sym : getSymbolFactory().newSymbol("END_OF_FILE", EOF_sym());
:}

parser code {: 
	private VbLexer lexer;
	private ArrayList<VbSyntaxError> errLst = new ArrayList();

	public VbParser(VbLexer lex) {
		super(lex);
		this.lexer = lex;
	}
	
	public void report_fatal_error(String message, Object info) throws Exception{
		done_parsing();
		report_error(message, info);
		throw new Exception("Can't recover from previous error(s)");
	}

	public void report_error(String message, Object info){
		System.err.print(message);
		System.err.flush();
		if ((info instanceof Symbol)){
		  if (((Symbol)info).left != -1){
			System.err.println(" at character " + ((Symbol)info).left + " of input");
		  }else{
			System.err.println("");
		  }
		}else{
		  System.err.println("");
	   }
	}

	public void syntax_error(Symbol cur_token){
		//System.out.println(cur_token);
		//report_error("Syntax error", cur_token);
		
		System.out.println("syntax_error");
		try{
			MySymbol my_cur_token = (MySymbol)cur_token;
			String msg = "Error en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.err.println("cur_token no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
		//report_fatal_error("Couldn't repair and continue parse", cur_token);
		
		System.out.println("unrecoverable_syntax_error");
		try{
			MySymbol my_cur_token = (MySymbol)cur_token;
			String msg = "Error fatal en linea " + my_cur_token.left + ", token '" + my_cur_token.value.toString() + "'";
			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
			//System.out.println(msg);
		}catch(Exception ex){
			System.err.println("cur_token no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}
	
	public void addErr(String msg, int left, int right, int offset, int length){
		this.errLst.add(new VbSyntaxError(msg, left, right, offset, length));
	}

	public void appendErr(String msg){
		int index = 0;
		
		if (!this.errLst.isEmpty()){
			index = this.errLst.size() - 1;
		}
		
		this.errLst.get(index).message += ": " + msg;
	}

	public ArrayList getErrLst(){
		return this.errLst;
	}
	/*
	public void user_init(){
		this.errLst = new ArrayList();
	}
	
	public ArrayList getErrLst(){
		return this.errLst;
	}
	
	public void report_error(String message, Object info){
		System.err.println(message);
	}

	public void report_fatal_error(String message, Object info){
		report_error("FATAL ERROR: " + message, null);
		done_parsing();
	}

	public void syntax_error(Symbol cur_token){
		System.err.println("syntax err");
		try{
			MySymbol my_cur_token = (MySymbol)cur_token;
			System.out.println("el token es: " + my_cur_token.value.toString());
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				String msg = "Error de sintaxis en linea " + my_cur_token.left + ", token '" + my_cur_token.value.toString() + "'";
			}else{
				String msg = "Error de sintaxis en linea " + my_cur_token.left + ", columna " + my_cur_token.right;
			}
			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("cur_token no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}
	
	public void addErr(String msg, int left, int right, int offset, int length){
		this.errLst.add(new VbSyntaxError(msg, left, right, offset, length));
	}
	
	public void appendErr(String msg){
		int index = 0;
		
		if (!this.errLst.isEmpty()){
			index = this.errLst.size() - 1;
		}
		
		this.errLst.get(index).message += ": " + msg;
	}
	
	public void unrecovered_syntax_error(Symbol cur_token){
		System.err.println("unrec_syntax err");
		try{
			MySymbol my_cur_token = (MySymbol)cur_token;
			String msg = "Error fatal en linea " + my_cur_token.left + ", token '" + my_cur_token.value.toString() + "'";
			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
			done_parsing();
		}catch (Exception ex){
			System.out.println("unrecoverable cur_token no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}
	*/

	public void setLexer(VbLexer lexer){
		this.lexer = lexer;
	}
:};

terminal			Dim,Mas,Menos,Por,Entre,Menor,Mayor,Distinto,Not,And,Or,
					For,To,Step,Next,Loop,Do,While,Until,If,Then,Else,ElseIf,End,Integer,
					Boolean,Char,String,ByVal,ByRef,As,Public,Private,Sub,Function,
					Write,Writeln,Coma,Punto,ParI,ParD,True,GuionBajo,Igual,Id,
					Main,CambioDeLinea,Concatenar,InicioDeLinea,FinDeLinea,MayorIgual,
					MenorIgual,False,Call,Exit,Input,Type,Ampersand;

terminal			IntLiteral, StrLiteral;

non terminal		ProgStart, RootStmts, RootStmt, RootDecl, RootVarDecl, 
					BlockStmts, BlockStmt, BlockDecl, BlockVarDecl, IdLst,
					FuncDecl, FuncBody, SubDecl, SubBody, ArgDecl, ArgLst, AccessMod,
					PassMech, Tipo, OptionalSpace;

non terminal		MainDecl, MainHead, MainBody;

non terminal		FuncCall, ExprLst, Operador, BoolLiteral;

non terminal		TypeDecl, TypeBody, TypeStmts, TypeStmt, TypeVarDecl;

non terminal		Asignacion, Expresion, Factor, Termino, MultDiv, SumaResta;

non terminal		ForLoop, ForLoopHead, ForLoopBody, ForLoopFoot, ForLoopStmts,
					ForLoopStmt, ExitFor;

non terminal		DoWhileLoop, DoWhileLoopBody, DoWhileLoopStmts, DoWhileLoopStmt;

non terminal		NewLine;

/* -------------Precedence and Associatively of Terminals Section----------- 

precedence left MAS, MENOS;
precedence left POR, DIV;
precedence left IGUAL;
*/
start with ProgStart;

/*-----------------------------------------------------------------*/
/* ----------------------------Grammar Section-------------------- */
/*-----------------------------------------------------------------*/

ProgStart				::= OptionalSpace MainDecl OptionalSpace
						|	OptionalSpace MainDecl FinDeLinea RootStmts;

MainDecl				::= MainHead MainBody End Sub;

MainHead				::= Sub Main ParI ParD FinDeLinea
						|	Sub Main error {: parser.appendErr("Se esperaba '()'"); :} FinDeLinea
						|	Sub Main error {: parser.appendErr("Se esperaba '('"); :} ParD FinDeLinea
						|	Sub Main ParI error {: parser.appendErr("Se esperaba ')'"); :} FinDeLinea
						|	Sub Main ParI ParD error {: parser.appendErr("Se esperaba fin de linea"); :} FinDeLinea;

MainBody				::= ForLoop;

OptionalSpace			::= FinDeLinea
						|	/* lambda */;

RootStmts				::= OptionalSpace RootStmt OptionalSpace
						|	OptionalSpace RootStmt FinDeLinea RootStmts;

RootStmt				::= RootDecl
						|	error {: parser.appendErr("Sentencia invalida en este ambito"); :};

RootDecl				::= RootVarDecl
						|	TypeDecl
						|	FuncDecl
						|	SubDecl;

RootVarDecl				::= AccessMod Id As Tipo
						|	AccessMod error {: parser.appendErr("Se esperaba uno o mas identificadores"); :}
						|	AccessMod Id error {: parser.appendErr("Se esperaba 'As'"); :}
						|	AccessMod Id As error {: parser.appendErr("Se esperaba Tipo o Id"); :}
						|	BlockVarDecl;

BlockStmts				::= OptionalSpace BlockStmt OptionalSpace
						|	OptionalSpace BlockStmt BlockStmts;

BlockStmt				::= BlockDecl FinDeLinea
						|	ForLoop FinDeLinea
						|	DoWhileLoop FinDeLinea
						|	Asignacion FinDeLinea
						|	FuncCall FinDeLinea
						|	ExitFor FinDeLinea
						|	error {: parser.appendErr("Sentencia invalida"); :} FinDeLinea;

BlockDecl				::= BlockVarDecl;

BlockVarDecl			::=	Dim Id As Tipo
						|	Dim error {: parser.appendErr("Se esperaba uno o mas identificadores"); :}
						|	Dim Id error {: parser.appendErr("Se esperaba 'As'"); :}
						|	Dim Id As error {: parser.appendErr("Se esperaba Tipo o Id"); :};



/* FOR LOOP */

ForLoop					::= ForLoopHead ForLoopBody;// ForLoopFoot;

ForLoopHead				::= For Id Igual Expresion To Expresion FinDeLinea
						|	For error {: parser.appendErr("Se esperaba identificador"); :} FinDeLinea
						|	For Id error {: parser.appendErr("Se esperaba '='"); :} FinDeLinea
						|	For Id Igual error {: parser.appendErr("Se esperaba expresion"); :} FinDeLinea
						|	For Id Igual Expresion error {: parser.appendErr("Se esperaba 'To'"); :} FinDeLinea
						|	For Id Igual Expresion To error {: parser.appendErr("Se esperaba expresion"); :} FinDeLinea
						|	For Id Igual Expresion To Expresion error {: parser.appendErr("Se esperaba fin de linea"); :} FinDeLinea;

ForLoopBody				::= ForLoopStmts
						|	/* lambda */;

ForLoopStmts			::= BlockStmts;


ForLoopFoot				::= Next
						|	Next Id;

ExitFor					::= Exit For
						|	Exit error {: parser.appendErr("Se esperaba 'For'"); :};

/* DO WHILE LOOP */

DoWhileLoop				::= Do While Expresion FinDeLinea DoWhileLoopBody Loop;

DoWhileLoopBody			::= DoWhileLoopStmts
						|	/* lambda */;

DoWhileLoopStmts		::= OptionalSpace DoWhileLoopStmt OptionalSpace
						|	OptionalSpace DoWhileLoopStmt FinDeLinea DoWhileLoopStmts;

DoWhileLoopStmt			::= BlockStmt
						|	Exit Loop;



/* ASIGNACION */

Asignacion				::= Id Igual Expresion;

Expresion				::= Termino 
						|	Expresion Operador Termino
						|	Expresion Operador GuionBajo FinDeLinea Termino;

Operador				::= Mas
						| Menos
						| Por
						| Entre
						| And
						| Or
						| Not
						| Menor
						| MenorIgual
						| Mayor
						| MayorIgual
						| Distinto
						| Ampersand;			

Termino					::= IntLiteral
						|	BoolLiteral
						|	StrLiteral
						|	Id
						|	FuncCall
						|	ParI Expresion ParD;

FuncCall				::= Id ParI ExprLst ParD;

ExprLst					::= Expresion
						| ExprLst Coma Expresion
						| /* lambda */;

/* TYPE */

TypeDecl				::= Type Id FinDeLinea TypeBody End Type
						|	AccessMod Type Id FinDeLinea TypeBody End Type;

TypeBody				::= TypeStmts
						|	/* lambda */;

TypeStmts				::= OptionalSpace TypeStmt OptionalSpace
						|	OptionalSpace TypeStmt FinDeLinea TypeStmts;

TypeStmt				::= TypeVarDecl;

TypeVarDecl				::= Id As Tipo;



/* MISC */

IdLst					::= Id | IdLst Coma Id;

FuncDecl				::= Function Id ParI ArgLst ParD As Tipo FinDeLinea FuncBody End Function
						|	AccessMod Function Id ParI ArgLst ParD As Tipo FinDeLinea BlockStmts End Function;

FuncBody				::= BlockStmts | ;

SubDecl					::=	Sub Id ParI ArgLst ParD FinDeLinea SubBody End Sub
						|	AccessMod Sub Id ParI ArgLst ParD FinDeLinea BlockStmts End Sub
						|	Sub ParI ArgLst ParD FinDeLinea SubBody End Sub;

SubBody					::= BlockStmts | ;

ArgDecl					::= Id As Tipo
						|	PassMech Id As Tipo;

ArgLst					::=	ArgDecl
						|	ArgLst Coma ArgDecl 
						|	/* lambda, porque la declaracion de argumentos es opcional */;

AccessMod				::=	Public
						|	Private;

PassMech				::=	ByVal
						|	ByRef;

Tipo					::= Integer 
						|	Char
						|	String
						|	Boolean
						|	Id;

BoolLiteral				::= True
						|	False;