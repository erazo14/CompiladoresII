package lexer;
import java_cup.runtime.*;
import parser.sym;
import parser.MySymbol;
%%

%class VbLexer
%unicode
%line
%column
%char
%cup
%ignorecase
%public
%state STRING

%{
	private Symbol symbol(int type) { 
		return new MySymbol(type, yyline + 1, yycolumn + 1, yychar); 
	}

	private Symbol symbol(int type, Object value) { 
		return new MySymbol(type, yyline + 1, yycolumn + 1, yychar, value); 
	}

%}


/* Comentario */

Rem = {Apostrofe} {CaracterDeEntrada}* {FinDeLinea}?



/* Tipos */

Integer 			= "Integer"
Boolean 			= "Boolean"
Char				= "Char"
String				= "String"
Type				= "Type"


/* Funciones */
 
Main				= "Main"
Sub					= "Sub"
Function			= "Function"
Exit				= "Exit"
Call				= "Call"
ByRef				= "ByRef"
ByVal				= "ByVal"



/* Declaraciones */

Dim					= "Dim"
As					= "As"
Public				= "Public" 
Private				= "Private"



/* Asignacion y comparacion de igualdad */

Igual   			= "="



/* operadores artimenticos */

Mas 				= "+"
Menos 				= "-"
Por 				= "*"
Entre 				= "/"



/* Operadores logicos */

Distinto 			= "<>"
Mayor 				= ">"
MayorIgual 			= ">="
Menor 				= "<"
MenorIgual 			= "<="
And					= "And"
Or					= "Or"
Not					= "Not"



/* Identificador */

Id					= [a-zA-Z_]([a-zA-Z_0-9]*)



/* Estrucutras de control de flujo */

For					= "For"
To					= "To"
Step				= "Step"
Next				= "Next"
Loop				= "Loop"
Do					= "Do"
While				= "While"
Until				= "Until"
If					= "If"
Then				= "Then"
Else				= "Else"
ElseIf				= "ElseIf"
End					= "End"



/* Literales */

True				= "True"
False				= "False"
IntLiteral			= 0|[1-9][0-9]*

/* misc */

Coma				= ","
Punto				= "."     
ParI				= "("   
ParD				= ")"   
GuionBajo			= "_"
Ampersand			= "&"
Comilla				= "\""
Apostrofe			= "'"
FinDeLinea			= [\r|\n|\r\n]([\r|\n|\r\n]|{WhiteSpace})*
WhiteSpace			= [ \t\f]+
CaracterDeEntrada	= [^\r\n]

%%

<YYINITIAL>{
	{Rem} 				{/* ignore */}
	{Integer} 			{System.out.print("Integer "); return symbol(sym.Integer, yytext());}
	{Boolean} 			{System.out.print("Boolean "); return symbol(sym.Boolean, yytext());}
	{Char}				{System.out.print("Char "); return symbol(sym.Char, yytext());}
	{String}			{System.out.print("String "); return symbol(sym.String, yytext());}
	{Type}				{System.out.print("Type "); return symbol(sym.Type, yytext());}
	{Main}				{System.out.print("Main "); return symbol(sym.Main, yytext());}
	{Sub}				{System.out.print("Sub "); return symbol(sym.Sub, yytext());}
	{Function}			{System.out.print("Function "); return symbol(sym.Function, yytext());}
	{Exit}				{System.out.print("Exit "); return symbol(sym.Exit, yytext());}
	{Call}				{System.out.print("Call "); return symbol(sym.Call, yytext());}
	{ByRef}				{System.out.print("ByRef "); return symbol(sym.ByRef, yytext());}
	{ByVal}				{System.out.print("ByVal "); return symbol(sym.ByVal, yytext());}
	{Dim}				{System.out.print("Dim "); return symbol(sym.Dim, yytext());}
	{As}				{System.out.print("As "); return symbol(sym.As, yytext());}
	{Public}			{System.out.print("Public "); return symbol(sym.Public, yytext());}
	{Private}			{System.out.print("Private "); return symbol(sym.Private, yytext());}
	{Igual}   			{System.out.print("Igual "); return symbol(sym.Igual, yytext());}
	{Mas} 				{System.out.print("Mas "); return symbol(sym.Mas, yytext());}
	{Menos} 			{System.out.print("Menos "); return symbol(sym.Menos, yytext());}
	{Por} 				{System.out.print("Por "); return symbol(sym.Por, yytext());}
	{Entre} 			{System.out.print("Entre "); return symbol(sym.Entre, yytext());}
	{Distinto} 			{System.out.print("Distinto "); return symbol(sym.Distinto, yytext());}
	{Mayor} 			{System.out.print("Mayor "); return symbol(sym.Mayor, yytext());}
	{MayorIgual} 		{System.out.print("MayorIgual "); return symbol(sym.MayorIgual, yytext());}
	{Menor} 			{System.out.print("Menor "); return symbol(sym.Menor, yytext());}
	{MenorIgual} 		{System.out.print("MenorIgual "); return symbol(sym.MenorIgual, yytext());}
	{And}				{System.out.print("And "); return symbol(sym.And, yytext());}
	{Or}				{System.out.print("Or "); return symbol(sym.Or, yytext());}
	{Not}				{System.out.print("Not "); return symbol(sym.Not, yytext());}
	{For}				{System.out.print("For "); return symbol(sym.For, yytext());}
	{To}				{System.out.print("To "); return symbol(sym.To, yytext());}
	{Step}				{System.out.print("Step "); return symbol(sym.Step, yytext());}
	{Next}				{System.out.print("Next "); return symbol(sym.Next, yytext());}
	{Loop}				{System.out.print("Loop "); return symbol(sym.Loop, yytext());}
	{Do}				{System.out.print("Do "); return symbol(sym.Do, yytext());}
	{While}				{System.out.print("While "); return symbol(sym.While, yytext());}
	{Until}				{System.out.print("Until "); return symbol(sym.Until, yytext());}
	{If}				{System.out.print("If "); return symbol(sym.If, yytext());}
	{Then}				{System.out.print("Then "); return symbol(sym.Then, yytext());}
	{Else}				{System.out.print("Else "); return symbol(sym.Else, yytext());}
	{ElseIf}			{System.out.print("ElseIf "); return symbol(sym.ElseIf, yytext());}
	{End}				{System.out.print("End "); return symbol(sym.End, yytext());}
	{Coma}				{System.out.print("Coma "); return symbol(sym.Coma, yytext());}
	{Punto}				{System.out.print("Punto "); return symbol(sym.Punto, yytext());}
	{ParI}				{System.out.print("ParI "); return symbol(sym.ParI, yytext());}
	{ParD}				{System.out.print("ParD "); return symbol(sym.ParD, yytext());}
	{True}				{System.out.print("True "); return symbol(sym.True, yytext());}
	{False}				{System.out.print("False "); return symbol(sym.False, yytext());}
	{IntLiteral}		{System.out.print("IntLiteral "); return symbol(sym.IntLiteral, yytext());}
	{GuionBajo}			{System.out.print("GuionBajo "); return symbol(sym.GuionBajo, yytext());}
	{Id}				{System.out.print("Id "); return symbol(sym.Id, yytext());}
	{Ampersand}			{System.out.print("Ampersand "); return symbol(sym.Ampersand, yytext());}
	{Comilla}			{yybegin(STRING);/*System.out.print("Comilla "); return symbol(sym.Comilla, yytext());*/}
	{FinDeLinea}		{System.out.print("FinDeLinea "); return symbol(sym.FinDeLinea, yytext());}
	{WhiteSpace}		{}
	.					{System.out.print("LexErr "); }
}

<STRING>{
	[^\r\n\"]			{}
	\"\"				{/* asi se escapan las comillas en vb6! wtf */}
	\"					{yybegin(YYINITIAL);System.out.print("StringLiteral "); return symbol(sym.StrLiteral, yytext());}
}