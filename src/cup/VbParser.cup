/* ----------------------Preliminary Declarations Section--------------------*/

package parser;
import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;
import lexer.VbLexer;
import parser.VbSyntaxError;
import parser.sym;
import symtable.*;
import intermedio.*;
import org.fife.ui.rsyntaxtextarea.parser.Parser;
import org.fife.ui.rsyntaxtextarea.parser.ExtendedHyperlinkListener;
import org.fife.ui.rsyntaxtextarea.parser.ParseResult;
import org.fife.ui.rsyntaxtextarea.parser.ParserNotice;

/*
scan with {:
	Symbol symbol = null;
	while (symbol == null || symbol.sym == sym.error){
		symbol = getScanner().next_token();
		if (symbol.sym == sym.error){
			MyToken mySymbol = (MyToken)symbol;
			String msg = "Error en linea " + mySymbol.left; 
			addErr(msg, mySymbol.left, mySymbol.right, mySymbol.offset, mySymbol.value.toString().length());
			if (mySymbol.value.toString().equalsIgnoreCase("runaway string")){
				appendErr("Cadena no cerrada");
			}else{
				appendErr("Caracter invalido '" + mySymbol.value.toString() + "'");
			}
		}
	}

	return symbol != null ? symbol : getSymbolFactory().newSymbol("END_OF_FILE", EOF_sym());
:}
*/
parser code {: 
	private VbLexer lexer;
	private ArrayList<VbSyntaxError> errLst = new ArrayList<>();

	public VbParser(VbLexer lex) {
		super(lex);
		this.lexer = lex;
	}

	public void user_init(){
		this.errLst = new ArrayList<>();
		SymTable.init();
		CuadTable.init();
	}

	public Symbol getCurToken(){
		return this.cur_token;
	}

	public void report_fatal_error(String message, Object info) throws Exception{
		done_parsing();
		report_error(message, info);
		throw new Exception("Can't recover from previous error(s)");
	}

	public void report_error(String message, Object info){
		System.err.print(message);
		System.err.flush();
		if ((info instanceof Symbol)){
		  if (((Symbol)info).left != -1){
			System.err.println(" at character " + ((Symbol)info).left + " of input");
		  }else{
			System.err.println("");
		  }
		}else{
		  System.err.println("");
	   }
	}

	public void syntax_error(Symbol cur_token){
		System.out.println("syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("1cur_token '" + cur_token + "' no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
		System.out.println("unrec_syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error fatal en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("2unrec cur_token no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	protected int error_sync_size(){
		return 3;
	}
	
	public void addErr(String msg, int left, int right, int offset, int length){
		this.errLst.add(new VbSyntaxError(msg, left, right, offset, length));
	}

	public void appendErr(String msg){
		if (!this.errLst.isEmpty()){
			int index = this.errLst.size() - 1;
			this.errLst.get(index).message += ": " + msg;
		}
	}

	public ArrayList getErrLst(){
		return this.errLst;
	}

	public void setLexer(VbLexer lexer){
		this.lexer = lexer;
	}

	public MyToken tokenAt(java.util.Stack stack, int top, int offset){
		return (MyToken)stack.elementAt(top + offset);
	}

	public MyToken toMyToken(Object o){
		return (MyToken)o;
	}
:};

terminal			Dim,Mas,Menos,Por,Entre,Menor,Mayor,Not,And,Or,
					For,To,Step,Next,Loop,Do,While,Until,If,Then,Else,ElseIf,End,Integer,
					Boolean,Char,String,ByVal,ByRef,As,Sub,Function,
					Write,Writeln,Coma,Punto,ParI,ParD,True,GuionBajo,Igual,Id,
					CambioDeLinea,Concatenar,InicioDeLinea,NuevaLinea,MayorIgual,
					MenorIgual,False,Call,Exit,Input,Type,Ampersand;

terminal			Public,Private; // estas nose usan

terminal			FinDeLinea;

terminal			IntLiteral, StrLiteral;



non terminal		Literal BoolLiteral;

non terminal		ProgStart, Root, RootStmts, RootStmt, RootDecl, VarDecl ,
					Block, BlockStmts, BlockStmt, BlockDecl, IdLst,
					FuncDecl, FuncBody, SubDecl, SubBody;

non terminal		MainDecl, MainHead, MainBody;

non terminal		TypeDecl, TypeBlock, TypeBlockStmts, TypeVarDecl;

non terminal		Asignable Asignable;

non terminal		Termino Termino, FuncEval;

non terminal		Asignacion, Operador;

non terminal		Expresion Expresion;

non terminal		ForLoop, DoWhile, IfStmt, ElseStmts;

non terminal		PassMech;

non terminal		ArrayList<Expresion> Args, ArgLst;

non terminal		ArrayList<Parametro> Params, ParamLst;

non terminal		Distinto;	

non terminal		Negativo;

non terminal		MethodCall, LineEnd;

non terminal		Termino Property;

non terminal		PropChain;

non terminal		MyToken Tipo;

/* -------------Precedence and Associatively of Terminals Section----------- */
precedence left Or;
precedence left And;
precedence left Menor, MenorIgual, Mayor, MayorIgual, Igual, Distinto;
precedence left Mas, Menos, Ampersand;
precedence left Por, Entre;
precedence right Not, Negativo;

start with ProgStart;

/*-----------------------------------------------------------------*/
/* ----------------------------Grammar Section-------------------- */
/*-----------------------------------------------------------------*/

ProgStart				::= Root;



/* ROOT */

Root					::= RootStmts | LineEnd RootStmts;

RootStmts				::= RootStmt
						|	RootStmts RootStmt;

RootStmt				::= RootDecl | error {: parser.appendErr("error"); :};

RootDecl				::= VarDecl
						|	SubDecl
						|	FuncDecl
						|	TypeDecl;

VarDecl					::= Dim Id As Tipo:tipo LineEnd {: 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);

								if (SymTable.curScope.hasLocalVar(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" ya existe en este contexto");
								}else{
									Variable v = new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString(), CuadTable.newTemp());
									SymTable.curScope.addVar(v);
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						:}
						|	Dim error LineEnd {: parser.appendErr("Se esperaba Id"); :}
						|	Dim Id error LineEnd {: parser.appendErr("Se esperaba 'As'"); :}
						|	Dim Id As error LineEnd {: parser.appendErr("Se esperaba Tipo"); :};

SubDecl					::= Sub Id {: 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Sub \"" + myid.value.toString() + "\" ya existe");
								}else if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Ya existe una funcion llamada \"" + myid.value.toString() + "\"");
								}else{
									if (myid.value.toString().equalsIgnoreCase("main")){
										SymTable.existeMain = true;
									}
								}
								
								Sub newSub = new Sub(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curScope.addSub(newSub);
								SymTable.curMethod = newSub;
								SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						:} Params Block End Sub LineEnd {:
								SymTable.endScope();
								SymTable.curMethod = null;
						:};

FuncDecl				::= Function Id {: 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Function \"" + myid.value.toString() + "\" ya existe");
								}else if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Ya existe un Sub llamado \"" + myid.value.toString() + "\"");
								}
								
								Funcion newFunc = new Funcion(myid.value.toString(), myid.left, myid.right, myid.offset, "void");
								SymTable.curScope.addFunc(newFunc);
								SymTable.curMethod = newFunc;
								Scope s = SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						:} Params As Tipo:tipo {: 
								((Funcion)SymTable.curMethod).tipo = tipo.value.toString();
								
								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}

								SymTable.curMethod = null;
						:} Block {:
								SymTable.endScope();
						:}End Function LineEnd;

TypeDecl				::= Type Id:id {: 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								TypeStruct t = new TypeStruct(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curTypeStruct = t;
								SymTable.curScope.addTypeStruct(t);
						:} TypeBlock End Type LineEnd {:
								SymTable.curTypeStruct = null;
						:};

TypeBlock				::= LineEnd TypeBlockStmts | LineEnd;

TypeBlockStmts			::= TypeVarDecl
						|	TypeBlockStmts TypeVarDecl;

TypeVarDecl				::= Id As Tipo:tipo LineEnd {:
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);

								if (SymTable.curTypeStruct.hasProp(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La propiedad \"" + myid.value.toString() + "\" ya existe en este Type");
								}else{
									if (!SymTable.rootScope.hasType(tipo.value.toString())){
										parser.syntax_error(tipo);
										parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
									}

									SymTable.curTypeStruct.addProp(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}
						:};/*
						|	Id error LineEnd {: parser.appendErr("Se esperaba 'As'"); :}
						|	Id As error LineEnd {: parser.appendErr("Se esperaba Tipo"); :}
						|	Id As Tipo error LineEnd {: parser.appendErr("Se esperaba fin de linea"); :}
						|	error TypeVarDecl {: parser.appendErr("Sentencia invalida dentro de Type"); :};*/



/* BLOCK */

Block					::= LineEnd BlockStmts 
						|	LineEnd;

BlockStmts				::= BlockStmt
						|	BlockStmts BlockStmt;

BlockStmt				::= VarDecl
						|	ForLoop
						|	DoWhile
						|	IfStmt
						|	Asignacion
						|	MethodCall;



/* Asignacion, Expresiones etc */

Asignable				::= Id {:
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									RESULT = new Asignable(v.id, v.linea, v.columna, v.offset, v.tipo, "variable", CuadTable.newTemp());
								}
						:}
						|	Property:property {:
								if (property == null){
									RESULT = null;
								}else{
									RESULT = new Asignable(property.id, property.linea, property.columna, property.offset, property.tipo, "propiedad", CuadTable.newTemp());
								}
						:};


Asignacion				::= Asignable:a Igual Expresion:e LineEnd {:
								if (a != null && e != null){
									if (!a.tipo.equalsIgnoreCase(e.tipo)){
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
										parser.syntax_error(tok);
										parser.appendErr("Asignacion ilegal (" + a.tipo + " = " + e.tipo + ")");
									}else{
										CuadTable.gen("=", e.lugar, a.lugar);
									}
								}
						:};

/*Comparacion				::= Expresion Igual Expresion;*/

/*Condicion				::= Expresion
						|	Comparacion;*/

Expresion				::= Expresion:e1 Mas Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "integer");
                                                                                CuadTable.gen("+", e1.lugar, e2.lugar, a.lugar);
                                                                        }else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " + " + e2.tipo + ")");
										RESULT = null;
									}
								}else{
									RESULT = null;
								}
						:}
						|   Expresion:e1 Menos Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "integer");
                                                                                CuadTable.gen("-", e1.lugar, e2.lugar, a.lugar);
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " - " + e2.tipo + ")");
										RESULT = null;
									}
								}else{
									RESULT = null;
								}
						:}
						|   Expresion:e1 Ampersand Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (SymTable.isPrimitive(e1.tipo) && SymTable.isPrimitive(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "string");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " & " + e2.tipo + ")");
										RESULT = null;
									}
								}
						:}
						|   Expresion:e1 Por Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "integer");
                                                                                CuadTable.gen("*", e1.lugar, e2.lugar, a.lugar);
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " * " + e2.tipo + ")");
										RESULT = null;
									}
								}
						:}
						|   Expresion:e1 Entre Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "integer");
                                                                                CuadTable.gen("/", e1.lugar, e2.lugar, a.lugar);
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " / " + e2.tipo + ")");
										RESULT = null;
									}
								}
						:}
						|   Expresion:e1 Menor Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " < " + e2.tipo + ")");
										RESULT = null;
									}
								}
						:}
						|   Expresion:e1 MenorIgual Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " <= " + e2.tipo + ")");
										RESULT = null;
									}
								}
						:}
						|   Expresion:e1 Mayor Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " > " + e2.tipo + ")");
										RESULT = null;
									}
								}
						:}
						|   Expresion:e1 MayorIgual Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " >= " + e2.tipo + ")");
										RESULT = null;
									}
								}
						:}
						|	Expresion:e1 Igual Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " = " + e2.tipo + ")");
										RESULT = null;
									}
								}
						:}
						|   Expresion:e1 Distinto Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " <> " + e2.tipo + ")");
										RESULT = null;
									}
								}
						:}
						|   Expresion:e1 And Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("boolean") && e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " And " + e2.tipo + ")");
										RESULT = null;
									}
								}
						:}
						|   Expresion:e1 Or Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("boolean") && e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " Or " + e2.tipo + ")");
										RESULT = null;
									}
								}
						:}
						|	Expresion:e1 Ampersand GuionBajo LineEnd Expresion:e2 {:
								if (e1 != null && e2 != null){
									if (SymTable.isPrimitive(e1.tipo) && SymTable.isPrimitive(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "string");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " & " + e2.tipo + ")");
										RESULT = null;
									}
								}
						:}
						|	ParI Expresion:e ParD {:
								RESULT = e;
						:}
						|   Termino:t {:
								if (t != null){
									RESULT = new Expresion(t.id, t.linea, t.columna, t.offset, t.tipo, t.lugar);
								}else{
									RESULT = null;
								}
						:}
						|	Not Expresion:e {:
								if (e != null){
									RESULT = new Expresion(e.id, e.linea, e.columna, e.offset, "boolean");
								}else{
									RESULT = null;
								}
						:}
						|	Negativo Expresion:e {:
								if (e != null){
									if (e.tipo.equalsIgnoreCase("integer")){
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal ()");
									}
								}
						:};

Termino					::= IntLiteral {:  
								MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Termino t = new Termino(intLit.value.toString(), intLit.left, intLit.right, intLit.offset, "integer", CuadTable.newTemp());
								String i = intLit.value.toString();
								CuadTable.gen("=", i, t.lugar);
								RESULT = t;
						:}
						|	BoolLiteral:b {:
								RESULT = new Termino(b.id, b.linea, b.columna, b.offset, "boolean");
						:}
						|	StrLiteral:strLit {:
								MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								String valor = strLit.toString();

								if (valor.length() == 1){
									RESULT = new Termino(valor, tok.left, tok.right, tok.offset, "char");
								}else{
									RESULT = new Termino(valor, tok.left, tok.right, tok.offset, "string");
								}
						:}
						|	Id {:
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
									RESULT = null;
								}else{
									RESULT = new Termino(v.id, v.linea, v.columna, v.offset, v.tipo);
								}
						:}
						|	FuncEval:f {:
								if (f == null){
									RESULT = null;
								}else{
									RESULT = new Termino(f.id, f.linea, f.columna, f.offset, f.tipo);
								}
						:}
						|	Property:p {:
								if (p == null){
									RESULT = null;
								}else{
									RESULT = new Termino(p.id, p.linea, p.columna, p.offset, p.tipo);
								}
						:};

Operador				::= Mas
						|	Menos
						|	Por
						|	Entre
						|	And
						|	Or
						|	Not
						|	Menor
						|	MenorIgual
						|	Mayor
						|	MayorIgual
						|	Distinto
						|	Ampersand;



/* Estructuras */

ForLoop					::= For Id Igual Expresion To Expresion {:
								MyToken forTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5);
								SymTable.createSubScope("For" + SymTable.blockName(), forTok.left, forTok.right, forTok.offset); 	
						:} Block {:
								SymTable.endScope();
						:} Next Id LineEnd;

DoWhile					::= Do While Expresion {:
								MyToken doTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("Do" + SymTable.blockName(), doTok.left, doTok.right, doTok.offset); 	
						:} Block {:
								SymTable.endScope();
						:} Loop LineEnd;

IfStmt					::= If Expresion Then {:
								MyToken ifTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("If" + SymTable.blockName(), ifTok.left, ifTok.right, ifTok.offset); 
						:} Block {: 
								SymTable.endScope();
						:} ElseStmts End If LineEnd;

ElseStmts				::= ElseIf Expresion Then {: 
								MyToken myelif = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("ElseIf" + SymTable.blockName(), myelif.left, myelif.right, myelif.offset); 
						:} Block {: 
								SymTable.endScope();
						:} ElseStmts
						|	Else {: 
								MyToken elseTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								SymTable.createSubScope("Else" + SymTable.blockName(), elseTok.left, elseTok.right, elseTok.offset); 
						:} Block {: 
								SymTable.endScope();
						:}
						|	/* lambda */;


/* Tipos */

Tipo					::= Integer:i {: RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); :}
						|	Boolean:b {: RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); :}
						|	String:s {: RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); :}
						|	Char:c {: RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); :}
						|	Id:id {: RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); :};

/*AccessMod				::= Public
						|	Private;*/



/* Argumentos y Parametros */

Params					::= ParI ParD
						|	ParI ParamLst:paramLst ParD;
						

ParamLst				::= PassMech:passMech Id As Tipo:tipo {:
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						:}
						|	ParamLst:paramLst Coma PassMech:passMech Id:id As Tipo:tipo {:
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						:};

PassMech				::= ByVal:byVal {: RESULT = byVal.toString().toLowerCase(); :}
						|	ByRef:byRef {: RESULT = byRef.toString().toLowerCase(); :};



/* Cositas... */

BoolLiteral				::= True {:
								MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								RESULT = new Literal("true", tok.left, tok.right, tok.offset, "boolean");
						:}
						|	False {:
								MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								RESULT = new Literal("false", tok.left, tok.right, tok.offset, "boolean");
						:};

Distinto				::= Menor Mayor;

Negativo				::= Menos;

MethodCall				::= FuncEval LineEnd
						|	Call FuncEval LineEnd;

FuncEval				::= Id Args:args {:
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
								Funcion f = SymTable.curScope.findFunc(myid.value.toString());

								if (f == null){
									parser.syntax_error(myid);
									parser.appendErr("La funcion \"" + myid.value.toString() + "\" no ha sido declarada");
									RESULT = null;
								}else{
									if (f.parametros.size() != args.size()){
										parser.syntax_error(myid);
										parser.appendErr("La funcion \"" + myid.value.toString() + "\" recibe " + f.parametros.size() + " argumentos. Se pasaron " + args.size());
										RESULT = null;
									}else{
										for (int i = 0; i < f.parametros.size(); i++){
											if (!f.parametros.get(i).tipo.equalsIgnoreCase(args.get(i).tipo)){
												parser.syntax_error(myid);
												parser.appendErr("El argumento en la posicion " + (i + 1) + " es \"" + args.get(i).tipo + "\", debe ser \"" + f.parametros.get(i).tipo);
											}
										}
									}
									RESULT = new Termino(myid.value.toString(), myid.left, myid.right, myid.offset, f.tipo);
								}
						:};

Args					::= ParI ParD {:
								RESULT = new ArrayList<Expresion>();
						:}
						|	ParI ArgLst:argLst ParD {:
								RESULT = argLst;
						:}
						|	ParI ArgLst error {: parser.appendErr("Se esperaba ')'"); :}
						|	ParI error ParD {: parser.appendErr("Argumentos invalidos"); :};

ArgLst					::= Expresion:e {: 
								ArrayList<Expresion> args = new ArrayList<>();
								args.add(e);
								RESULT = args;
						:}
						|	ArgLst:argLst Coma Expresion:e {: 
								argLst.add(e);
								RESULT = argLst;
						:}
						|	ArgLst:argLst Coma error {: 
								parser.appendErr("Se esperaba Argumento"); 
								RESULT = argLst;
						:};

/*Args					::= Expresion
						|	Args Coma Expresion
						|	 lambda; ;*/



Property				::= Id {:
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									if (!SymTable.isPrimitive(v.tipo)){
										Property p = new Property(v.id, v.linea, v.columna, v.offset, v.tipo);
										SymTable.curProp = p;
									}else{
										parser.syntax_error(myid);
										parser.appendErr("La variable \"" + v.id + "\" no es un Type4");
										RESULT = null;
									}
								}
						:} PropChain:propChain {: 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								RESULT = new Termino(myid.value.toString(), myid.left, myid.right, myid.offset, propChain.toString());
						:};

PropChain				::= Punto Id {:
								if (SymTable.curProp != null){
									String tipoCurProp = SymTable.curProp.tipo;
									TypeStruct t = SymTable.curScope.findTypeStruct(tipoCurProp);

									if (t == null || SymTable.isPrimitive(tipoCurProp)){
										MyToken myid = new MyToken(sym.Id, SymTable.curProp.linea, SymTable.curProp.columna, SymTable.curProp.offset);
										parser.syntax_error(myid);
										parser.appendErr("\"" + tipoCurProp + "\" no es un Type");
										SymTable.curProp = null;
									}else{
										MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
										Variable v = t.findProp(myid.value.toString());
										if (v == null){
											parser.syntax_error(myid);
											parser.appendErr("Type \"" + t.id + "\" no tiene una propiedad llamada \"" + myid.value.toString() + "\"");
											SymTable.curProp = null;
										}else{
											RESULT = v.tipo;
										}
									}
								}
						:}
						|	Punto Id {:
								if (SymTable.curProp != null){
									String tipoCurProp = SymTable.curProp.tipo;
									TypeStruct t = SymTable.curScope.findTypeStruct(tipoCurProp);

									if (t == null || SymTable.isPrimitive(tipoCurProp)){
										MyToken myid = new MyToken(sym.Id, SymTable.curProp.linea, SymTable.curProp.columna, SymTable.curProp.offset);
										parser.syntax_error(myid);
										parser.appendErr("\"" + tipoCurProp + "\" no es un Type");
										SymTable.curProp = null;
									}else{
										MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
										Variable v = t.findProp(myid.value.toString());
										if (v == null){
											parser.syntax_error(myid);
											parser.appendErr("Type \"" + t.id + "\" no tiene una propiedad llamada \"" + myid.value.toString() + "\"");
											SymTable.curProp = null;
										}else{
											if (!SymTable.isPrimitive(v.tipo)){
												t = SymTable.curScope.findTypeStruct(v.tipo);

												if (t == null || SymTable.isPrimitive(tipoCurProp)){
													parser.syntax_error(myid);
													parser.appendErr("\"" + myid.value.toString() + "\" no es un Type");
													SymTable.curProp = null;
												}else{
													SymTable.curProp = new Property(v.id, v.linea, v.columna, v.offset, v.tipo);
												}
											}else{
												parser.syntax_error(myid);
												parser.appendErr("\"" + myid.value.toString() + "\" no es un Type");
												SymTable.curProp = null;
											}
										}
									}
								}
						:} PropChain:propChain {: RESULT = propChain; :};

LineEnd					::= FinDeLinea | FinDeLinea LineEnd;