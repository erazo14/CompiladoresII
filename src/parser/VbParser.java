
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 22 10:58:56 CST 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;
import lexer.VbLexer;
import parser.VbSyntaxError;
import parser.sym;
import symtable.*;
import org.fife.ui.rsyntaxtextarea.parser.Parser;
import org.fife.ui.rsyntaxtextarea.parser.ExtendedHyperlinkListener;
import org.fife.ui.rsyntaxtextarea.parser.ParseResult;
import org.fife.ui.rsyntaxtextarea.parser.ParserNotice;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 22 10:58:56 CST 2014
  */
public class VbParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public VbParser() {super();}

  /** Constructor which sets the default scanner. */
  public VbParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VbParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\007\000\002\007\005\000\002\007\006\000\002\007" +
    "\007\000\002\061\002\000\002\017\012\000\002\062\002" +
    "\000\002\063\002\000\002\064\002\000\002\015\016\000" +
    "\002\065\002\000\002\026\011\000\002\027\004\000\002" +
    "\027\003\000\002\030\003\000\002\030\004\000\002\031" +
    "\006\000\002\010\004\000\002\010\003\000\002\011\003" +
    "\000\002\011\004\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\032\003\000\002\032\003\000\002\033" +
    "\006\000\002\034\005\000\002\035\003\000\002\035\003" +
    "\000\002\036\003\000\002\036\004\000\002\036\005\000" +
    "\002\036\007\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\005\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\066\002\000\002\067\002" +
    "\000\002\041\016\000\002\070\002\000\002\071\002\000" +
    "\002\042\012\000\002\072\002\000\002\073\002\000\002" +
    "\043\014\000\002\074\002\000\002\075\002\000\002\044" +
    "\011\000\002\076\002\000\002\044\005\000\002\044\002" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\047\004\000\002" +
    "\047\005\000\002\050\006\000\002\050\010\000\002\046" +
    "\003\000\002\046\003\000\002\052\003\000\002\052\003" +
    "\000\002\051\004\000\002\053\004\000\002\053\005\000" +
    "\002\054\004\000\002\045\004\000\002\045\005\000\002" +
    "\045\005\000\002\045\005\000\002\022\003\000\002\022" +
    "\005\000\002\022\005\000\002\077\002\000\002\056\005" +
    "\000\002\057\004\000\002\100\002\000\002\057\006\000" +
    "\002\055\003\000\002\055\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\016\003\017\004\016\042\005\043\010\070" +
    "\004\076\020\001\002\000\004\055\275\001\002\000\004" +
    "\055\266\001\002\000\004\002\000\001\002\000\016\002" +
    "\ufff7\003\ufff7\004\ufff7\042\ufff7\043\ufff7\070\ufff7\001\002" +
    "\000\004\055\047\001\002\000\016\002\ufff6\003\ufff6\004" +
    "\ufff6\042\ufff6\043\ufff6\070\ufff6\001\002\000\016\002\uffff" +
    "\003\017\004\016\042\005\043\010\070\004\001\002\000" +
    "\016\002\ufff8\003\ufff8\004\ufff8\042\ufff8\043\ufff8\070\ufff8" +
    "\001\002\000\016\002\ufffb\003\ufffb\004\ufffb\042\ufffb\043" +
    "\ufffb\070\ufffb\001\002\000\016\002\ufff9\003\ufff9\004\ufff9" +
    "\042\ufff9\043\ufff9\070\ufff9\001\002\000\006\003\031\055" +
    "\030\001\002\000\016\002\ufffa\003\ufffa\004\ufffa\042\ufffa" +
    "\043\ufffa\070\ufffa\001\002\000\056\002\uff90\003\uff90\004" +
    "\uff90\016\uff90\021\uff90\022\uff90\023\uff90\026\uff90\030\uff90" +
    "\031\uff90\032\uff90\042\uff90\043\uff90\050\uff90\052\uff90\055" +
    "\uff90\064\uff90\065\uff90\070\uff90\074\uff90\075\uff90\076\020" +
    "\001\002\000\014\003\017\004\016\042\005\043\010\070" +
    "\004\001\002\000\004\002\024\001\002\000\016\002\ufffd" +
    "\003\ufffd\004\ufffd\042\ufffd\043\ufffd\070\ufffd\001\002\000" +
    "\004\002\001\001\002\000\016\002\ufffe\003\017\004\016" +
    "\042\005\043\010\070\004\001\002\000\016\002\ufffc\003" +
    "\ufffc\004\ufffc\042\ufffc\043\ufffc\070\ufffc\001\002\000\054" +
    "\002\uff8f\003\uff8f\004\uff8f\016\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\026\uff8f\030\uff8f\031\uff8f\032\uff8f\042\uff8f\043\uff8f" +
    "\050\uff8f\052\uff8f\055\uff8f\064\uff8f\065\uff8f\070\uff8f\074" +
    "\uff8f\075\uff8f\001\002\000\006\003\033\041\034\001\002" +
    "\000\004\076\020\001\002\000\042\002\ufff4\003\ufff4\004" +
    "\ufff4\016\ufff4\021\ufff4\022\ufff4\023\ufff4\026\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\042\ufff4\043\ufff4\055\ufff4\065\ufff4\070" +
    "\ufff4\001\002\000\004\076\020\001\002\000\016\003\042" +
    "\033\036\034\043\035\040\036\041\055\035\001\002\000" +
    "\010\046\uffa9\051\uffa9\076\uffa9\001\002\000\010\046\uffad" +
    "\051\uffad\076\uffad\001\002\000\004\076\020\001\002\000" +
    "\010\046\uffaa\051\uffaa\076\uffaa\001\002\000\010\046\uffab" +
    "\051\uffab\076\uffab\001\002\000\004\076\020\001\002\000" +
    "\010\046\uffac\051\uffac\076\uffac\001\002\000\042\002\ufff2" +
    "\003\ufff2\004\ufff2\016\ufff2\021\ufff2\022\ufff2\023\ufff2\026" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\042\ufff2\043\ufff2\055\ufff2" +
    "\065\ufff2\070\ufff2\001\002\000\042\002\ufff5\003\ufff5\004" +
    "\ufff5\016\ufff5\021\ufff5\022\ufff5\023\ufff5\026\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\042\ufff5\043\ufff5\055\ufff5\065\ufff5\070" +
    "\ufff5\001\002\000\042\002\ufff3\003\ufff3\004\ufff3\016\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\026\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\042\ufff3\043\ufff3\055\ufff3\065\ufff3\070\ufff3\001\002" +
    "\000\004\050\uffef\001\002\000\004\050\052\001\002\000" +
    "\004\041\071\001\002\000\010\037\056\040\053\051\055" +
    "\001\002\000\004\055\uffa3\001\002\000\004\055\066\001" +
    "\002\000\006\041\uffa8\076\uffa8\001\002\000\004\055\uffa4" +
    "\001\002\000\006\046\060\051\061\001\002\000\006\037" +
    "\056\040\053\001\002\000\006\041\uffa7\076\uffa7\001\002" +
    "\000\004\055\063\001\002\000\004\041\064\001\002\000" +
    "\014\033\036\034\043\035\040\036\041\055\035\001\002" +
    "\000\006\046\uffa5\051\uffa5\001\002\000\004\041\067\001" +
    "\002\000\014\033\036\034\043\035\040\036\041\055\035" +
    "\001\002\000\006\046\uffa6\051\uffa6\001\002\000\014\033" +
    "\036\034\043\035\040\036\041\055\035\001\002\000\004" +
    "\076\uffee\001\002\000\004\076\020\001\002\000\030\004" +
    "\016\016\120\021\uffe3\022\uffe3\023\114\026\104\030\uffe3" +
    "\031\uffe3\032\uffe3\055\107\065\111\001\002\000\004\032" +
    "\uffed\001\002\000\004\032\077\001\002\000\004\043\100" +
    "\001\002\000\004\076\020\001\002\000\016\002\uffec\003" +
    "\uffec\004\uffec\042\uffec\043\uffec\070\uffec\001\002\000\030" +
    "\004\uffe2\016\uffe2\021\uffe2\022\uffe2\023\uffe2\026\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\055\uffe2\065\uffe2\001\002\000\030" +
    "\004\uffde\016\uffde\021\uffde\022\uffde\023\uffde\026\uffde\030" +
    "\uffde\031\uffde\032\uffde\055\uffde\065\uffde\001\002\000\020" +
    "\013\132\050\133\052\136\055\131\064\135\074\124\075" +
    "\130\001\002\000\004\076\020\001\002\000\030\004\uffdd" +
    "\016\uffdd\021\uffdd\022\uffdd\023\uffdd\026\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\055\uffdd\065\uffdd\001\002\000\010\047\uff95" +
    "\050\200\054\uffda\001\002\000\030\004\016\016\120\021" +
    "\uffe4\022\uffe4\023\114\026\104\030\uffe4\031\uffe4\032\uffe4" +
    "\055\107\065\111\001\002\000\004\055\236\001\002\000" +
    "\030\004\uffdc\016\uffdc\021\uffdc\022\uffdc\023\uffdc\026\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\055\uffdc\065\uffdc\001\002\000" +
    "\030\004\uffe0\016\uffe0\021\uffe0\022\uffe0\023\uffe0\026\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\055\uffe0\065\uffe0\001\002\000" +
    "\004\024\223\001\002\000\004\054\220\001\002\000\004" +
    "\054\uffd9\001\002\000\030\004\uffdb\016\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb\055\uffdb" +
    "\065\uffdb\001\002\000\004\055\122\001\002\000\030\004" +
    "\uffdf\016\uffdf\021\uffdf\022\uffdf\023\uffdf\026\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\055\uffdf\065\uffdf\001\002\000\004\054" +
    "\123\001\002\000\020\013\132\050\133\052\136\055\131" +
    "\064\135\074\124\075\130\001\002\000\050\003\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\017\uffd0\027\uffd0\046\uffd0\051\uffd0\054" +
    "\uffd0\062\uffd0\063\uffd0\071\uffd0\076\uffd0\001\002\000\050" +
    "\003\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\027\uffd4\046\uffd4" +
    "\051\uffd4\054\uffd4\062\uffd4\063\uffd4\071\uffd4\076\uffd4\001" +
    "\002\000\050\003\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\027" +
    "\uffcc\046\uffcc\051\uffcc\054\uffcc\062\uffcc\063\uffcc\071\uffcc" +
    "\076\uffcc\001\002\000\050\003\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\017\uffcf\027\uffcf\046\uffcf\051\uffcf\054\uffcf\062\uffcf\063" +
    "\uffcf\071\uffcf\076\uffcf\001\002\000\050\003\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\017\uffce\027\uffce\046\uffce\051\uffce\054\uffce" +
    "\062\uffce\063\uffce\071\uffce\076\uffce\001\002\000\054\003" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\017\uffcd\027\uffcd\046\uffcd\047" +
    "\uff95\050\200\051\uffcd\054\uffcd\062\uffcd\063\uffcd\071\uffcd" +
    "\076\uffcd\001\002\000\016\050\133\052\136\055\131\064" +
    "\135\074\124\075\130\001\002\000\020\013\132\050\133" +
    "\052\136\055\131\064\135\074\124\075\130\001\002\000" +
    "\050\003\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb\027\uffcb\046" +
    "\uffcb\051\uffcb\054\uffcb\062\uffcb\063\uffcb\071\uffcb\076\uffcb" +
    "\001\002\000\050\003\uffa1\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\017\uffa1" +
    "\027\uffa1\046\uffa1\051\uffa1\054\uffa1\062\uffa1\063\uffa1\071" +
    "\uffa1\076\uffa1\001\002\000\050\003\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\017\uffa2\027\uffa2\046\uffa2\051\uffa2\054\uffa2\062\uffa2" +
    "\063\uffa2\071\uffa2\076\uffa2\001\002\000\034\005\156\006" +
    "\140\007\153\010\145\011\142\012\152\013\141\014\147" +
    "\015\150\017\155\062\151\063\146\071\154\001\002\000" +
    "\020\050\uffc8\052\uffc8\053\uffc8\055\uffc8\064\uffc8\074\uffc8" +
    "\075\uffc8\001\002\000\020\050\uffc3\052\uffc3\053\uffc3\055" +
    "\uffc3\064\uffc3\074\uffc3\075\uffc3\001\002\000\022\012\172" +
    "\050\uffc2\052\uffc2\053\uffc2\055\uffc2\064\uffc2\074\uffc2\075" +
    "\uffc2\001\002\000\020\050\uffbe\052\uffbe\053\uffbe\055\uffbe" +
    "\064\uffbe\074\uffbe\075\uffbe\001\002\000\020\050\133\052" +
    "\136\053\167\055\131\064\135\074\124\075\130\001\002" +
    "\000\020\050\uffc6\052\uffc6\053\uffc6\055\uffc6\064\uffc6\074" +
    "\uffc6\075\uffc6\001\002\000\020\050\uffc1\052\uffc1\053\uffc1" +
    "\055\uffc1\064\uffc1\074\uffc1\075\uffc1\001\002\000\020\050" +
    "\uffc5\052\uffc5\053\uffc5\055\uffc5\064\uffc5\074\uffc5\075\uffc5" +
    "\001\002\000\020\050\uffc4\052\uffc4\053\uffc4\055\uffc4\064" +
    "\uffc4\074\uffc4\075\uffc4\001\002\000\020\050\uffbf\052\uffbf" +
    "\053\uffbf\055\uffbf\064\uffbf\074\uffbf\075\uffbf\001\002\000" +
    "\020\050\uffc0\052\uffc0\053\uffc0\055\uffc0\064\uffc0\074\uffc0" +
    "\075\uffc0\001\002\000\020\050\uffc7\052\uffc7\053\uffc7\055" +
    "\uffc7\064\uffc7\074\uffc7\075\uffc7\001\002\000\020\050\uffbd" +
    "\052\uffbd\053\uffbd\055\uffbd\064\uffbd\074\uffbd\075\uffbd\001" +
    "\002\000\020\013\132\050\133\052\136\055\131\064\135" +
    "\074\124\075\130\001\002\000\020\050\uffc9\052\uffc9\053" +
    "\uffc9\055\uffc9\064\uffc9\074\uffc9\075\uffc9\001\002\000\034" +
    "\005\156\006\140\007\153\010\145\011\142\012\152\013" +
    "\141\014\147\015\150\062\151\063\146\071\154\076\uffbc" +
    "\001\002\000\004\076\020\001\002\000\004\021\uffbb\001" +
    "\002\000\004\021\163\001\002\000\004\055\164\001\002" +
    "\000\004\076\020\001\002\000\030\004\uffba\016\uffba\021" +
    "\uffba\022\uffba\023\uffba\026\uffba\030\uffba\031\uffba\032\uffba" +
    "\055\uffba\065\uffba\001\002\000\050\003\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\017\uffd2\027\uffd2\046\uffd2\051\uffd2\054\uffd2\062" +
    "\uffd2\063\uffd2\071\uffd2\076\uffd2\001\002\000\004\076\020" +
    "\001\002\000\016\050\133\052\136\055\131\064\135\074" +
    "\124\075\130\001\002\000\050\003\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\017\uffd1\027\uffd1\046\uffd1\051\uffd1\054\uffd1\062\uffd1" +
    "\063\uffd1\071\uffd1\076\uffd1\001\002\000\020\050\uffa0\052" +
    "\uffa0\053\uffa0\055\uffa0\064\uffa0\074\uffa0\075\uffa0\001\002" +
    "\000\034\005\156\006\140\007\153\010\145\011\142\012" +
    "\152\013\141\014\147\015\150\051\174\062\151\063\146" +
    "\071\154\001\002\000\050\003\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\017\uffca\027\uffca\046\uffca\051\uffca\054\uffca\062\uffca\063" +
    "\uffca\071\uffca\076\uffca\001\002\000\050\003\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\017\uffd3\027\uffd3\046\uffd3\051\uffd3\054\uffd3" +
    "\062\uffd3\063\uffd3\071\uffd3\076\uffd3\001\002\000\050\003" +
    "\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\017\uff9d\027\uff9d\046\uff9d\051" +
    "\uff9d\054\uff9d\062\uff9d\063\uff9d\071\uff9d\076\uff9d\001\002" +
    "\000\004\047\214\001\002\000\024\003\203\013\132\050" +
    "\133\051\202\052\136\055\131\064\135\074\124\075\130" +
    "\001\002\000\010\003\206\046\207\051\210\001\002\000" +
    "\050\003\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\017\uff9c\027\uff9c\046" +
    "\uff9c\051\uff9c\054\uff9c\062\uff9c\063\uff9c\071\uff9c\076\uff9c" +
    "\001\002\000\004\051\205\001\002\000\040\003\uff98\005" +
    "\156\006\140\007\153\010\145\011\142\012\152\013\141" +
    "\014\147\015\150\046\uff98\051\uff98\062\151\063\146\071" +
    "\154\001\002\000\050\003\uff99\005\uff99\006\uff99\007\uff99" +
    "\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\017" +
    "\uff99\027\uff99\046\uff99\051\uff99\054\uff99\062\uff99\063\uff99" +
    "\071\uff99\076\uff99\001\002\000\050\003\uff9a\005\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a" +
    "\015\uff9a\017\uff9a\027\uff9a\046\uff9a\051\uff9a\054\uff9a\062" +
    "\uff9a\063\uff9a\071\uff9a\076\uff9a\001\002\000\022\003\211" +
    "\013\132\050\133\052\136\055\131\064\135\074\124\075" +
    "\130\001\002\000\050\003\uff9b\005\uff9b\006\uff9b\007\uff9b" +
    "\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\017" +
    "\uff9b\027\uff9b\046\uff9b\051\uff9b\054\uff9b\062\uff9b\063\uff9b" +
    "\071\uff9b\076\uff9b\001\002\000\010\003\uff96\046\uff96\051" +
    "\uff96\001\002\000\040\003\uff97\005\156\006\140\007\153" +
    "\010\145\011\142\012\152\013\141\014\147\015\150\046" +
    "\uff97\051\uff97\062\151\063\146\071\154\001\002\000\050" +
    "\003\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012" +
    "\uff94\013\uff94\014\uff94\015\uff94\017\uff94\027\uff94\046\uff94" +
    "\051\uff94\054\uff94\062\uff94\063\uff94\071\uff94\076\uff94\001" +
    "\002\000\004\055\215\001\002\000\052\003\uff93\005\uff93" +
    "\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014" +
    "\uff93\015\uff93\017\uff93\027\uff93\046\uff93\047\uff92\051\uff93" +
    "\054\uff93\062\uff93\063\uff93\071\uff93\076\uff93\001\002\000" +
    "\004\047\214\001\002\000\050\003\uff91\005\uff91\006\uff91" +
    "\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015" +
    "\uff91\017\uff91\027\uff91\046\uff91\051\uff91\054\uff91\062\uff91" +
    "\063\uff91\071\uff91\076\uff91\001\002\000\020\013\132\050" +
    "\133\052\136\055\131\064\135\074\124\075\130\001\002" +
    "\000\034\005\156\006\140\007\153\010\145\011\142\012" +
    "\152\013\141\014\147\015\150\062\151\063\146\071\154" +
    "\076\020\001\002\000\030\004\uffd8\016\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8\055\uffd8" +
    "\065\uffd8\001\002\000\020\013\132\050\133\052\136\055" +
    "\131\064\135\074\124\075\130\001\002\000\040\005\156" +
    "\006\140\007\153\010\145\011\142\012\152\013\141\014" +
    "\147\015\150\027\uffd6\054\234\062\151\063\146\071\154" +
    "\076\uffd6\001\002\000\004\076\uffb9\001\002\000\006\027" +
    "\uffd5\076\uffd5\001\002\000\004\076\020\001\002\000\004" +
    "\022\uffb8\001\002\000\004\022\232\001\002\000\004\076" +
    "\020\001\002\000\030\004\uffb7\016\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\026\uffb7\030\uffb7\031\uffb7\032\uffb7\055\uffb7\065" +
    "\uffb7\001\002\000\020\013\132\050\133\052\136\055\131" +
    "\064\135\074\124\075\130\001\002\000\036\005\156\006" +
    "\140\007\153\010\145\011\142\012\152\013\141\014\147" +
    "\015\150\027\uffd7\062\151\063\146\071\154\076\uffd7\001" +
    "\002\000\004\050\200\001\002\000\004\076\020\001\002" +
    "\000\030\004\uff9e\016\uff9e\021\uff9e\022\uff9e\023\uff9e\026" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\055\uff9e\065\uff9e\001\002" +
    "\000\030\004\uffe1\016\uffe1\021\uffe1\022\uffe1\023\uffe1\026" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\055\uffe1\065\uffe1\001\002" +
    "\000\030\004\uff9f\016\uff9f\021\uff9f\022\uff9f\023\uff9f\026" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\055\uff9f\065\uff9f\001\002" +
    "\000\004\027\244\001\002\000\004\076\uffb6\001\002\000" +
    "\004\076\020\001\002\000\010\030\uffb5\031\uffb5\032\uffb5" +
    "\001\002\000\010\030\252\031\251\032\uffae\001\002\000" +
    "\004\032\263\001\002\000\020\013\132\050\133\052\136" +
    "\055\131\064\135\074\124\075\130\001\002\000\004\076" +
    "\uffb0\001\002\000\004\076\020\001\002\000\004\032\uffaf" +
    "\001\002\000\004\027\256\001\002\000\004\076\uffb3\001" +
    "\002\000\004\076\020\001\002\000\010\030\uffb2\031\uffb2" +
    "\032\uffb2\001\002\000\010\030\252\031\251\032\uffae\001" +
    "\002\000\004\032\uffb1\001\002\000\004\026\264\001\002" +
    "\000\004\076\020\001\002\000\030\004\uffb4\016\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\026\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\055\uffb4\065\uffb4\001\002\000\004\050\ufff1\001\002\000" +
    "\004\050\052\001\002\000\004\076\020\001\002\000\004" +
    "\032\272\001\002\000\004\042\273\001\002\000\004\076" +
    "\020\001\002\000\016\002\ufff0\003\ufff0\004\ufff0\042\ufff0" +
    "\043\ufff0\070\ufff0\001\002\000\004\076\uffeb\001\002\000" +
    "\004\076\020\001\002\000\006\032\uffe8\055\304\001\002" +
    "\000\004\032\301\001\002\000\004\070\302\001\002\000" +
    "\004\076\020\001\002\000\016\002\uffea\003\uffea\004\uffea" +
    "\042\uffea\043\uffea\070\uffea\001\002\000\004\041\310\001" +
    "\002\000\006\032\uffe7\055\uffe7\001\002\000\006\032\uffe9" +
    "\055\304\001\002\000\006\032\uffe6\055\uffe6\001\002\000" +
    "\014\033\036\034\043\035\040\036\041\055\035\001\002" +
    "\000\004\076\020\001\002\000\006\032\uffe5\055\uffe5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\026\002\021\003\005\004\011\005\022\006" +
    "\013\007\014\015\006\017\012\026\010\055\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\025\006\013\007\014\015\006\017\012\026\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\026\001" +
    "\001\000\020\004\024\005\022\006\013\007\014\015\006" +
    "\017\012\026\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\025\006\013\007\014" +
    "\015\006\017\012\026\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\031\001\001" +
    "\000\002\001\001\000\004\055\045\001\001\000\004\060" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\047\001" +
    "\001\000\004\047\050\001\001\000\002\001\001\000\006" +
    "\046\053\050\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\067\001\001\000" +
    "\002\001\001\000\004\060\071\001\001\000\004\063\072" +
    "\001\001\000\006\010\074\055\073\001\001\000\030\007" +
    "\112\011\107\012\101\032\114\033\111\041\120\042\102" +
    "\043\105\053\116\054\104\056\115\001\001\000\004\064" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\034\225\035\242\036\223\037\124" +
    "\052\126\054\125\056\133\001\001\000\004\055\241\001" +
    "\001\000\002\001\001\000\006\045\175\077\176\001\001" +
    "\000\026\007\112\012\240\032\114\033\111\041\120\042" +
    "\102\043\105\053\116\054\104\056\115\001\001\000\004" +
    "\054\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\036\136\037\124\052\126\054\125\056\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\175" +
    "\077\176\001\001\000\012\037\174\052\126\054\125\056" +
    "\133\001\001\000\014\036\172\037\124\052\126\054\125" +
    "\056\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\143\051\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\037\165\052\126\054\125\056\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\036\156\037\124\052" +
    "\126\054\125\056\133\001\001\000\002\001\001\000\010" +
    "\040\143\051\142\066\157\001\001\000\006\010\160\055" +
    "\073\001\001\000\004\067\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\167\001\001\000\012" +
    "\037\170\052\126\054\125\056\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\143\051\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\212\001\001\000\016\022\200\036\203\037\124" +
    "\052\126\054\125\056\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\143\051\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\036" +
    "\211\037\124\052\126\054\125\056\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\143\051\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\100\215" +
    "\001\001\000\004\057\216\001\001\000\002\001\001\000" +
    "\014\036\220\037\124\052\126\054\125\056\133\001\001" +
    "\000\010\040\143\051\142\055\221\001\001\000\002\001" +
    "\001\000\020\034\225\035\224\036\223\037\124\052\126" +
    "\054\125\056\133\001\001\000\006\040\143\051\142\001" +
    "\001\000\004\070\226\001\001\000\002\001\001\000\006" +
    "\010\227\055\073\001\001\000\004\071\230\001\001\000" +
    "\002\001\001\000\004\055\232\001\001\000\002\001\001" +
    "\000\014\036\234\037\124\052\126\054\125\056\133\001" +
    "\001\000\006\040\143\051\142\001\001\000\004\045\175" +
    "\001\001\000\004\055\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\244\001\001\000\006\010\245\055\073\001\001\000" +
    "\004\073\246\001\001\000\004\044\247\001\001\000\002" +
    "\001\001\000\020\034\225\035\254\036\223\037\124\052" +
    "\126\054\125\056\133\001\001\000\004\076\252\001\001" +
    "\000\006\010\253\055\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\074\256\001\001\000\006\010\257" +
    "\055\073\001\001\000\004\075\260\001\001\000\004\044" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\264\001\001\000\002\001\001\000\004\061\266\001" +
    "\001\000\004\047\267\001\001\000\006\010\270\055\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\273\001\001\000\002\001\001\000\004\065\275\001\001" +
    "\000\006\027\277\055\276\001\001\000\006\030\305\031" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\306\001\001\000\002\001\001" +
    "\000\004\060\310\001\001\000\004\055\311\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VbParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VbParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VbParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	private VbLexer lexer;
	private ArrayList<VbSyntaxError> errLst = new ArrayList<>();

	public VbParser(VbLexer lex) {
		super(lex);
		this.lexer = lex;
	}

	public void user_init(){
		this.errLst = new ArrayList<>();
		SymTable.init();
	}

	public Symbol getCurToken(){
		return this.cur_token;
	}

	public void report_fatal_error(String message, Object info) throws Exception{
		done_parsing();
		report_error(message, info);
		throw new Exception("Can't recover from previous error(s)");
	}

	public void report_error(String message, Object info){
		System.err.print(message);
		System.err.flush();
		if ((info instanceof Symbol)){
		  if (((Symbol)info).left != -1){
			System.err.println(" at character " + ((Symbol)info).left + " of input");
		  }else{
			System.err.println("");
		  }
		}else{
		  System.err.println("");
	   }
	}

	public void syntax_error(Symbol cur_token){
		System.out.println("syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("1cur_token '" + cur_token + "' no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
		System.out.println("unrec_syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error fatal en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("2unrec cur_token no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	protected int error_sync_size(){
		return 3;
	}
	
	public void addErr(String msg, int left, int right, int offset, int length){
		this.errLst.add(new VbSyntaxError(msg, left, right, offset, length));
	}

	public void appendErr(String msg){
		if (!this.errLst.isEmpty()){
			int index = this.errLst.size() - 1;
			this.errLst.get(index).message += ": " + msg;
		}
	}

	public ArrayList getErrLst(){
		return this.errLst;
	}

	public void setLexer(VbLexer lexer){
		this.lexer = lexer;
	}

	public MyToken tokenAt(java.util.Stack stack, int top, int offset){
		return (MyToken)stack.elementAt(top + offset);
	}

	public MyToken toMyToken(Object o){
		return (MyToken)o;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$VbParser$actions {
  private final VbParser parser;

  /** Constructor */
  CUP$VbParser$actions(VbParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$VbParser$do_action(
    int                        CUP$VbParser$act_num,
    java_cup.runtime.lr_parser CUP$VbParser$parser,
    java.util.Stack            CUP$VbParser$stack,
    int                        CUP$VbParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VbParser$result;

      /* select the action based on the action number */
      switch (CUP$VbParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LineEnd ::= FinDeLinea LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("LineEnd",43, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LineEnd ::= FinDeLinea 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("LineEnd",43, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PropChain ::= Punto Id NT$15 PropChain 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int propChainleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propChainright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object propChain = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = propChain; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PropChain",45, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$15 ::= 
            {
              Object RESULT =null;

								if (SymTable.curProp != null){
									String tipoCurProp = SymTable.curProp.tipo;
									TypeStruct t = SymTable.curScope.findTypeStruct(tipoCurProp);

									if (t == null || SymTable.isPrimitive(tipoCurProp)){
										MyToken myid = new MyToken(sym.Id, SymTable.curProp.linea, SymTable.curProp.columna, SymTable.curProp.offset);
										//MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
										parser.syntax_error(myid);
										parser.appendErr("\"" + tipoCurProp + "\" no es un Type1");
										SymTable.curProp = null;
									}else{
										MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
										Variable v = t.findProp(myid.value.toString());
										if (v == null){
											parser.syntax_error(myid);
											parser.appendErr("Type \"" + t.id + "\" no tiene una propiedad llamada \"" + myid.value.toString() + "\"2");
											SymTable.curProp = null;
										}else{
											if (!SymTable.isPrimitive(v.tipo)){
												t = SymTable.curScope.findTypeStruct(v.tipo);

												if (t == null || SymTable.isPrimitive(tipoCurProp)){
													parser.syntax_error(myid);
													parser.appendErr("\"" + myid.value.toString() + "\" no es un Type5");
													SymTable.curProp = null;
												}else{
													SymTable.curProp = new Property(v.id, v.linea, v.columna, v.offset, v.tipo);
												}
											}else{
												parser.syntax_error(myid);
												parser.appendErr("\"" + myid.value.toString() + "\" no es un Type2");
												SymTable.curProp = null;
											}
										}
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$15",62, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PropChain ::= Punto Id 
            {
              Object RESULT =null;
		
								if (SymTable.curProp != null){
									String tipoCurProp = SymTable.curProp.tipo;
									TypeStruct t = SymTable.curScope.findTypeStruct(tipoCurProp);

									if (t == null || SymTable.isPrimitive(tipoCurProp)){
										MyToken myid = new MyToken(sym.Id, SymTable.curProp.linea, SymTable.curProp.columna, SymTable.curProp.offset);
										//MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
										parser.syntax_error(myid);
										parser.appendErr("\"" + tipoCurProp + "\" no es un Type3");
										SymTable.curProp = null;
									}else{
										MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
										Variable v = t.findProp(myid.value.toString());
										if (v == null){
											parser.syntax_error(myid);
											parser.appendErr("Type \"" + t.id + "\" no tiene una propiedad llamada \"" + myid.value.toString() + "\"1");
											SymTable.curProp = null;
										}else{
											RESULT = v.tipo;
										}
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PropChain",45, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Property ::= Id NT$14 PropChain 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int propChainleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propChainright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object propChain = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = propChain; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Property",44, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$14 ::= 
            {
              Object RESULT =null;

								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									if (!SymTable.isPrimitive(v.tipo)){
										Property p = new Property(v.id, v.linea, v.columna, v.offset, v.tipo);
										SymTable.curProp = p;
									}else{
										parser.syntax_error(myid);
										parser.appendErr("La variable \"" + v.id + "\" no es un Type4");
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$14",61, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ArgLst ::= ArgLst Coma error 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Argumento"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",16, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ArgLst ::= ArgLst Coma Expresion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",16, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ArgLst ::= Expresion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",16, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Args ::= ParI error ParD 
            {
              Object RESULT =null;
		 parser.appendErr("Argumentos invalidos"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Args ::= ParI ArgLst error 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba ')'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Args ::= ParI ArgLst ParD 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Args ::= ParI ParD 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FuncEval ::= Id Args 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncEval",42, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MethodCall ::= Call FuncEval LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("MethodCall",41, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MethodCall ::= FuncEval LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("MethodCall",41, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Distinto ::= Menor Mayor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Distinto",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BoolLiteral ::= False 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",40, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BoolLiteral ::= True 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",40, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PassMech ::= ByRef 
            {
              Object RESULT =null;
		int byRefleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int byRefright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object byRef = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = byRef.toString().toLowerCase(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PassMech",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PassMech ::= ByVal 
            {
              Object RESULT =null;
		int byValleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int byValright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object byVal = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = byVal.toString().toLowerCase(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PassMech",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ParamLst ::= ParamLst Coma PassMech Id As Tipo 
            {
              ArrayList<Parametro> RESULT =null;
		int paramLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int paramLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		ArrayList<Parametro> paramLst = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int passMechleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int passMechright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object passMech = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ParamLst ::= PassMech Id As Tipo 
            {
              ArrayList<Parametro> RESULT =null;
		int passMechleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int passMechright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object passMech = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Params ::= ParI ParamLst ParD 
            {
              ArrayList<Parametro> RESULT =null;
		int paramLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int paramLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Parametro> paramLst = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Params ::= ParI ParD 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Tipo ::= Id 
            {
              MyToken RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Tipo ::= Char 
            {
              MyToken RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Tipo ::= String 
            {
              MyToken RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Tipo ::= Boolean 
            {
              MyToken RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Tipo ::= Integer 
            {
              MyToken RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ElseStmts ::= 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseStmts",34, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ElseStmts ::= Else NT$13 Block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		 
								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseStmts",34, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$13 ::= 
            {
              Object RESULT =null;
 
								MyToken elseTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								SymTable.createSubScope("Else" + SymTable.blockName(), elseTok.left, elseTok.right, elseTok.offset); 
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$13",60, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ElseStmts ::= ElseIf Condicion Then NT$11 Block NT$12 ElseStmts 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseStmts",34, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
 
								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$12",59, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$11 ::= 
            {
              Object RESULT =null;
 
								MyToken myelif = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("ElseIf" + SymTable.blockName(), myelif.left, myelif.right, myelif.offset); 
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$11",58, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IfStmt ::= If Condicion Then NT$9 Block NT$10 ElseStmts End If LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("IfStmt",33, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
 
								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$10",57, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$9 ::= 
            {
              Object RESULT =null;

								MyToken ifTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("If" + SymTable.blockName(), ifTok.left, ifTok.right, ifTok.offset); 
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$9",56, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DoWhile ::= Do While Condicion NT$7 Block NT$8 Loop LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("DoWhile",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$8",55, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$7 ::= 
            {
              Object RESULT =null;

								MyToken doTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("Do" + SymTable.blockName(), doTok.left, doTok.right, doTok.offset); 	
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$7",54, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ForLoop ::= For Id Igual Expresion To Expresion NT$5 Block NT$6 Next Id LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$6",53, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$5 ::= 
            {
              Object RESULT =null;

								MyToken forTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5);
								SymTable.createSubScope("For" + SymTable.blockName(), forTok.left, forTok.right, forTok.offset); 	
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$5",52, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Operador ::= Ampersand 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Operador ::= Distinto 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Operador ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Operador ::= Mayor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Operador ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Operador ::= Menor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Operador ::= Not 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Operador ::= Or 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Operador ::= And 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Operador ::= Entre 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Operador ::= Por 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Operador ::= Menos 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Operador ::= Mas 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Termino ::= ParI Expresion ParD 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Termino ::= Property 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Termino ::= FuncEval 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Termino ::= Id 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Termino ::= StrLiteral 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Termino ::= BoolLiteral 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Termino ::= IntLiteral 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion Operador GuionBajo LineEnd Termino 
            {
              Object RESULT =null;
		 RESULT = "integer"; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= Expresion Operador Termino 
            {
              Object RESULT =null;
		 RESULT = "integer"; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= Not Termino 
            {
              Object RESULT =null;
		 RESULT = "integer"; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= Termino 
            {
              Object RESULT =null;
		 RESULT = "integer"; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Condicion ::= Comparacion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Condicion",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Condicion ::= Expresion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Condicion",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Comparacion ::= Expresion Igual Expresion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Comparacion",26, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Asignacion ::= Asignable Igual Expresion LineEnd 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Asignable a = (Asignable)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		 
								System.out.println(a.tipo + " y " + e.toString());
								if (!a.tipo.equalsIgnoreCase(e.toString())){
									MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
									parser.addErr("Error general: ", tok.left,tok.right,tok.offset+2, 2);
									parser.appendErr("Se esperaba " + a.tipo + ", se recibio " + e.toString());
								}
							
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignacion",25, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Asignable ::= Property 
            {
              Asignable RESULT =null;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object property = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = new Asignable("property", property.toString()); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignable",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Asignable ::= Id 
            {
              Asignable RESULT =null;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									RESULT = new Asignable("variable", v.tipo);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignable",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BlockStmt ::= MethodCall 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BlockStmt ::= Asignacion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BlockStmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BlockStmt ::= DoWhile 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BlockStmt ::= ForLoop 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BlockStmt ::= VarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BlockStmts ::= BlockStmts BlockStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BlockStmts ::= BlockStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Block ::= LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Block",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Block ::= LineEnd BlockStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Block",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TypeVarDecl ::= Id As Tipo LineEnd 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);

								if (SymTable.curTypeStruct.hasProp(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La propiedad \"" + myid.value.toString() + "\" ya existe en este Type");
								}else{
									if (!SymTable.rootScope.hasType(tipo.value.toString())){
										parser.syntax_error(tipo);
										parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
									}

									SymTable.curTypeStruct.addProp(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeVarDecl",23, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TypeBlockStmts ::= TypeBlockStmts TypeVarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlockStmts",22, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TypeBlockStmts ::= TypeVarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlockStmts",22, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TypeBlock ::= LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlock",21, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TypeBlock ::= LineEnd TypeBlockStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlock",21, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TypeDecl ::= Type Id NT$4 TypeBlock End Type LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		
								SymTable.curTypeStruct = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeDecl",20, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								TypeStruct t = new TypeStruct(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curTypeStruct = t;
								SymTable.curScope.addTypeStruct(t);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$4",51, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FuncDecl ::= Function Id NT$1 Params As Tipo NT$2 Block NT$3 End Function LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",11, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;

								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$3",50, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
 
								((Funcion)SymTable.curMethod).tipo = tipo.value.toString();
								
								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}

								SymTable.curMethod = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            {
              Object RESULT =null;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Function \"" + myid.value.toString() + "\" ya existe");
								}else if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Ya existe un Sub llamado \"" + myid.value.toString() + "\"");
								}
								
								Funcion newFunc = new Funcion(myid.value.toString(), myid.left, myid.right, myid.offset, "void");
								SymTable.curScope.addFunc(newFunc);
								SymTable.curMethod = newFunc;
								Scope s = SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SubDecl ::= Sub Id NT$0 Params Block End Sub LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		
								SymTable.endScope();
								SymTable.curMethod = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("SubDecl",13, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Sub \"" + myid.value.toString() + "\" ya existe");
								}else if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Ya existe una funcion llamada \"" + myid.value.toString() + "\"");
								}else{
									if (myid.value.toString().equalsIgnoreCase("main")){
										SymTable.existeMain = true;
									}
								}
								
								Sub newSub = new Sub(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curScope.addSub(newSub);
								SymTable.curMethod = newSub;
								SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= Dim Id As error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Tipo"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= Dim Id error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba 'As'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDecl ::= Dim error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Id"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDecl ::= Dim Id As Tipo LineEnd 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);

								if (SymTable.curScope.hasLocalVar(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" ya existe en este contexto");
								}else{
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RootDecl ::= TypeDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootDecl",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RootDecl ::= FuncDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootDecl",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RootDecl ::= SubDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootDecl",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RootDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootDecl",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RootStmt ::= error 
            {
              Object RESULT =null;
		 parser.appendErr("error"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",3, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RootStmt ::= RootDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",3, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RootStmts ::= RootStmts RootStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmts",2, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RootStmts ::= RootStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmts",2, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Root ::= LineEnd RootStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",1, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Root ::= RootStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",1, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgStart ::= Root 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ProgStart",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgStart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		RESULT = start_val;
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VbParser$parser.done_parsing();
          return CUP$VbParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

