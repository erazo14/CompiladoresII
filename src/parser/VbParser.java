
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 03 11:19:10 CST 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;
import lexer.VbLexer;
import parser.VbSyntaxError;
import parser.sym;
import symtable.*;
import intermedio.*;
import org.fife.ui.rsyntaxtextarea.parser.Parser;
import org.fife.ui.rsyntaxtextarea.parser.ExtendedHyperlinkListener;
import org.fife.ui.rsyntaxtextarea.parser.ParseResult;
import org.fife.ui.rsyntaxtextarea.parser.ParserNotice;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 03 11:19:10 CST 2014
  */
public class VbParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public VbParser() {super();}

  /** Constructor which sets the default scanner. */
  public VbParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VbParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\005\003\000\002\006" +
    "\003\000\002\006\002\000\002\007\003\000\002\007\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\012\006\000\002\062\002\000\002" +
    "\021\012\000\002\063\002\000\002\064\002\000\002\065" +
    "\002\000\002\017\016\000\002\066\002\000\002\027\011" +
    "\000\002\030\003\000\002\031\003\000\002\031\005\000" +
    "\002\032\005\000\002\023\003\000\002\023\002\000\002" +
    "\013\003\000\002\013\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\033\003\000\002\033\003\000" +
    "\002\036\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\005" +
    "\000\002\040\005\000\002\040\005\000\002\040\006\000" +
    "\002\040\005\000\002\040\007\000\002\040\005\000\002" +
    "\040\003\000\002\040\004\000\002\040\004\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\067\002\000" +
    "\002\070\002\000\002\041\015\000\002\071\002\000\002" +
    "\072\002\000\002\042\011\000\002\073\002\000\002\074" +
    "\002\000\002\043\020\000\002\044\012\000\002\044\002" +
    "\000\002\045\005\000\002\045\002\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\051\004\000\002\051\005\000\002\052" +
    "\006\000\002\052\010\000\002\046\003\000\002\046\003" +
    "\000\002\002\002\000\002\003\002\000\002\004\003\000" +
    "\002\004\003\000\002\053\004\000\002\054\003\000\002" +
    "\055\003\000\002\055\004\000\002\035\004\000\002\047" +
    "\004\000\002\047\005\000\002\047\005\000\002\047\005" +
    "\000\002\050\003\000\002\050\005\000\002\050\005\000" +
    "\002\075\002\000\002\057\005\000\002\060\004\000\002" +
    "\076\002\000\002\060\006\000\002\056\003\000\002\056" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\014\002\ufffe\004\015\042\005\043\011\070" +
    "\004\001\002\000\004\055\305\001\002\000\004\055\276" +
    "\001\002\000\004\002\000\001\002\000\004\074\032\001" +
    "\002\000\004\074\032\001\002\000\004\055\036\001\002" +
    "\000\014\002\uffff\004\015\042\005\043\011\070\004\001" +
    "\002\000\004\074\032\001\002\000\004\074\032\001\002" +
    "\000\004\055\021\001\002\000\004\002\020\001\002\000" +
    "\014\002\ufffd\004\ufffd\042\ufffd\043\ufffd\070\ufffd\001\002" +
    "\000\004\002\001\001\002\000\004\041\022\001\002\000" +
    "\014\033\023\034\030\035\024\036\027\055\025\001\002" +
    "\000\012\032\uffab\046\uffab\051\uffab\074\uffab\001\002\000" +
    "\012\032\uffa8\046\uffa8\051\uffa8\074\uffa8\001\002\000\012" +
    "\032\uffa7\046\uffa7\051\uffa7\074\uffa7\001\002\000\004\074" +
    "\ufff7\001\002\000\012\032\uffa9\046\uffa9\051\uffa9\074\uffa9" +
    "\001\002\000\012\032\uffaa\046\uffaa\051\uffaa\074\uffaa\001" +
    "\002\000\014\002\ufffb\004\ufffb\042\ufffb\043\ufffb\070\ufffb" +
    "\001\002\000\060\002\uff8b\004\uff8b\006\uff8b\013\uff8b\016" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\026\uff8b\030\uff8b\031\uff8b" +
    "\032\uff8b\042\uff8b\043\uff8b\050\uff8b\052\uff8b\055\uff8b\064" +
    "\uff8b\065\uff8b\070\uff8b\074\032\075\uff8b\076\uff8b\001\002" +
    "\000\056\002\uff8a\004\uff8a\006\uff8a\013\uff8a\016\uff8a\021" +
    "\uff8a\022\uff8a\023\uff8a\026\uff8a\030\uff8a\031\uff8a\032\uff8a" +
    "\042\uff8a\043\uff8a\050\uff8a\052\uff8a\055\uff8a\064\uff8a\065" +
    "\uff8a\070\uff8a\075\uff8a\076\uff8a\001\002\000\014\002\ufffa" +
    "\004\ufffa\042\ufffa\043\ufffa\070\ufffa\001\002\000\014\002" +
    "\ufffc\004\ufffc\042\ufffc\043\ufffc\070\ufffc\001\002\000\004" +
    "\050\ufff4\001\002\000\004\050\041\001\002\000\004\041" +
    "\060\001\002\000\010\037\045\040\042\051\043\001\002" +
    "\000\004\055\uffa1\001\002\000\006\041\uffa6\074\uffa6\001" +
    "\002\000\004\055\055\001\002\000\004\055\uffa2\001\002" +
    "\000\006\046\047\051\050\001\002\000\006\037\045\040" +
    "\042\001\002\000\006\041\uffa5\074\uffa5\001\002\000\004" +
    "\055\052\001\002\000\004\041\053\001\002\000\014\033" +
    "\023\034\030\035\024\036\027\055\025\001\002\000\006" +
    "\046\uffa3\051\uffa3\001\002\000\004\041\056\001\002\000" +
    "\014\033\023\034\030\035\024\036\027\055\025\001\002" +
    "\000\006\046\uffa4\051\uffa4\001\002\000\014\033\023\034" +
    "\030\035\024\036\027\055\025\001\002\000\004\074\ufff3" +
    "\001\002\000\004\074\032\001\002\000\020\004\015\016" +
    "\065\023\101\026\075\032\uffe9\055\077\065\066\001\002" +
    "\000\004\074\032\001\002\000\004\055\261\001\002\000" +
    "\004\055\257\001\002\000\004\074\032\001\002\000\004" +
    "\054\uffdf\001\002\000\030\004\015\016\065\021\uffea\022" +
    "\uffea\023\101\026\075\030\uffea\031\uffea\032\uffea\055\077" +
    "\065\066\001\002\000\004\074\032\001\002\000\004\032" +
    "\ufff2\001\002\000\004\054\247\001\002\000\022\006\116" +
    "\013\117\050\120\052\125\055\115\064\123\075\110\076" +
    "\113\001\002\000\004\074\032\001\002\000\010\047\uff90" +
    "\050\177\054\uffe0\001\002\000\004\074\uff9a\001\002\000" +
    "\004\024\107\001\002\000\030\004\uffe8\016\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\055" +
    "\uffe8\065\uffe8\001\002\000\004\074\032\001\002\000\004" +
    "\074\032\001\002\000\030\004\uffe3\016\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\055\uffe3" +
    "\065\uffe3\001\002\000\030\004\uffe2\016\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\055\uffe2" +
    "\065\uffe2\001\002\000\022\006\116\013\117\050\120\052" +
    "\125\055\115\064\123\075\110\076\113\001\002\000\070" +
    "\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\026\uffcb\027\uffcb\032\uffcb\046\uffcb\051" +
    "\uffcb\054\uffcb\055\uffcb\062\uffcb\063\uffcb\065\uffcb\071\uffcb" +
    "\074\uffcb\001\002\000\070\003\uffce\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\021\uffce\022\uffce\023\uffce\026\uffce\027" +
    "\uffce\032\uffce\046\uffce\051\uffce\054\uffce\055\uffce\062\uffce" +
    "\063\uffce\065\uffce\071\uffce\074\uffce\001\002\000\070\003" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\026\uffc7\027\uffc7\032\uffc7\046\uffc7\051\uffc7" +
    "\054\uffc7\055\uffc7\062\uffc7\063\uffc7\065\uffc7\071\uffc7\074" +
    "\uffc7\001\002\000\070\003\uffc9\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9\026\uffc9\027\uffc9" +
    "\032\uffc9\046\uffc9\051\uffc9\054\uffc9\055\uffc9\062\uffc9\063" +
    "\uffc9\065\uffc9\071\uffc9\074\uffc9\001\002\000\070\003\uffca" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffca\021\uffca\022\uffca" +
    "\023\uffca\026\uffca\027\uffca\032\uffca\046\uffca\051\uffca\054" +
    "\uffca\055\uffca\062\uffca\063\uffca\065\uffca\071\uffca\074\uffca" +
    "\001\002\000\074\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\021\uffc8\022\uffc8\023\uffc8\026\uffc8\027\uffc8\032" +
    "\uffc8\046\uffc8\047\uff90\050\177\051\uffc8\054\uffc8\055\uffc8" +
    "\062\uffc8\063\uffc8\065\uffc8\071\uffc8\074\uffc8\001\002\000" +
    "\022\006\uff9b\013\uff9b\050\uff9b\052\uff9b\055\uff9b\064\uff9b" +
    "\075\uff9b\076\uff9b\001\002\000\022\006\116\013\117\050" +
    "\120\052\125\055\115\064\123\075\110\076\113\001\002" +
    "\000\022\006\116\013\117\050\120\052\125\055\115\064" +
    "\123\075\110\076\113\001\002\000\070\003\uffc6\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\026\uffc6\027\uffc6\032\uffc6\046\uffc6\051\uffc6\054\uffc6\055" +
    "\uffc6\062\uffc6\063\uffc6\065\uffc6\071\uffc6\074\uffc6\001\002" +
    "\000\022\006\116\013\117\050\120\052\125\055\115\064" +
    "\123\075\110\076\113\001\002\000\070\003\uff9d\004\uff9d" +
    "\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\026\uff9d\027\uff9d\032\uff9d\046\uff9d\051\uff9d\054\uff9d\055" +
    "\uff9d\062\uff9d\063\uff9d\065\uff9d\071\uff9d\074\uff9d\001\002" +
    "\000\050\004\uffb5\005\143\006\126\007\140\010\131\011" +
    "\127\012\135\014\133\015\134\016\uffb5\022\uffb5\023\uffb5" +
    "\026\uffb5\054\137\055\uffb5\062\136\063\132\065\uffb5\071" +
    "\141\001\002\000\070\003\uff9e\004\uff9e\005\uff9e\006\uff9e" +
    "\007\uff9e\010\uff9e\011\uff9e\012\uff9e\014\uff9e\015\uff9e\016" +
    "\uff9e\017\uff9e\021\uff9e\022\uff9e\023\uff9e\026\uff9e\027\uff9e" +
    "\032\uff9e\046\uff9e\051\uff9e\054\uff9e\055\uff9e\062\uff9e\063" +
    "\uff9e\065\uff9e\071\uff9e\074\uff9e\001\002\000\022\006\116" +
    "\013\117\050\120\052\125\055\115\064\123\075\110\076" +
    "\113\001\002\000\024\006\116\012\166\013\117\050\120" +
    "\052\125\055\115\064\123\075\110\076\113\001\002\000" +
    "\022\006\116\013\117\050\120\052\125\055\115\064\123" +
    "\075\110\076\113\001\002\000\022\006\116\013\117\050" +
    "\120\052\125\055\115\064\123\075\110\076\113\001\002" +
    "\000\022\006\116\013\117\050\120\052\125\055\115\064" +
    "\123\075\110\076\113\001\002\000\022\006\uffa0\013\uffa0" +
    "\050\uffa0\052\uffa0\055\uffa0\064\uffa0\075\uffa0\076\uffa0\001" +
    "\002\000\022\006\116\013\117\050\120\052\125\055\115" +
    "\064\123\075\110\076\113\001\002\000\022\006\116\013" +
    "\117\050\120\052\125\055\115\064\123\075\110\076\113" +
    "\001\002\000\022\006\116\013\117\050\120\052\125\055" +
    "\115\064\123\075\110\076\113\001\002\000\022\006\116" +
    "\013\117\050\120\052\125\055\115\064\123\075\110\076" +
    "\113\001\002\000\022\006\116\013\117\050\120\052\125" +
    "\055\115\064\123\075\110\076\113\001\002\000\024\006" +
    "\116\013\117\050\120\052\125\053\150\055\115\064\123" +
    "\075\110\076\113\001\002\000\020\004\015\016\065\022" +
    "\uffe9\023\101\026\075\055\077\065\066\001\002\000\022" +
    "\006\116\013\117\050\120\052\125\055\115\064\123\075" +
    "\110\076\113\001\002\000\070\003\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\007\140\010\131\011\uffdd\012\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd\026\uffdd" +
    "\027\uffdd\032\uffdd\046\uffdd\051\uffdd\054\uffdd\055\uffdd\062" +
    "\uffdd\063\uffdd\065\uffdd\071\uffdd\074\uffdd\001\002\000\004" +
    "\022\uffb4\001\002\000\004\022\147\001\002\000\004\074" +
    "\uffb3\001\002\000\004\074\032\001\002\000\070\003\uffdb" +
    "\004\uffdb\005\uffdb\006\uffdb\007\140\010\131\011\uffdb\012" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\026\uffdb\027\uffdb\032\uffdb\046\uffdb\051\uffdb\054" +
    "\uffdb\055\uffdb\062\uffdb\063\uffdb\065\uffdb\071\uffdb\074\uffdb" +
    "\001\002\000\022\006\116\013\117\050\120\052\125\055" +
    "\115\064\123\075\110\076\113\001\002\000\070\003\uffd0" +
    "\004\uffd0\005\143\006\126\007\140\010\131\011\127\012" +
    "\135\014\133\015\134\016\uffd0\017\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\026\uffd0\027\uffd0\032\uffd0\046\uffd0\051\uffd0\054" +
    "\137\055\uffd0\062\136\063\132\065\uffd0\071\141\074\uffd0" +
    "\001\002\000\070\003\uffda\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\021\uffda\022\uffda\023\uffda\026\uffda\027\uffda\032" +
    "\uffda\046\uffda\051\uffda\054\uffda\055\uffda\062\uffda\063\uffda" +
    "\065\uffda\071\uffda\074\uffda\001\002\000\070\003\uffd4\004" +
    "\uffd4\005\143\006\126\007\140\010\131\011\uffd4\012\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\026\uffd4\027\uffd4\032\uffd4\046\uffd4\051\uffd4\054\uffd4" +
    "\055\uffd4\062\uffd4\063\uffd4\065\uffd4\071\141\074\uffd4\001" +
    "\002\000\070\003\uffd5\004\uffd5\005\143\006\126\007\140" +
    "\010\131\011\uffd5\012\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\026\uffd5\027\uffd5\032\uffd5" +
    "\046\uffd5\051\uffd5\054\uffd5\055\uffd5\062\uffd5\063\uffd5\065" +
    "\uffd5\071\141\074\uffd5\001\002\000\070\003\uffd6\004\uffd6" +
    "\005\143\006\126\007\140\010\131\011\uffd6\012\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\026\uffd6\027\uffd6\032\uffd6\046\uffd6\051\uffd6\054\uffd6\055" +
    "\uffd6\062\uffd6\063\uffd6\065\uffd6\071\141\074\uffd6\001\002" +
    "\000\070\003\uffd1\004\uffd1\005\143\006\126\007\140\010" +
    "\131\011\127\012\135\014\133\015\uffd1\016\uffd1\017\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\026\uffd1\027\uffd1\032\uffd1\046" +
    "\uffd1\051\uffd1\054\137\055\uffd1\062\136\063\132\065\uffd1" +
    "\071\141\074\uffd1\001\002\000\022\006\116\013\117\050" +
    "\120\052\125\055\115\064\123\075\110\076\113\001\002" +
    "\000\070\003\uffd2\004\uffd2\005\143\006\126\007\140\010" +
    "\131\011\127\012\135\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\026\uffd2\027\uffd2\032\uffd2\046" +
    "\uffd2\051\uffd2\054\137\055\uffd2\062\136\063\132\065\uffd2" +
    "\071\141\074\uffd2\001\002\000\070\003\uffd7\004\uffd7\005" +
    "\143\006\126\007\140\010\131\011\uffd7\012\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\026" +
    "\uffd7\027\uffd7\032\uffd7\046\uffd7\051\uffd7\054\uffd7\055\uffd7" +
    "\062\uffd7\063\uffd7\065\uffd7\071\141\074\uffd7\001\002\000" +
    "\070\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\026\uffd9\027\uffd9\032\uffd9\046\uffd9" +
    "\051\uffd9\054\uffd9\055\uffd9\062\uffd9\063\uffd9\065\uffd9\071" +
    "\uffd9\074\uffd9\001\002\000\070\003\uffd3\004\uffd3\005\143" +
    "\006\126\007\140\010\131\011\127\012\135\014\133\015" +
    "\134\016\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\026\uffd3" +
    "\027\uffd3\032\uffd3\046\uffd3\051\uffd3\054\137\055\uffd3\062" +
    "\136\063\132\065\uffd3\071\141\074\uffd3\001\002\000\022" +
    "\006\uff9c\013\uff9c\050\uff9c\052\uff9c\055\uff9c\064\uff9c\075" +
    "\uff9c\076\uff9c\001\002\000\070\003\uffd8\004\uffd8\005\143" +
    "\006\126\007\140\010\131\011\uffd8\012\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8" +
    "\027\uffd8\032\uffd8\046\uffd8\051\uffd8\054\uffd8\055\uffd8\062" +
    "\uffd8\063\uffd8\065\uffd8\071\141\074\uffd8\001\002\000\070" +
    "\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007\140\010\131\011" +
    "\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\026\uffdc\027\uffdc\032\uffdc\046\uffdc\051" +
    "\uffdc\054\uffdc\055\uffdc\062\uffdc\063\uffdc\065\uffdc\071\uffdc" +
    "\074\uffdc\001\002\000\070\003\uffcc\004\uffcc\005\143\006" +
    "\126\007\140\010\131\011\127\012\135\014\133\015\134" +
    "\016\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\026\uffcc\027" +
    "\uffcc\032\uffcc\046\uffcc\051\uffcc\054\137\055\uffcc\062\136" +
    "\063\132\065\uffcc\071\141\074\uffcc\001\002\000\034\005" +
    "\143\006\126\007\140\010\131\011\127\012\135\014\133" +
    "\015\134\051\173\054\137\062\136\063\132\071\141\001" +
    "\002\000\070\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\026\uffcf\027\uffcf\032\uffcf" +
    "\046\uffcf\051\uffcf\054\uffcf\055\uffcf\062\uffcf\063\uffcf\065" +
    "\uffcf\071\uffcf\074\uffcf\001\002\000\070\003\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\026\uffcd\027\uffcd\032\uffcd\046\uffcd\051\uffcd\054\uffcd\055" +
    "\uffcd\062\uffcd\063\uffcd\065\uffcd\071\uffcd\074\uffcd\001\002" +
    "\000\070\003\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010" +
    "\uff98\011\uff98\012\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\021\uff98\022\uff98\023\uff98\026\uff98\027\uff98\032\uff98\046" +
    "\uff98\051\uff98\054\uff98\055\uff98\062\uff98\063\uff98\065\uff98" +
    "\071\uff98\074\uff98\001\002\000\004\047\213\001\002\000" +
    "\026\003\202\006\116\013\117\050\120\051\201\052\125" +
    "\055\115\064\123\075\110\076\113\001\002\000\010\003" +
    "\205\046\206\051\207\001\002\000\070\003\uff97\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\014" +
    "\uff97\015\uff97\016\uff97\017\uff97\021\uff97\022\uff97\023\uff97" +
    "\026\uff97\027\uff97\032\uff97\046\uff97\051\uff97\054\uff97\055" +
    "\uff97\062\uff97\063\uff97\065\uff97\071\uff97\074\uff97\001\002" +
    "\000\004\051\204\001\002\000\040\003\uff93\005\143\006" +
    "\126\007\140\010\131\011\127\012\135\014\133\015\134" +
    "\046\uff93\051\uff93\054\137\062\136\063\132\071\141\001" +
    "\002\000\070\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\021\uff94\022\uff94\023\uff94\026\uff94\027\uff94\032\uff94" +
    "\046\uff94\051\uff94\054\uff94\055\uff94\062\uff94\063\uff94\065" +
    "\uff94\071\uff94\074\uff94\001\002\000\070\003\uff95\004\uff95" +
    "\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\014" +
    "\uff95\015\uff95\016\uff95\017\uff95\021\uff95\022\uff95\023\uff95" +
    "\026\uff95\027\uff95\032\uff95\046\uff95\051\uff95\054\uff95\055" +
    "\uff95\062\uff95\063\uff95\065\uff95\071\uff95\074\uff95\001\002" +
    "\000\024\003\210\006\116\013\117\050\120\052\125\055" +
    "\115\064\123\075\110\076\113\001\002\000\070\003\uff96" +
    "\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012" +
    "\uff96\014\uff96\015\uff96\016\uff96\017\uff96\021\uff96\022\uff96" +
    "\023\uff96\026\uff96\027\uff96\032\uff96\046\uff96\051\uff96\054" +
    "\uff96\055\uff96\062\uff96\063\uff96\065\uff96\071\uff96\074\uff96" +
    "\001\002\000\010\003\uff91\046\uff91\051\uff91\001\002\000" +
    "\040\003\uff92\005\143\006\126\007\140\010\131\011\127" +
    "\012\135\014\133\015\134\046\uff92\051\uff92\054\137\062" +
    "\136\063\132\071\141\001\002\000\070\003\uff8f\004\uff8f" +
    "\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\014" +
    "\uff8f\015\uff8f\016\uff8f\017\uff8f\021\uff8f\022\uff8f\023\uff8f" +
    "\026\uff8f\027\uff8f\032\uff8f\046\uff8f\051\uff8f\054\uff8f\055" +
    "\uff8f\062\uff8f\063\uff8f\065\uff8f\071\uff8f\074\uff8f\001\002" +
    "\000\004\055\214\001\002\000\072\003\uff8e\004\uff8e\005" +
    "\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\014\uff8e" +
    "\015\uff8e\016\uff8e\017\uff8e\021\uff8e\022\uff8e\023\uff8e\026" +
    "\uff8e\027\uff8e\032\uff8e\046\uff8e\047\uff8d\051\uff8e\054\uff8e" +
    "\055\uff8e\062\uff8e\063\uff8e\065\uff8e\071\uff8e\074\uff8e\001" +
    "\002\000\004\047\213\001\002\000\070\003\uff8c\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\017\uff8c\021\uff8c\022\uff8c\023\uff8c" +
    "\026\uff8c\027\uff8c\032\uff8c\046\uff8c\051\uff8c\054\uff8c\055" +
    "\uff8c\062\uff8c\063\uff8c\065\uff8c\071\uff8c\074\uff8c\001\002" +
    "\000\030\004\uffe1\016\uffe1\021\uffe1\022\uffe1\023\uffe1\026" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\055\uffe1\065\uffe1\001\002" +
    "\000\034\005\143\006\126\007\140\010\131\011\127\012" +
    "\135\014\133\015\134\027\221\054\137\062\136\063\132" +
    "\071\141\001\002\000\004\074\uffb2\001\002\000\004\074" +
    "\032\001\002\000\024\004\uffa0\016\uffa0\023\uffa0\026\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\055\uffa0\065\uffa0\001\002\000" +
    "\024\004\015\016\065\023\101\026\075\030\uffe9\031\uffe9" +
    "\032\uffe9\055\077\065\066\001\002\000\010\030\uff9f\031" +
    "\uff9f\032\uff9f\001\002\000\010\030\uffb1\031\uffb1\032\uffb1" +
    "\001\002\000\010\030\uffae\031\uffae\032\uffae\001\002\000" +
    "\010\030\233\031\232\032\uffac\001\002\000\004\032\244" +
    "\001\002\000\022\006\uffa0\013\uffa0\050\uffa0\052\uffa0\055" +
    "\uffa0\064\uffa0\075\uffa0\076\uffa0\001\002\000\022\006\uffa0" +
    "\013\uffa0\050\uffa0\052\uffa0\055\uffa0\064\uffa0\075\uffa0\076" +
    "\uffa0\001\002\000\022\006\116\013\117\050\120\052\125" +
    "\055\115\064\123\075\110\076\113\001\002\000\034\005" +
    "\143\006\126\007\140\010\131\011\127\012\135\014\133" +
    "\015\134\032\uffad\054\137\062\136\063\132\071\141\001" +
    "\002\000\022\006\116\013\117\050\120\052\125\055\115" +
    "\064\123\075\110\076\113\001\002\000\034\005\143\006" +
    "\126\007\140\010\131\011\127\012\135\014\133\015\134" +
    "\027\240\054\137\062\136\063\132\071\141\001\002\000" +
    "\004\074\032\001\002\000\024\004\uffa0\016\uffa0\023\uffa0" +
    "\026\uffa0\030\uffa0\031\uffa0\032\uffa0\055\uffa0\065\uffa0\001" +
    "\002\000\024\004\015\016\065\023\101\026\075\030\uffe9" +
    "\031\uffe9\032\uffe9\055\077\065\066\001\002\000\010\030" +
    "\uffaf\031\uffaf\032\uffaf\001\002\000\004\026\245\001\002" +
    "\000\004\074\uffa0\001\002\000\004\074\uffb0\001\002\000" +
    "\022\006\116\013\117\050\120\052\125\055\115\064\123" +
    "\075\110\076\113\001\002\000\034\005\143\006\126\007" +
    "\140\010\131\011\127\012\135\014\133\015\134\054\137" +
    "\062\136\063\132\071\141\074\uffde\001\002\000\004\032" +
    "\252\001\002\000\004\043\253\001\002\000\004\074\ufff1" +
    "\001\002\000\030\004\uffe6\016\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\055\uffe6\065\uffe6" +
    "\001\002\000\030\004\uffe7\016\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\055\uffe7\065\uffe7" +
    "\001\002\000\030\004\uffe4\016\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\055\uffe4\065\uffe4" +
    "\001\002\000\004\050\177\001\002\000\004\074\uff99\001" +
    "\002\000\004\054\262\001\002\000\022\006\116\013\117" +
    "\050\120\052\125\055\115\064\123\075\110\076\113\001" +
    "\002\000\034\005\143\006\126\007\140\010\131\011\127" +
    "\012\135\014\133\015\134\017\264\054\137\062\136\063" +
    "\132\071\141\001\002\000\022\006\116\013\117\050\120" +
    "\052\125\055\115\064\123\075\110\076\113\001\002\000" +
    "\050\004\uffb8\005\143\006\126\007\140\010\131\011\127" +
    "\012\135\014\133\015\134\016\uffb8\021\uffb8\023\uffb8\026" +
    "\uffb8\054\137\055\uffb8\062\136\063\132\065\uffb8\071\141" +
    "\001\002\000\020\004\015\016\065\021\uffe9\023\101\026" +
    "\075\055\077\065\066\001\002\000\004\021\uffb7\001\002" +
    "\000\004\021\271\001\002\000\004\055\272\001\002\000" +
    "\004\074\uffb6\001\002\000\030\004\uffe5\016\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\055" +
    "\uffe5\065\uffe5\001\002\000\014\002\ufff8\004\ufff8\042\ufff8" +
    "\043\ufff8\070\ufff8\001\002\000\014\002\ufff9\004\ufff9\042" +
    "\ufff9\043\ufff9\070\ufff9\001\002\000\004\050\ufff6\001\002" +
    "\000\004\050\041\001\002\000\004\074\032\001\002\000" +
    "\020\004\015\016\065\023\101\026\075\032\uffe9\055\077" +
    "\065\066\001\002\000\004\032\303\001\002\000\004\042" +
    "\304\001\002\000\004\074\ufff5\001\002\000\004\074\032" +
    "\001\002\000\004\055\ufff0\001\002\000\004\055\310\001" +
    "\002\000\004\041\320\001\002\000\006\032\uffed\074\uffed" +
    "\001\002\000\006\032\uffee\074\032\001\002\000\004\032" +
    "\314\001\002\000\004\070\315\001\002\000\004\074\uffef" +
    "\001\002\000\004\055\310\001\002\000\006\032\uffec\074" +
    "\uffec\001\002\000\014\033\023\034\030\035\024\036\027" +
    "\055\025\001\002\000\006\032\uffeb\074\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\022\005\015\006\005\007\011\010\016\012" +
    "\013\017\006\021\012\027\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\274\001" +
    "\001\000\004\056\273\001\001\000\002\001\001\000\014" +
    "\010\034\012\013\017\006\021\012\027\007\001\001\000" +
    "\004\056\033\001\001\000\004\056\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\036\001\001\000\004" +
    "\051\037\001\001\000\002\001\001\000\006\046\043\052" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\056\001\001\000\002\001\001" +
    "\000\004\061\060\001\001\000\004\064\061\001\001\000" +
    "\004\056\062\001\001\000\032\012\071\013\070\014\101" +
    "\023\072\033\073\035\077\036\102\041\063\042\066\043" +
    "\103\055\075\057\067\001\001\000\004\056\272\001\001" +
    "\000\002\001\001\000\004\035\257\001\001\000\004\056" +
    "\255\001\001\000\002\001\001\000\026\012\071\014\254" +
    "\033\073\035\077\036\102\041\063\042\066\043\103\055" +
    "\075\057\067\001\001\000\004\056\253\001\001\000\004" +
    "\065\250\001\001\000\002\001\001\000\016\004\113\034" +
    "\110\035\111\040\217\054\121\057\120\001\001\000\004" +
    "\056\216\001\001\000\006\047\174\075\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\105\001\001\000\004\056\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\113\034\110\035\111" +
    "\040\123\054\121\057\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\047\174\075\175\001\001\000\002\001" +
    "\001\000\016\004\113\034\110\035\111\040\173\054\121" +
    "\057\120\001\001\000\016\004\113\034\110\035\111\040" +
    "\171\054\121\057\120\001\001\000\002\001\001\000\016" +
    "\004\113\034\110\035\111\040\170\054\121\057\120\001" +
    "\001\000\002\001\001\000\006\053\127\071\141\001\001" +
    "\000\002\001\001\000\016\004\113\034\110\035\111\040" +
    "\167\054\121\057\120\001\001\000\016\004\113\034\110" +
    "\035\111\040\166\054\121\057\120\001\001\000\016\004" +
    "\113\034\110\035\111\040\164\054\121\057\120\001\001" +
    "\000\016\004\113\034\110\035\111\040\163\054\121\057" +
    "\120\001\001\000\016\004\113\034\110\035\111\040\162" +
    "\054\121\057\120\001\001\000\004\002\160\001\001\000" +
    "\016\004\113\034\110\035\111\040\157\054\121\057\120" +
    "\001\001\000\016\004\113\034\110\035\111\040\156\054" +
    "\121\057\120\001\001\000\016\004\113\034\110\035\111" +
    "\040\155\054\121\057\120\001\001\000\016\004\113\034" +
    "\110\035\111\040\154\054\121\057\120\001\001\000\016" +
    "\004\113\034\110\035\111\040\153\054\121\057\120\001" +
    "\001\000\016\004\113\034\110\035\111\040\150\054\121" +
    "\057\120\001\001\000\032\012\071\013\070\014\101\023" +
    "\144\033\073\035\077\036\102\041\063\042\066\043\103" +
    "\055\075\057\067\001\001\000\016\004\113\034\110\035" +
    "\111\040\143\054\121\057\120\001\001\000\004\053\127" +
    "\001\001\000\004\072\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\151\001\001\000\004\053\127" +
    "\001\001\000\016\004\113\034\110\035\111\040\152\054" +
    "\121\057\120\001\001\000\004\053\127\001\001\000\004" +
    "\053\127\001\001\000\004\053\127\001\001\000\004\053" +
    "\127\001\001\000\004\053\127\001\001\000\004\053\127" +
    "\001\001\000\016\004\113\034\110\035\111\040\161\054" +
    "\121\057\120\001\001\000\004\053\127\001\001\000\004" +
    "\053\127\001\001\000\004\053\127\001\001\000\004\053" +
    "\127\001\001\000\002\001\001\000\004\053\127\001\001" +
    "\000\004\053\127\001\001\000\004\053\127\001\001\000" +
    "\004\053\127\001\001\000\002\001\001\000\004\053\127" +
    "\001\001\000\002\001\001\000\004\060\211\001\001\000" +
    "\020\004\113\034\110\035\111\040\202\050\177\054\121" +
    "\057\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\113\034\110\035\111\040" +
    "\210\054\121\057\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\214\001\001\000\004\060\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\127\001\001\000\004\073\221\001\001\000\004\056\222" +
    "\001\001\000\004\002\223\001\001\000\032\012\071\013" +
    "\070\014\101\023\224\033\073\035\077\036\102\041\063" +
    "\042\066\043\103\055\075\057\067\001\001\000\004\003" +
    "\225\001\001\000\004\074\226\001\001\000\004\044\227" +
    "\001\001\000\004\045\230\001\001\000\002\001\001\000" +
    "\004\002\235\001\001\000\004\002\233\001\001\000\016" +
    "\004\113\034\110\035\111\040\234\054\121\057\120\001" +
    "\001\000\004\053\127\001\001\000\016\004\113\034\110" +
    "\035\111\040\236\054\121\057\120\001\001\000\004\053" +
    "\127\001\001\000\004\056\240\001\001\000\004\002\241" +
    "\001\001\000\032\012\071\013\070\014\101\023\242\033" +
    "\073\035\077\036\102\041\063\042\066\043\103\055\075" +
    "\057\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\245\001\001\000\002\001\001\000\016\004\113" +
    "\034\110\035\111\040\247\054\121\057\120\001\001\000" +
    "\004\053\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\113\034\110\035\111\040" +
    "\262\054\121\057\120\001\001\000\004\053\127\001\001" +
    "\000\016\004\113\034\110\035\111\040\264\054\121\057" +
    "\120\001\001\000\006\053\127\067\265\001\001\000\032" +
    "\012\071\013\070\014\101\023\266\033\073\035\077\036" +
    "\102\041\063\042\066\043\103\055\075\057\067\001\001" +
    "\000\004\070\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\276\001\001\000\004\051" +
    "\277\001\001\000\004\056\300\001\001\000\032\012\071" +
    "\013\070\014\101\023\301\033\073\035\077\036\102\041" +
    "\063\042\066\043\103\055\075\057\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\305\001\001\000\004\066\306\001\001\000\010\030\312" +
    "\031\311\032\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\316\001\001\000" +
    "\002\001\001\000\004\061\320\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VbParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VbParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VbParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	private VbLexer lexer;
	private ArrayList<VbSyntaxError> errLst = new ArrayList<>();

	public void msg(Object str){
		javax.swing.JOptionPane.showMessageDialog(null, str.toString());
	}
	public VbParser(VbLexer lex) {
		super(lex);
		this.lexer = lex;
	}

	public void user_init(){
		this.errLst = new ArrayList<>();
		SymTable.init();
		CuadTable.init();
	}

	public Symbol getCurToken(){
		return this.cur_token;
	}

	public void report_fatal_error(String message, Object info) throws Exception{
		done_parsing();
		report_error(message, info);
		throw new Exception("Can't recover from previous error(s)");
	}

	public void report_error(String message, Object info){
		System.err.print(message);
		System.err.flush();
		if ((info instanceof Symbol)){
		  if (((Symbol)info).left != -1){
			System.err.println(" at character " + ((Symbol)info).left + " of input");
		  }else{
			System.err.println("");
		  }
		}else{
		  System.err.println("");
	   }
	}

	public void syntax_error(Symbol cur_token){
		System.out.println("syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("1cur_token '" + cur_token + "' no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
		System.out.println("unrec_syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error fatal en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("2unrec cur_token no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	protected int error_sync_size(){
		return 3;
	}
	
	public void addErr(String msg, int left, int right, int offset, int length){
		this.errLst.add(new VbSyntaxError(msg, left, right, offset, length));
	}

	public void appendErr(String msg){
		if (!this.errLst.isEmpty()){
			int index = this.errLst.size() - 1;
			this.errLst.get(index).message += ": " + msg;
		}
	}

	public ArrayList getErrLst(){
		return this.errLst;
	}

	public void setLexer(VbLexer lexer){
		this.lexer = lexer;
	}

	public MyToken tokenAt(java.util.Stack stack, int top, int offset){
		return (MyToken)stack.elementAt(top + offset);
	}

	public MyToken toMyToken(Object o){
		return (MyToken)o;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$VbParser$actions {
  private final VbParser parser;

  /** Constructor */
  CUP$VbParser$actions(VbParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$VbParser$do_action(
    int                        CUP$VbParser$act_num,
    java_cup.runtime.lr_parser CUP$VbParser$parser,
    java.util.Stack            CUP$VbParser$stack,
    int                        CUP$VbParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VbParser$result;

      /* select the action based on the action number */
      switch (CUP$VbParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LineEnd ::= FinDeLinea LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("LineEnd",44, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LineEnd ::= FinDeLinea 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("LineEnd",44, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PropChain ::= Punto Id NT$12 PropChain 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int propChainleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propChainright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object propChain = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = propChain; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PropChain",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$12 ::= 
            {
              Object RESULT =null;

								if (SymTable.curProp != null){
									String tipoCurProp = SymTable.curProp.tipo;
									TypeStruct t = SymTable.curScope.findTypeStruct(tipoCurProp);

									if (t == null || SymTable.isPrimitive(tipoCurProp)){
										MyToken myid = new MyToken(sym.Id, SymTable.curProp.linea, SymTable.curProp.columna, SymTable.curProp.offset);
										parser.syntax_error(myid);
										parser.appendErr("\"" + tipoCurProp + "\" no es un Type");
										SymTable.curProp = null;
									}else{
										MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
										Variable v = t.findProp(myid.value.toString());
										if (v == null){
											parser.syntax_error(myid);
											parser.appendErr("Type \"" + t.id + "\" no tiene una propiedad llamada \"" + myid.value.toString() + "\"");
											SymTable.curProp = null;
										}else{
											if (!SymTable.isPrimitive(v.tipo)){
												t = SymTable.curScope.findTypeStruct(v.tipo);

												if (t == null || SymTable.isPrimitive(tipoCurProp)){
													parser.syntax_error(myid);
													parser.appendErr("\"" + myid.value.toString() + "\" no es un Type");
													SymTable.curProp = null;
												}else{
													SymTable.curProp = new Property(v.id, v.linea, v.columna, v.offset, v.tipo);
												}
											}else{
												parser.syntax_error(myid);
												parser.appendErr("\"" + myid.value.toString() + "\" no es un Type");
												SymTable.curProp = null;
											}
										}
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$12",60, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PropChain ::= Punto Id 
            {
              Object RESULT =null;
		
								if (SymTable.curProp != null){
									String tipoCurProp = SymTable.curProp.tipo;
									TypeStruct t = SymTable.curScope.findTypeStruct(tipoCurProp);

									if (t == null || SymTable.isPrimitive(tipoCurProp)){
										MyToken myid = new MyToken(sym.Id, SymTable.curProp.linea, SymTable.curProp.columna, SymTable.curProp.offset);
										parser.syntax_error(myid);
										parser.appendErr("\"" + tipoCurProp + "\" no es un Type");
										SymTable.curProp = null;
									}else{
										MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
										Variable v = t.findProp(myid.value.toString());
										if (v == null){
											parser.syntax_error(myid);
											parser.appendErr("Type \"" + t.id + "\" no tiene una propiedad llamada \"" + myid.value.toString() + "\"");
											SymTable.curProp = null;
										}else{
											RESULT = v.tipo;
										}
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PropChain",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Property ::= Id NT$11 PropChain 
            {
              Termino RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Termino) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int propChainleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propChainright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object propChain = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								RESULT = new Termino(myid.value.toString(), myid.left, myid.right, myid.offset, propChain.toString());
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Property",45, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$11 ::= 
            {
              Termino RESULT =null;

								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									if (!SymTable.isPrimitive(v.tipo)){
										Property p = new Property(v.id, v.linea, v.columna, v.offset, v.tipo);
										SymTable.curProp = p;
									}else{
										parser.syntax_error(myid);
										parser.appendErr("La variable \"" + v.id + "\" no es un Type4");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$11",59, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ArgLst ::= ArgLst Coma error 
            {
              ArrayList<Expresion> RESULT =null;
		int argLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int argLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Expresion> argLst = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		 
								parser.appendErr("Se esperaba Argumento"); 
								RESULT = argLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ArgLst ::= ArgLst Coma Expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int argLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int argLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Expresion> argLst = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								argLst.add(e);
								RESULT = argLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ArgLst ::= Expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								ArrayList<Expresion> args = new ArrayList<>();
								args.add(e);
								RESULT = args;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Args ::= ParI error ParD 
            {
              ArrayList<Expresion> RESULT =null;
		 parser.appendErr("Argumentos invalidos"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Args ::= ParI ArgLst error 
            {
              ArrayList<Expresion> RESULT =null;
		 parser.appendErr("Se esperaba ')'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Args ::= ParI ArgLst ParD 
            {
              ArrayList<Expresion> RESULT =null;
		int argLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int argLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Expresion> argLst = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		
								RESULT = argLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Args ::= ParI ParD 
            {
              ArrayList<Expresion> RESULT =null;
		
								RESULT = new ArrayList<Expresion>();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FuncEval ::= Id Args 
            {
              Termino RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Expresion> args = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
								Funcion f = SymTable.curScope.findFunc(myid.value.toString());

								if (f == null){
									parser.syntax_error(myid);
									parser.appendErr("La funcion \"" + myid.value.toString() + "\" no ha sido declarada");
									RESULT = null;
								}else{
									if (f.parametros.size() != args.size()){
										parser.syntax_error(myid);
										parser.appendErr("La funcion \"" + myid.value.toString() + "\" recibe " + f.parametros.size() + " argumentos. Se pasaron " + args.size());
										RESULT = null;
									}else{
										for (int i = 0; i < f.parametros.size(); i++){
											if (!f.parametros.get(i).tipo.equalsIgnoreCase(args.get(i).tipo)){
												parser.syntax_error(myid);
												parser.appendErr("El argumento en la posicion " + (i + 1) + " es \"" + args.get(i).tipo + "\", debe ser \"" + f.parametros.get(i).tipo);
											}
										}
									}
									RESULT = new Termino(myid.value.toString(), myid.left, myid.right, myid.offset, f.tipo, CuadTable.newTemp());
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncEval",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MethodCall ::= Call FuncEval 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("MethodCall",43, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MethodCall ::= FuncEval 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("MethodCall",43, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Negativo ::= Menos 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Negativo",42, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Distinto ::= Menor Mayor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Distinto",41, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BoolLiteral ::= False 
            {
              Literal RESULT =null;
		
								MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								RESULT = new Literal("false", tok.left, tok.right, tok.offset, "boolean", "0");
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",2, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BoolLiteral ::= True 
            {
              Literal RESULT =null;
		
								MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								RESULT = new Literal("true", tok.left, tok.right, tok.offset, "boolean", "1");
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",2, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // N ::= 
            {
              ArrayList<Integer> RESULT =null;
		 
								RESULT = CuadTable.makeList(CuadTable.sigCuad);
								CuadTable.gen("goto", "");
							
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("N",1, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // M ::= 
            {
              Integer RESULT =null;
		 RESULT = CuadTable.sigCuad; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("M",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PassMech ::= ByRef 
            {
              Object RESULT =null;
		int byRefleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int byRefright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object byRef = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = byRef.toString().toLowerCase(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PassMech",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PassMech ::= ByVal 
            {
              Object RESULT =null;
		int byValleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int byValright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object byVal = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = byVal.toString().toLowerCase(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PassMech",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ParamLst ::= ParamLst Coma PassMech Id As Tipo 
            {
              ArrayList<Parametro> RESULT =null;
		int paramLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int paramLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		ArrayList<Parametro> paramLst = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int passMechleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int passMechright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object passMech = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",40, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ParamLst ::= PassMech Id As Tipo 
            {
              ArrayList<Parametro> RESULT =null;
		int passMechleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int passMechright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object passMech = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",40, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Params ::= ParI ParamLst ParD 
            {
              ArrayList<Parametro> RESULT =null;
		int paramLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int paramLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Parametro> paramLst = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Params ::= ParI ParD 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Tipo ::= Id 
            {
              MyToken RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",47, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Tipo ::= Char 
            {
              MyToken RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",47, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Tipo ::= String 
            {
              MyToken RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",47, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Tipo ::= Boolean 
            {
              MyToken RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",47, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Tipo ::= Integer 
            {
              MyToken RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",47, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ElseOpt ::= 
            {
              Integer RESULT =null;
		 RESULT = null; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseOpt",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ElseOpt ::= Else M Expresion 
            {
              Integer RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		 RESULT = m; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseOpt",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ElseIfs ::= 
            {
              Simbolo RESULT =null;
		 RESULT = null; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseIfs",34, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ElseIfs ::= ElseIfs ElseIf M Expresion Then LineEnd M Block 
            {
              Simbolo RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		//n
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseIfs",34, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IfStmt ::= If Expresion Then NT$9 LineEnd M Block N NT$10 ElseIfs ElseOpt End If M 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-12)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-12)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;
		int elseIfsleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int elseIfsright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Simbolo elseIfs = (Simbolo)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int elseOptleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int elseOptright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Integer elseOpt = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								//Statement s = new Statement("", 0, 0, 0, "", "");
								//s.lstSig = CuadTable.merge(e.lstFals, block.lstSig);
								//parser.msg("generando if=");
								//CuadTable.gen("if=", e.lugar, "1", m.toString());
								CuadTable.backpatch(e.lstVerd, m1);
								CuadTable.backpatch(n, m2);
								
								if (elseIfs != null) {
									CuadTable.backpatch(e.lstFals, elseIfs.lugar);
									CuadTable.backpatch(elseIfs.lstSig, m2);
									if (elseOpt != null){
										CuadTable.backpatch(elseIfs.lstFals, elseOpt);
									}else{
										CuadTable.backpatch(elseIfs.lstFals, m2);
									}
								}else if (elseOpt != null){
									CuadTable.backpatch(e.lstFals, elseOpt);
								}else{
									CuadTable.backpatch(e.lstFals, m2);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("IfStmt",33, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-13)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
 
								SymTable.endScope();
								//CuadTable.backpatch(e.lstVerd, m1);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$10",58, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$9 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

								MyToken ifTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("If" + SymTable.blockName(), ifTok.left, ifTok.right, ifTok.offset); 
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$9",57, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DoWhile ::= Do While Expresion NT$7 Block NT$8 Loop 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("DoWhile",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$8",56, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$7 ::= 
            {
              Object RESULT =null;

								MyToken doTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("Do" + SymTable.blockName(), doTok.left, doTok.right, doTok.offset); 	
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$7",55, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ForLoop ::= For Id Igual Expresion To Expresion NT$5 Block NT$6 Next Id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-10)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$6",54, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$5 ::= 
            {
              Object RESULT =null;

								MyToken forTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5);
								SymTable.createSubScope("For" + SymTable.blockName(), forTok.left, forTok.right, forTok.offset); 	
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$5",53, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Operador ::= Ampersand 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Operador ::= Distinto 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Operador ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Operador ::= Mayor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Operador ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Operador ::= Menor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Operador ::= Not 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Operador ::= Or 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Operador ::= And 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Operador ::= Entre 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Operador ::= Por 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Operador ::= Menos 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Operador ::= Mas 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Termino ::= Property 
            {
              Termino RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino p = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (p == null){
									RESULT = null;
								}else{
									RESULT = new Termino(p.id, p.linea, p.columna, p.offset, p.tipo, p.lugar);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",26, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Termino ::= FuncEval 
            {
              Termino RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino f = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (f == null){
									RESULT = null;
								}else{
									RESULT = new Termino(f.id, f.linea, f.columna, f.offset, f.tipo, f.lugar);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",26, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Termino ::= Id 
            {
              Termino RESULT =null;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
									RESULT = null;
								}else{
									RESULT = new Termino(v.id, v.linea, v.columna, v.offset, v.tipo, v.lugar);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",26, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Termino ::= StrLiteral 
            {
              Termino RESULT =null;
		
								MyToken strLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								String valor = strLit.value.toString();
								
								if (valor.length() == 1){
									RESULT = new Termino(valor, strLit.left, strLit.right, strLit.offset, "char", valor);
								}else{
									RESULT = new Termino(valor, strLit.left, strLit.right, strLit.offset, "string", valor);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",26, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Termino ::= BoolLiteral 
            {
              Termino RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Literal b = (Literal)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								Termino t = new Termino(b.id, b.linea, b.columna, b.offset, "boolean", b.lugar);
								RESULT = t;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",26, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Termino ::= IntLiteral 
            {
              Termino RESULT =null;
		  
								MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								String valor = intLit.value.toString();
								Termino t = new Termino(valor, intLit.left, intLit.right, intLit.offset, "integer", valor);
								RESULT = t;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",26, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= Negativo Expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e != null){
									if (e.tipo.equalsIgnoreCase("integer")){
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal ()");
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= Not Expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e != null){
									RESULT = new Expresion(e.id, e.linea, e.columna, e.offset, "boolean");
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= Termino 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino t = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (t != null){
									RESULT = new Expresion(t.id, t.linea, t.columna, t.offset, t.tipo, t.lugar);
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= ParI Expresion ParD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		
								RESULT = e;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= Expresion Ampersand GuionBajo LineEnd Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (SymTable.isPrimitive(e1.tipo) && SymTable.isPrimitive(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "string");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " & " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion Or Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("boolean") && e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " Or " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= Expresion And M Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("boolean") && e1.tipo.equalsIgnoreCase(e2.tipo)){
										Expresion nuevaExp = new Expresion("", 0, 0, 0, "boolean", CuadTable.newTemp());
										CuadTable.backpatch(e1.lstVerd, m.toString());
										nuevaExp.lstVerd = e2.lstVerd;
										nuevaExp.lstFals = CuadTable.merge(e1.lstFals, e2.lstFals);
										RESULT = nuevaExp;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " And " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= Expresion Distinto Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " <> " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= Expresion Igual Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " = " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= Expresion MayorIgual Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " >= " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= Expresion Mayor Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " > " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= Expresion MenorIgual Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " <= " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= Expresion Menor Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExp = new Expresion("", 0, 0, 0, "boolean", CuadTable.newTemp());
										//nuevaExp.lstVerd = CuadTable.makeList(CuadTable.sigCuad+3);
										//nuevaExp.lstFals = CuadTable.makeList(CuadTable.sigCuad+1);
										//parser.msg("e.lstverd[0] = " + nuevaExp.lstVerd.get(0));
										//parser.msg("e.lstFals[0] = " + nuevaExp.lstFals.get(0));
										CuadTable.gen("if<", e1.lugar, e2.lugar, CuadTable.sigCuad + 3 + "");
										CuadTable.gen("=", "0", nuevaExp.lugar);
										CuadTable.gen("goto", CuadTable.sigCuad + 2 + "");
										CuadTable.gen("=", "1", nuevaExp.lugar);
										RESULT = nuevaExp;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " < " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= Expresion Entre Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("/", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " / " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= Expresion Por Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("*", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " * " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expresion ::= Expresion Ampersand Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (SymTable.isPrimitive(e1.tipo) && SymTable.isPrimitive(e2.tipo)){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("&", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " & " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expresion ::= Expresion Menos Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("-", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " - " + e2.tipo + ")");
										RESULT = null;
									}
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresion ::= Expresion Mas Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("+", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " + " + e2.tipo + ")");
										RESULT = null;
									}
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Asignacion ::= Asignable Igual Expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Asignable a = (Asignable)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (a != null && e != null){
									if (!a.tipo.equalsIgnoreCase(e.tipo)){
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
										parser.syntax_error(tok);
										parser.appendErr("Asignacion ilegal (" + a.tipo + " = " + e.tipo + ")");
									}else{
										CuadTable.gen("=", e.lugar, a.lugar);
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignacion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Asignable ::= Property 
            {
              Asignable RESULT =null;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino property = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (property == null){
									RESULT = null;
								}else{
									RESULT = new Asignable(property.id, property.linea, property.columna, property.offset, property.tipo, "propiedad", CuadTable.newTemp());
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignable",25, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Asignable ::= Id 
            {
              Asignable RESULT =null;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									RESULT = new Asignable(v.id, v.linea, v.columna, v.offset, v.tipo, "variable", v.lugar);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignable",25, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BlockStmt ::= MethodCall LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",10, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BlockStmt ::= Asignacion LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",10, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BlockStmt ::= IfStmt LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",10, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BlockStmt ::= DoWhile LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",10, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BlockStmt ::= ForLoop LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",10, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BlockStmt ::= VarDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",10, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BlockStmts ::= BlockStmts BlockStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",9, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BlockStmts ::= BlockStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",9, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Block ::= 
            {
              Simbolo RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Block",17, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Block ::= BlockStmts 
            {
              Simbolo RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Block",17, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypeVarDecl ::= Id As Tipo 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);

								if (SymTable.curTypeStruct.hasProp(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La propiedad \"" + myid.value.toString() + "\" ya existe en este Type");
								}else{
									if (!SymTable.rootScope.hasType(tipo.value.toString())){
										parser.syntax_error(tipo);
										parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
									}

									SymTable.curTypeStruct.addProp(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeVarDecl",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeBlockStmts ::= TypeBlockStmts LineEnd TypeVarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlockStmts",23, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeBlockStmts ::= TypeVarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlockStmts",23, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeBlock ::= TypeBlockStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlock",22, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypeDecl ::= Type Id LineEnd NT$4 TypeBlock End Type 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		
								SymTable.curTypeStruct = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeDecl",21, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								TypeStruct t = new TypeStruct(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curTypeStruct = t;
								SymTable.curScope.addTypeStruct(t);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$4",52, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FuncDecl ::= Function Id NT$1 Params As Tipo NT$2 LineEnd Block NT$3 End Function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",13, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;

								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$3",51, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
 
								((Funcion)SymTable.curMethod).tipo = tipo.value.toString();
								
								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}

								SymTable.curMethod = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$2",50, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Function \"" + myid.value.toString() + "\" ya existe");
								}else if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Ya existe un Sub llamado \"" + myid.value.toString() + "\"");
								}
								
								Funcion newFunc = new Funcion(myid.value.toString(), myid.left, myid.right, myid.offset, "void");
								SymTable.curScope.addFunc(newFunc);
								SymTable.curMethod = newFunc;
								Scope s = SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$1",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SubDecl ::= Sub Id NT$0 Params LineEnd Block End Sub 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		
								SymTable.endScope();
								SymTable.curMethod = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("SubDecl",15, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Sub \"" + myid.value.toString() + "\" ya existe");
								}else if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Ya existe una funcion llamada \"" + myid.value.toString() + "\"");
								}else{
									if (myid.value.toString().equalsIgnoreCase("main")){
										SymTable.existeMain = true;
									}
								}
								
								Sub newSub = new Sub(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curScope.addSub(newSub);
								SymTable.curMethod = newSub;
								SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= Dim Id As Tipo 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curScope.hasLocalVar(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" ya existe en este contexto");
								}else{
									Variable v = new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString(), CuadTable.newTemp());
									SymTable.curScope.addVar(v);
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RootStmt ::= TypeDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RootStmt ::= FuncDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RootStmt ::= SubDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RootStmt ::= VarDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RootStmts ::= RootStmts RootStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmts",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RootStmts ::= RootStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmts",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Root ::= 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Root ::= RootStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgStart ::= Root 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ProgStart",3, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgStart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		RESULT = start_val;
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VbParser$parser.done_parsing();
          return CUP$VbParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

