
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 18 16:53:07 CST 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;
import lexer.VbLexer;
import parser.VbSyntaxError;
import parser.sym;
import symtable.*;
import intermedio.*;
import org.fife.ui.rsyntaxtextarea.parser.Parser;
import org.fife.ui.rsyntaxtextarea.parser.ExtendedHyperlinkListener;
import org.fife.ui.rsyntaxtextarea.parser.ParseResult;
import org.fife.ui.rsyntaxtextarea.parser.ParserNotice;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 18 16:53:07 CST 2014
  */
public class VbParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public VbParser() {super();}

  /** Constructor which sets the default scanner. */
  public VbParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VbParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\006\003\000\002\007" +
    "\004\000\002\007\003\000\002\007\002\000\002\010\003" +
    "\000\002\010\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\013\006\000\002" +
    "\064\002\000\002\020\012\000\002\065\002\000\002\066" +
    "\002\000\002\067\002\000\002\016\016\000\002\070\002" +
    "\000\002\030\011\000\002\031\003\000\002\031\002\000" +
    "\002\032\004\000\002\032\004\000\002\033\005\000\002" +
    "\022\003\000\002\022\002\000\002\023\003\000\002\023" +
    "\004\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\034\003\000\002\034\003\000\002\037\005\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\006\000\002\041\006\000\002" +
    "\041\007\000\002\041\005\000\002\041\003\000\002\041" +
    "\004\000\002\041\005\000\002\041\004\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\071\002\000\002" +
    "\072\002\000\002\042\021\000\002\073\002\000\002\074" +
    "\002\000\002\043\015\000\002\075\002\000\002\076\002" +
    "\000\002\044\021\000\002\045\012\000\002\045\002\000" +
    "\002\046\005\000\002\046\002\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\052\004\000\002\052\005\000\002\053\006" +
    "\000\002\053\010\000\002\047\003\000\002\047\003\000" +
    "\002\003\002\000\002\002\002\000\002\004\002\000\002" +
    "\005\003\000\002\005\003\000\002\054\004\000\002\055" +
    "\003\000\002\056\003\000\002\056\004\000\002\036\004" +
    "\000\002\050\004\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\051\003\000\002\051\005\000\002" +
    "\051\005\000\002\077\002\000\002\060\005\000\002\061" +
    "\004\000\002\100\002\000\002\061\006\000\002\057\003" +
    "\000\002\057\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\016\002\ufffd\004\015\042\007\043\011\070" +
    "\004\074\016\001\002\000\004\055\320\001\002\000\004" +
    "\074\016\001\002\000\004\002\000\001\002\000\004\055" +
    "\310\001\002\000\004\074\016\001\002\000\004\055\040" +
    "\001\002\000\014\002\ufffe\004\015\042\007\043\011\070" +
    "\004\001\002\000\004\074\016\001\002\000\004\074\016" +
    "\001\002\000\004\055\026\001\002\000\060\002\uff87\004" +
    "\uff87\006\uff87\013\uff87\016\uff87\021\uff87\022\uff87\023\uff87" +
    "\026\uff87\030\uff87\031\uff87\032\uff87\042\uff87\043\uff87\050" +
    "\uff87\052\uff87\055\uff87\064\uff87\065\uff87\070\uff87\074\016" +
    "\075\uff87\076\uff87\001\002\000\012\004\015\042\007\043" +
    "\011\070\004\001\002\000\004\002\022\001\002\000\014" +
    "\002\ufffc\004\ufffc\042\ufffc\043\ufffc\070\ufffc\001\002\000" +
    "\004\002\001\001\002\000\014\002\uffff\004\015\042\007" +
    "\043\011\070\004\001\002\000\014\002\ufffb\004\ufffb\042" +
    "\ufffb\043\ufffb\070\ufffb\001\002\000\056\002\uff86\004\uff86" +
    "\006\uff86\013\uff86\016\uff86\021\uff86\022\uff86\023\uff86\026" +
    "\uff86\030\uff86\031\uff86\032\uff86\042\uff86\043\uff86\050\uff86" +
    "\052\uff86\055\uff86\064\uff86\065\uff86\070\uff86\075\uff86\076" +
    "\uff86\001\002\000\004\041\027\001\002\000\014\033\031" +
    "\034\035\035\032\036\034\055\033\001\002\000\004\074" +
    "\ufff6\001\002\000\014\032\uffa8\046\uffa8\051\uffa8\055\uffa8" +
    "\074\uffa8\001\002\000\014\032\uffa5\046\uffa5\051\uffa5\055" +
    "\uffa5\074\uffa5\001\002\000\014\032\uffa4\046\uffa4\051\uffa4" +
    "\055\uffa4\074\uffa4\001\002\000\014\032\uffa6\046\uffa6\051" +
    "\uffa6\055\uffa6\074\uffa6\001\002\000\014\032\uffa7\046\uffa7" +
    "\051\uffa7\055\uffa7\074\uffa7\001\002\000\014\002\ufffa\004" +
    "\ufffa\042\ufffa\043\ufffa\070\ufffa\001\002\000\014\002\ufff9" +
    "\004\ufff9\042\ufff9\043\ufff9\070\ufff9\001\002\000\004\050" +
    "\ufff3\001\002\000\004\050\043\001\002\000\004\041\062" +
    "\001\002\000\010\037\047\040\044\051\045\001\002\000" +
    "\004\055\uff9e\001\002\000\006\041\uffa3\074\uffa3\001\002" +
    "\000\004\055\057\001\002\000\004\055\uff9f\001\002\000" +
    "\006\046\051\051\052\001\002\000\006\037\047\040\044" +
    "\001\002\000\006\041\uffa2\074\uffa2\001\002\000\004\055" +
    "\054\001\002\000\004\041\055\001\002\000\014\033\031" +
    "\034\035\035\032\036\034\055\033\001\002\000\006\046" +
    "\uffa0\051\uffa0\001\002\000\004\041\060\001\002\000\014" +
    "\033\031\034\035\035\032\036\034\055\033\001\002\000" +
    "\006\046\uffa1\051\uffa1\001\002\000\014\033\031\034\035" +
    "\035\032\036\034\055\033\001\002\000\004\074\ufff2\001" +
    "\002\000\004\074\016\001\002\000\020\004\015\016\067" +
    "\023\103\026\077\032\uffe7\055\101\065\070\001\002\000" +
    "\004\074\016\001\002\000\004\055\270\001\002\000\004" +
    "\055\266\001\002\000\004\074\016\001\002\000\004\054" +
    "\uffdd\001\002\000\030\004\015\016\067\021\uffe8\022\uffe8" +
    "\023\103\026\077\030\uffe8\031\uffe8\032\uffe8\055\101\065" +
    "\070\001\002\000\004\074\016\001\002\000\004\032\ufff1" +
    "\001\002\000\004\054\256\001\002\000\022\006\uff9d\013" +
    "\uff9d\050\uff9d\052\uff9d\055\uff9d\064\uff9d\075\uff9d\076\uff9d" +
    "\001\002\000\004\074\016\001\002\000\010\047\uff8c\050" +
    "\177\054\uffde\001\002\000\004\074\uff96\001\002\000\004" +
    "\024\111\001\002\000\030\004\uffe6\016\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\055\uffe6" +
    "\065\uffe6\001\002\000\004\074\016\001\002\000\004\074" +
    "\016\001\002\000\030\004\uffe1\016\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\055\uffe1\065" +
    "\uffe1\001\002\000\030\004\uffe0\016\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\055\uffe0\065" +
    "\uffe0\001\002\000\022\006\uff9d\013\uff9d\050\uff9d\052\uff9d" +
    "\055\uff9d\064\uff9d\075\uff9d\076\uff9d\001\002\000\022\006" +
    "\116\013\122\050\123\052\127\055\121\064\126\075\113" +
    "\076\117\001\002\000\050\003\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\017\uffc8" +
    "\027\uffc8\032\uffc8\046\uffc8\051\uffc8\054\uffc8\062\uffc8\063" +
    "\uffc8\071\uffc8\074\uffc8\001\002\000\050\003\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\217\012\220\014\uffcc\015" +
    "\uffcc\017\uffcc\027\uffcc\032\uffcc\046\uffcc\051\uffcc\054\uffcc" +
    "\062\222\063\223\071\uffcc\074\uffcc\001\002\000\050\003" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\014\uffc4\015\uffc4\017\uffc4\027\uffc4\032\uffc4\046\uffc4\051" +
    "\uffc4\054\uffc4\062\uffc4\063\uffc4\071\uffc4\074\uffc4\001\002" +
    "\000\022\006\uff97\013\uff97\050\uff97\052\uff97\055\uff97\064" +
    "\uff97\075\uff97\076\uff97\001\002\000\050\003\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015" +
    "\uffc6\017\uffc6\027\uffc6\032\uffc6\046\uffc6\051\uffc6\054\uffc6" +
    "\062\uffc6\063\uffc6\071\uffc6\074\uffc6\001\002\000\050\003" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\014\uffc7\015\uffc7\017\uffc7\027\uffc7\032\uffc7\046\uffc7\051" +
    "\uffc7\054\uffc7\062\uffc7\063\uffc7\071\uffc7\074\uffc7\001\002" +
    "\000\054\003\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\014\uffc5\015\uffc5\017\uffc5\027\uffc5\032\uffc5" +
    "\046\uffc5\047\uff8c\050\177\051\uffc5\054\uffc5\062\uffc5\063" +
    "\uffc5\071\uffc5\074\uffc5\001\002\000\022\006\116\013\122" +
    "\050\123\052\127\055\121\064\126\075\113\076\117\001" +
    "\002\000\022\006\116\013\122\050\123\052\127\055\121" +
    "\064\126\075\113\076\117\001\002\000\050\003\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3" +
    "\015\uffc3\017\uffc3\027\uffc3\032\uffc3\046\uffc3\051\uffc3\054" +
    "\uffc3\062\uffc3\063\uffc3\071\uffc3\074\uffc3\001\002\000\022" +
    "\006\116\013\122\050\123\052\127\055\121\064\126\075" +
    "\113\076\117\001\002\000\050\003\uff99\005\uff99\006\uff99" +
    "\007\uff99\010\uff99\011\uff99\012\uff99\014\uff99\015\uff99\017" +
    "\uff99\027\uff99\032\uff99\046\uff99\051\uff99\054\uff99\062\uff99" +
    "\063\uff99\071\uff99\074\uff99\001\002\000\050\003\uff9a\005" +
    "\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\014\uff9a" +
    "\015\uff9a\017\uff9a\027\uff9a\032\uff9a\046\uff9a\051\uff9a\054" +
    "\uff9a\062\uff9a\063\uff9a\071\uff9a\074\uff9a\001\002\000\026" +
    "\005\143\006\131\007\141\010\134\011\132\014\135\015" +
    "\136\054\137\071\142\074\016\001\002\000\022\006\116" +
    "\013\122\050\123\052\127\055\121\064\126\075\113\076" +
    "\117\001\002\000\004\012\167\001\002\000\022\006\116" +
    "\013\122\050\123\052\127\055\121\064\126\075\113\076" +
    "\117\001\002\000\022\006\116\013\122\050\123\052\127" +
    "\055\121\064\126\075\113\076\117\001\002\000\022\006" +
    "\uff9c\013\uff9c\050\uff9c\052\uff9c\055\uff9c\064\uff9c\075\uff9c" +
    "\076\uff9c\001\002\000\022\006\uff9c\013\uff9c\050\uff9c\052" +
    "\uff9c\055\uff9c\064\uff9c\075\uff9c\076\uff9c\001\002\000\022" +
    "\006\116\013\122\050\123\052\127\055\121\064\126\075" +
    "\113\076\117\001\002\000\020\004\uff9d\016\uff9d\022\uff9d" +
    "\023\uff9d\026\uff9d\055\uff9d\065\uff9d\001\002\000\022\006" +
    "\116\013\122\050\123\052\127\055\121\064\126\075\113" +
    "\076\117\001\002\000\024\006\116\013\122\050\123\052" +
    "\127\053\145\055\121\064\126\075\113\076\117\001\002" +
    "\000\022\006\116\013\122\050\123\052\127\055\121\064" +
    "\126\075\113\076\117\001\002\000\042\003\uffd7\005\uffd7" +
    "\006\uffd7\007\141\010\134\011\uffd7\014\uffd7\015\uffd7\017" +
    "\uffd7\027\uffd7\032\uffd7\046\uffd7\051\uffd7\054\uffd7\071\uffd7" +
    "\074\uffd7\001\002\000\004\074\016\001\002\000\042\003" +
    "\uffd5\005\uffd5\006\uffd5\007\141\010\134\011\uffd5\014\uffd5" +
    "\015\uffd5\017\uffd5\027\uffd5\032\uffd5\046\uffd5\051\uffd5\054" +
    "\uffd5\071\uffd5\074\uffd5\001\002\000\022\006\116\013\122" +
    "\050\123\052\127\055\121\064\126\075\113\076\117\001" +
    "\002\000\042\003\uffce\005\143\006\131\007\141\010\134" +
    "\011\132\014\135\015\136\017\uffce\027\uffce\032\uffce\046" +
    "\uffce\051\uffce\054\137\071\142\074\uffce\001\002\000\042" +
    "\003\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\014" +
    "\uffd4\015\uffd4\017\uffd4\027\uffd4\032\uffd4\046\uffd4\051\uffd4" +
    "\054\uffd4\071\uffd4\074\uffd4\001\002\000\020\004\uffb2\016" +
    "\uffb2\022\uffb2\023\uffb2\026\uffb2\055\uffb2\065\uffb2\001\002" +
    "\000\020\004\015\016\067\022\uffe7\023\103\026\077\055" +
    "\101\065\070\001\002\000\004\022\uff9b\001\002\000\004" +
    "\022\uffb1\001\002\000\004\022\157\001\002\000\004\074" +
    "\uffb0\001\002\000\042\003\uffd2\005\143\006\131\007\141" +
    "\010\134\011\uffd2\014\uffd2\015\uffd2\017\uffd2\027\uffd2\032" +
    "\uffd2\046\uffd2\051\uffd2\054\uffd2\071\142\074\uffd2\001\002" +
    "\000\022\006\116\013\122\050\123\052\127\055\121\064" +
    "\126\075\113\076\117\001\002\000\042\003\uffcf\005\143" +
    "\006\131\007\141\010\134\011\132\014\135\015\uffcf\017" +
    "\uffcf\027\uffcf\032\uffcf\046\uffcf\051\uffcf\054\137\071\142" +
    "\074\uffcf\001\002\000\022\006\116\013\122\050\123\052" +
    "\127\055\121\064\126\075\113\076\117\001\002\000\042" +
    "\003\uffd0\005\143\006\131\007\141\010\134\011\132\014" +
    "\uffd0\015\uffd0\017\uffd0\027\uffd0\032\uffd0\046\uffd0\051\uffd0" +
    "\054\137\071\142\074\uffd0\001\002\000\042\003\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\014\uffd3\015\uffd3" +
    "\017\uffd3\027\uffd3\032\uffd3\046\uffd3\051\uffd3\054\uffd3\071" +
    "\uffd3\074\uffd3\001\002\000\042\003\uffd1\005\143\006\131" +
    "\007\141\010\134\011\132\014\135\015\136\017\uffd1\027" +
    "\uffd1\032\uffd1\046\uffd1\051\uffd1\054\137\071\142\074\uffd1" +
    "\001\002\000\022\006\uff98\013\uff98\050\uff98\052\uff98\055" +
    "\uff98\064\uff98\075\uff98\076\uff98\001\002\000\042\003\uffd6" +
    "\005\uffd6\006\uffd6\007\141\010\134\011\uffd6\014\uffd6\015" +
    "\uffd6\017\uffd6\027\uffd6\032\uffd6\046\uffd6\051\uffd6\054\uffd6" +
    "\071\uffd6\074\uffd6\001\002\000\042\003\uffc9\005\143\006" +
    "\131\007\141\010\134\011\132\014\135\015\136\017\uffc9" +
    "\027\uffc9\032\uffc9\046\uffc9\051\uffc9\054\137\071\142\074" +
    "\uffc9\001\002\000\026\005\143\006\131\007\141\010\134" +
    "\011\132\014\135\015\136\051\173\054\137\071\142\001" +
    "\002\000\042\003\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\014\uffcd\015\uffcd\017\uffcd\027\uffcd\032\uffcd\046" +
    "\uffcd\051\uffcd\054\uffcd\071\uffcd\074\uffcd\001\002\000\042" +
    "\003\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\014" +
    "\uffcb\015\uffcb\017\uffcb\027\uffcb\032\uffcb\046\uffcb\051\uffcb" +
    "\054\uffcb\071\uffcb\074\uffcb\001\002\000\050\003\uff94\005" +
    "\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\014\uff94" +
    "\015\uff94\017\uff94\027\uff94\032\uff94\046\uff94\051\uff94\054" +
    "\uff94\062\uff94\063\uff94\071\uff94\074\uff94\001\002\000\004" +
    "\047\213\001\002\000\026\003\202\006\116\013\122\050" +
    "\123\051\201\052\127\055\121\064\126\075\113\076\117" +
    "\001\002\000\010\003\205\046\206\051\207\001\002\000" +
    "\050\003\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\014\uff93\015\uff93\017\uff93\027\uff93\032\uff93\046" +
    "\uff93\051\uff93\054\uff93\062\uff93\063\uff93\071\uff93\074\uff93" +
    "\001\002\000\004\051\204\001\002\000\032\003\uff8f\005" +
    "\143\006\131\007\141\010\134\011\132\014\135\015\136" +
    "\046\uff8f\051\uff8f\054\137\071\142\001\002\000\050\003" +
    "\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90" +
    "\014\uff90\015\uff90\017\uff90\027\uff90\032\uff90\046\uff90\051" +
    "\uff90\054\uff90\062\uff90\063\uff90\071\uff90\074\uff90\001\002" +
    "\000\050\003\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011" +
    "\uff91\012\uff91\014\uff91\015\uff91\017\uff91\027\uff91\032\uff91" +
    "\046\uff91\051\uff91\054\uff91\062\uff91\063\uff91\071\uff91\074" +
    "\uff91\001\002\000\024\003\210\006\116\013\122\050\123" +
    "\052\127\055\121\064\126\075\113\076\117\001\002\000" +
    "\050\003\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92" +
    "\012\uff92\014\uff92\015\uff92\017\uff92\027\uff92\032\uff92\046" +
    "\uff92\051\uff92\054\uff92\062\uff92\063\uff92\071\uff92\074\uff92" +
    "\001\002\000\010\003\uff8d\046\uff8d\051\uff8d\001\002\000" +
    "\032\003\uff8e\005\143\006\131\007\141\010\134\011\132" +
    "\014\135\015\136\046\uff8e\051\uff8e\054\137\071\142\001" +
    "\002\000\050\003\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b" +
    "\011\uff8b\012\uff8b\014\uff8b\015\uff8b\017\uff8b\027\uff8b\032" +
    "\uff8b\046\uff8b\051\uff8b\054\uff8b\062\uff8b\063\uff8b\071\uff8b" +
    "\074\uff8b\001\002\000\004\055\214\001\002\000\052\003" +
    "\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a" +
    "\014\uff8a\015\uff8a\017\uff8a\027\uff8a\032\uff8a\046\uff8a\047" +
    "\uff89\051\uff8a\054\uff8a\062\uff8a\063\uff8a\071\uff8a\074\uff8a" +
    "\001\002\000\004\047\213\001\002\000\050\003\uff88\005" +
    "\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\014\uff88" +
    "\015\uff88\017\uff88\027\uff88\032\uff88\046\uff88\051\uff88\054" +
    "\uff88\062\uff88\063\uff88\071\uff88\074\uff88\001\002\000\014" +
    "\052\uffdb\055\uffdb\064\uffdb\075\uffdb\076\uffdb\001\002\000" +
    "\014\052\uffda\055\uffda\064\uffda\075\uffda\076\uffda\001\002" +
    "\000\014\052\127\055\121\064\126\075\113\076\117\001" +
    "\002\000\014\052\uffd8\055\uffd8\064\uffd8\075\uffd8\076\uffd8" +
    "\001\002\000\014\052\uffd9\055\uffd9\064\uffd9\075\uffd9\076" +
    "\uffd9\001\002\000\042\003\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\011\uffca\014\uffca\015\uffca\017\uffca\027\uffca\032" +
    "\uffca\046\uffca\051\uffca\054\uffca\071\uffca\074\uffca\001\002" +
    "\000\030\004\uffdf\016\uffdf\021\uffdf\022\uffdf\023\uffdf\026" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\055\uffdf\065\uffdf\001\002" +
    "\000\022\006\116\013\122\050\123\052\127\055\121\064" +
    "\126\075\113\076\117\001\002\000\026\005\143\006\131" +
    "\007\141\010\134\011\132\014\135\015\136\027\230\054" +
    "\137\071\142\001\002\000\004\074\uffaf\001\002\000\004" +
    "\074\016\001\002\000\024\004\uff9c\016\uff9c\023\uff9c\026" +
    "\uff9c\030\uff9c\031\uff9c\032\uff9c\055\uff9c\065\uff9c\001\002" +
    "\000\024\004\015\016\067\023\103\026\077\030\uffe7\031" +
    "\uffe7\032\uffe7\055\101\065\070\001\002\000\010\030\uffae" +
    "\031\uffae\032\uffae\001\002\000\010\030\uffab\031\uffab\032" +
    "\uffab\001\002\000\010\030\uff9c\031\237\032\uff9c\001\002" +
    "\000\022\006\uff9c\013\uff9c\050\uff9c\052\uff9c\055\uff9c\064" +
    "\uff9c\075\uff9c\076\uff9c\001\002\000\006\030\242\032\uffa9" +
    "\001\002\000\004\032\245\001\002\000\022\006\uff9c\013" +
    "\uff9c\050\uff9c\052\uff9c\055\uff9c\064\uff9c\075\uff9c\076\uff9c" +
    "\001\002\000\022\006\116\013\122\050\123\052\127\055" +
    "\121\064\126\075\113\076\117\001\002\000\026\005\143" +
    "\006\131\007\141\010\134\011\132\014\135\015\136\032" +
    "\uffaa\054\137\071\142\001\002\000\004\026\246\001\002" +
    "\000\004\074\uff9c\001\002\000\004\074\uffad\001\002\000" +
    "\022\006\116\013\122\050\123\052\127\055\121\064\126" +
    "\075\113\076\117\001\002\000\026\005\143\006\131\007" +
    "\141\010\134\011\132\014\135\015\136\027\252\054\137" +
    "\071\142\001\002\000\004\074\016\001\002\000\024\004" +
    "\uff9c\016\uff9c\023\uff9c\026\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\055\uff9c\065\uff9c\001\002\000\024\004\015\016\067\023" +
    "\103\026\077\030\uffe7\031\uffe7\032\uffe7\055\101\065\070" +
    "\001\002\000\010\030\uffac\031\uffac\032\uffac\001\002\000" +
    "\022\006\116\013\122\050\123\052\127\055\121\064\126" +
    "\075\113\076\117\001\002\000\026\005\143\006\131\007" +
    "\141\010\134\011\132\014\135\015\136\054\137\071\142" +
    "\074\uffdc\001\002\000\004\032\261\001\002\000\004\043" +
    "\262\001\002\000\004\074\ufff0\001\002\000\030\004\uffe4" +
    "\016\uffe4\021\uffe4\022\uffe4\023\uffe4\026\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\055\uffe4\065\uffe4\001\002\000\030\004\uffe5" +
    "\016\uffe5\021\uffe5\022\uffe5\023\uffe5\026\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\055\uffe5\065\uffe5\001\002\000\030\004\uffe2" +
    "\016\uffe2\021\uffe2\022\uffe2\023\uffe2\026\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\055\uffe2\065\uffe2\001\002\000\004\050\177" +
    "\001\002\000\004\074\uff95\001\002\000\004\054\271\001" +
    "\002\000\022\006\116\013\122\050\123\052\127\055\121" +
    "\064\126\075\113\076\117\001\002\000\026\005\143\006" +
    "\131\007\141\010\134\011\132\014\135\015\136\017\uff9c" +
    "\054\137\071\142\001\002\000\004\017\274\001\002\000" +
    "\022\006\116\013\122\050\123\052\127\055\121\064\126" +
    "\075\113\076\117\001\002\000\026\005\143\006\131\007" +
    "\141\010\134\011\132\014\135\015\136\054\137\071\142" +
    "\074\uff9c\001\002\000\004\074\016\001\002\000\020\004" +
    "\uffb5\016\uffb5\021\uffb5\023\uffb5\026\uffb5\055\uffb5\065\uffb5" +
    "\001\002\000\020\004\015\016\067\021\uffe7\023\103\026" +
    "\077\055\101\065\070\001\002\000\004\021\302\001\002" +
    "\000\004\055\303\001\002\000\004\074\uffb4\001\002\000" +
    "\004\074\uff9b\001\002\000\004\074\uffb3\001\002\000\030" +
    "\004\uffe3\016\uffe3\021\uffe3\022\uffe3\023\uffe3\026\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\055\uffe3\065\uffe3\001\002\000\014" +
    "\002\ufff7\004\ufff7\042\ufff7\043\ufff7\070\ufff7\001\002\000" +
    "\004\050\ufff5\001\002\000\004\050\043\001\002\000\004" +
    "\074\016\001\002\000\020\004\015\016\067\023\103\026" +
    "\077\032\uffe7\055\101\065\070\001\002\000\004\032\315" +
    "\001\002\000\004\042\316\001\002\000\004\074\ufff4\001" +
    "\002\000\014\002\ufff8\004\ufff8\042\ufff8\043\ufff8\070\ufff8" +
    "\001\002\000\004\074\016\001\002\000\006\032\uffef\055" +
    "\uffef\001\002\000\006\032\uffec\055\323\001\002\000\004" +
    "\041\333\001\002\000\004\074\016\001\002\000\006\032" +
    "\uffed\055\323\001\002\000\004\032\327\001\002\000\004" +
    "\070\330\001\002\000\004\074\uffee\001\002\000\006\032" +
    "\uffea\055\uffea\001\002\000\006\032\uffeb\055\uffeb\001\002" +
    "\000\014\033\031\034\035\035\032\036\034\055\033\001" +
    "\002\000\010\032\uffe9\055\uffe9\074\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\024\006\017\007\005\010\011\011\020\013" +
    "\013\016\004\020\012\030\007\057\016\001\001\000\002" +
    "\001\001\000\004\057\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\306\001\001\000\002\001\001" +
    "\000\014\011\023\013\013\016\004\020\012\030\007\001" +
    "\001\000\004\057\036\001\001\000\004\057\035\001\001" +
    "\000\002\001\001\000\004\057\024\001\001\000\016\010" +
    "\022\011\020\013\013\016\004\020\012\030\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\023\013\013\016\004\020\012\030\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\040\001\001\000\004\052\041\001\001\000\002\001" +
    "\001\000\006\047\045\053\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\060" +
    "\001\001\000\002\001\001\000\004\063\062\001\001\000" +
    "\004\066\063\001\001\000\004\057\064\001\001\000\032" +
    "\013\073\022\074\023\072\024\103\034\075\036\101\037" +
    "\104\042\065\043\070\044\105\056\077\060\071\001\001" +
    "\000\004\057\305\001\001\000\002\001\001\000\004\036" +
    "\266\001\001\000\004\057\264\001\001\000\002\001\001" +
    "\000\026\013\073\024\263\034\075\036\101\037\104\042" +
    "\065\043\070\044\105\056\077\060\071\001\001\000\004" +
    "\057\262\001\001\000\004\067\257\001\001\000\002\001" +
    "\001\000\004\003\225\001\001\000\004\057\224\001\001" +
    "\000\006\050\174\077\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\107\001\001" +
    "\000\004\057\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\111\001\001\000\016\005\117\035\113" +
    "\036\114\041\127\055\124\060\123\001\001\000\002\001" +
    "\001\000\004\062\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\050" +
    "\174\077\175\001\001\000\016\005\117\035\113\036\114" +
    "\041\173\055\124\060\123\001\001\000\016\005\117\035" +
    "\113\036\114\041\171\055\124\060\123\001\001\000\002" +
    "\001\001\000\016\005\117\035\113\036\114\041\170\055" +
    "\124\060\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\054\132\057\137\001\001\000\016\005\117\035" +
    "\113\036\114\041\167\055\124\060\123\001\001\000\002" +
    "\001\001\000\016\005\117\035\113\036\114\041\165\055" +
    "\124\060\123\001\001\000\016\005\117\035\113\036\114" +
    "\041\164\055\124\060\123\001\001\000\004\002\162\001" +
    "\001\000\004\002\160\001\001\000\016\005\117\035\113" +
    "\036\114\041\157\055\124\060\123\001\001\000\004\003" +
    "\151\001\001\000\016\005\117\035\113\036\114\041\150" +
    "\055\124\060\123\001\001\000\016\005\117\035\113\036" +
    "\114\041\145\055\124\060\123\001\001\000\016\005\117" +
    "\035\113\036\114\041\143\055\124\060\123\001\001\000" +
    "\004\054\132\001\001\000\004\057\146\001\001\000\004" +
    "\054\132\001\001\000\016\005\117\035\113\036\114\041" +
    "\147\055\124\060\123\001\001\000\004\054\132\001\001" +
    "\000\004\054\132\001\001\000\004\073\152\001\001\000" +
    "\032\013\073\022\153\023\072\024\103\034\075\036\101" +
    "\037\104\042\065\043\070\044\105\056\077\060\071\001" +
    "\001\000\004\004\154\001\001\000\004\074\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\132\001" +
    "\001\000\016\005\117\035\113\036\114\041\161\055\124" +
    "\060\123\001\001\000\004\054\132\001\001\000\016\005" +
    "\117\035\113\036\114\041\163\055\124\060\123\001\001" +
    "\000\004\054\132\001\001\000\004\054\132\001\001\000" +
    "\004\054\132\001\001\000\002\001\001\000\004\054\132" +
    "\001\001\000\004\054\132\001\001\000\004\054\132\001" +
    "\001\000\002\001\001\000\004\054\132\001\001\000\002" +
    "\001\001\000\004\061\211\001\001\000\020\005\117\035" +
    "\113\036\114\041\202\051\177\055\124\060\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\117\035\113\036\114\041\210\055\124\060" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\214\001\001\000\004\061\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\117\035\223\036\114\060\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\117\035\113\036\114\041\226\055\124\060\123" +
    "\001\001\000\004\054\132\001\001\000\004\075\230\001" +
    "\001\000\004\057\231\001\001\000\004\002\232\001\001" +
    "\000\032\013\073\022\233\023\072\024\103\034\075\036" +
    "\101\037\104\042\065\043\070\044\105\056\077\060\071" +
    "\001\001\000\004\076\234\001\001\000\004\045\235\001" +
    "\001\000\004\002\237\001\001\000\004\002\247\001\001" +
    "\000\004\046\240\001\001\000\002\001\001\000\004\002" +
    "\242\001\001\000\016\005\117\035\113\036\114\041\243" +
    "\055\124\060\123\001\001\000\004\054\132\001\001\000" +
    "\002\001\001\000\004\002\246\001\001\000\002\001\001" +
    "\000\016\005\117\035\113\036\114\041\250\055\124\060" +
    "\123\001\001\000\004\054\132\001\001\000\004\057\252" +
    "\001\001\000\004\002\253\001\001\000\032\013\073\022" +
    "\254\023\072\024\103\034\075\036\101\037\104\042\065" +
    "\043\070\044\105\056\077\060\071\001\001\000\002\001" +
    "\001\000\016\005\117\035\113\036\114\041\256\055\124" +
    "\060\123\001\001\000\004\054\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\117" +
    "\035\113\036\114\041\271\055\124\060\123\001\001\000" +
    "\006\002\272\054\132\001\001\000\002\001\001\000\016" +
    "\005\117\035\113\036\114\041\274\055\124\060\123\001" +
    "\001\000\006\002\275\054\132\001\001\000\004\057\276" +
    "\001\001\000\004\071\277\001\001\000\032\013\073\022" +
    "\300\023\072\024\103\034\075\036\101\037\104\042\065" +
    "\043\070\044\105\056\077\060\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\303\001\001\000\004" +
    "\004\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\310\001\001\000\004\052\311" +
    "\001\001\000\004\057\312\001\001\000\032\013\073\022" +
    "\313\023\072\024\103\034\075\036\101\037\104\042\065" +
    "\043\070\044\105\056\077\060\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\320\001\001\000\004\070\321\001\001\000" +
    "\010\031\325\032\324\033\323\001\001\000\002\001\001" +
    "\000\004\057\331\001\001\000\004\033\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\333\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VbParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VbParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VbParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	private VbLexer lexer;
	private ArrayList<VbSyntaxError> errLst = new ArrayList<>();

	public void msg(Object str){
		javax.swing.JOptionPane.showMessageDialog(null, str.toString());
	}
	public VbParser(VbLexer lex) {
		super(lex);
		this.lexer = lex;
	}

	public void user_init(){
		this.errLst = new ArrayList<>();
		SymTable.init();
		CuadTable.init();
	}

	public Symbol getCurToken(){
		return this.cur_token;
	}

	public void report_fatal_error(String message, Object info) throws Exception{
		done_parsing();
		report_error(message, info);
		throw new Exception("Can't recover from previous error(s)");
	}

	public void report_error(String message, Object info){
		System.err.print(message);
		System.err.flush();
		if ((info instanceof Symbol)){
		  if (((Symbol)info).left != -1){
			System.err.println(" at character " + ((Symbol)info).left + " of input");
		  }else{
			System.err.println("");
		  }
		}else{
		  System.err.println("");
	   }
	}

	public void syntax_error(Symbol cur_token){
		System.out.println("syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("1cur_token '" + cur_token + "' no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
		System.out.println("unrec_syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error fatal en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("2unrec cur_token no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	protected int error_sync_size(){
		return 3;
	}
	
	public void addErr(String msg, int left, int right, int offset, int length){
		this.errLst.add(new VbSyntaxError(msg, left, right, offset, length));
	}

	public void appendErr(String msg){
		if (!this.errLst.isEmpty()){
			int index = this.errLst.size() - 1;
			this.errLst.get(index).message += ": " + msg;
		}
	}

	public ArrayList getErrLst(){
		return this.errLst;
	}

	public void setLexer(VbLexer lexer){
		this.lexer = lexer;
	}

	public MyToken tokenAt(java.util.Stack stack, int top, int offset){
		return (MyToken)stack.elementAt(top + offset);
	}

	public MyToken toMyToken(Object o){
		return (MyToken)o;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$VbParser$actions {


    ArrayList<Integer> lstFal;

  private final VbParser parser;

  /** Constructor */
  CUP$VbParser$actions(VbParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$VbParser$do_action(
    int                        CUP$VbParser$act_num,
    java_cup.runtime.lr_parser CUP$VbParser$parser,
    java.util.Stack            CUP$VbParser$stack,
    int                        CUP$VbParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VbParser$result;

      /* select the action based on the action number */
      switch (CUP$VbParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LineEnd ::= FinDeLinea LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("LineEnd",45, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LineEnd ::= FinDeLinea 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("LineEnd",45, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PropChain ::= Punto Id NT$12 PropChain 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int propChainleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propChainright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object propChain = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = propChain; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PropChain",47, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$12 ::= 
            {
              Object RESULT =null;

								if (SymTable.curProp != null){
									String tipoCurProp = SymTable.curProp.tipo;
									TypeStruct t = SymTable.curScope.findTypeStruct(tipoCurProp);

									if (t == null || SymTable.isPrimitive(tipoCurProp)){
										MyToken myid = new MyToken(sym.Id, SymTable.curProp.linea, SymTable.curProp.columna, SymTable.curProp.offset);
										parser.syntax_error(myid);
										parser.appendErr("\"" + tipoCurProp + "\" no es un Type");
										SymTable.curProp = null;
									}else{
										MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
										Variable v = t.findProp(myid.value.toString());
										if (v == null){
											parser.syntax_error(myid);
											parser.appendErr("Type \"" + t.id + "\" no tiene una propiedad llamada \"" + myid.value.toString() + "\"");
											SymTable.curProp = null;
										}else{
											if (!SymTable.isPrimitive(v.tipo)){
												t = SymTable.curScope.findTypeStruct(v.tipo);

												if (t == null || SymTable.isPrimitive(tipoCurProp)){
													parser.syntax_error(myid);
													parser.appendErr("\"" + myid.value.toString() + "\" no es un Type");
													SymTable.curProp = null;
												}else{
													SymTable.curProp = new Property(v.id, v.linea, v.columna, v.offset, v.tipo);
												}
											}else{
												parser.syntax_error(myid);
												parser.appendErr("\"" + myid.value.toString() + "\" no es un Type");
												SymTable.curProp = null;
											}
										}
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$12",62, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PropChain ::= Punto Id 
            {
              Object RESULT =null;
		
								if (SymTable.curProp != null){
									String tipoCurProp = SymTable.curProp.tipo;
									TypeStruct t = SymTable.curScope.findTypeStruct(tipoCurProp);

									if (t == null || SymTable.isPrimitive(tipoCurProp)){
										MyToken myid = new MyToken(sym.Id, SymTable.curProp.linea, SymTable.curProp.columna, SymTable.curProp.offset);
										parser.syntax_error(myid);
										parser.appendErr("\"" + tipoCurProp + "\" no es un Type");
										SymTable.curProp = null;
									}else{
										MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
										Variable v = t.findProp(myid.value.toString());
										if (v == null){
											parser.syntax_error(myid);
											parser.appendErr("Type \"" + t.id + "\" no tiene una propiedad llamada \"" + myid.value.toString() + "\"");
											SymTable.curProp = null;
										}else{
											RESULT = v.tipo;
										}
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PropChain",47, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Property ::= Id NT$11 PropChain 
            {
              Termino RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Termino) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int propChainleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propChainright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object propChain = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								RESULT = new Termino(myid.value.toString(), myid.left, myid.right, myid.offset, propChain.toString());
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Property",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$11 ::= 
            {
              Termino RESULT =null;

								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									if (!SymTable.isPrimitive(v.tipo)){
										Property p = new Property(v.id, v.linea, v.columna, v.offset, v.tipo);
										SymTable.curProp = p;
									}else{
										parser.syntax_error(myid);
										parser.appendErr("La variable \"" + v.id + "\" no es un Type4");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$11",61, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ArgLst ::= ArgLst Coma error 
            {
              ArrayList<Expresion> RESULT =null;
		int argLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int argLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Expresion> argLst = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		 
								parser.appendErr("Se esperaba Argumento"); 
								RESULT = argLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ArgLst ::= ArgLst Coma Expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int argLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int argLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Expresion> argLst = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								argLst.add(e);
								RESULT = argLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ArgLst ::= Expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								ArrayList<Expresion> args = new ArrayList<>();
								args.add(e);
								RESULT = args;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Args ::= ParI error ParD 
            {
              ArrayList<Expresion> RESULT =null;
		 parser.appendErr("Argumentos invalidos"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Args ::= ParI ArgLst error 
            {
              ArrayList<Expresion> RESULT =null;
		 parser.appendErr("Se esperaba ')'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Args ::= ParI ArgLst ParD 
            {
              ArrayList<Expresion> RESULT =null;
		int argLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int argLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Expresion> argLst = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		
								RESULT = argLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Args ::= ParI ParD 
            {
              ArrayList<Expresion> RESULT =null;
		
								RESULT = new ArrayList<Expresion>();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FuncEval ::= Id Args 
            {
              Termino RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Expresion> args = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
								Funcion f = SymTable.curScope.findFunc(myid.value.toString());

								if (f == null){
									parser.syntax_error(myid);
									parser.appendErr("La funcion \"" + myid.value.toString() + "\" no ha sido declarada");
									RESULT = null;
								}else{
									if (f.parametros.size() != args.size()){
										parser.syntax_error(myid);
										parser.appendErr("La funcion \"" + myid.value.toString() + "\" recibe " + f.parametros.size() + " argumentos. Se pasaron " + args.size());
										RESULT = null;
									}else{
										for (int i = 0; i < f.parametros.size(); i++){
											if (!f.parametros.get(i).tipo.equalsIgnoreCase(args.get(i).tipo)){
												parser.syntax_error(myid);
												parser.appendErr("El argumento en la posicion " + (i + 1) + " es \"" + args.get(i).tipo + "\", debe ser \"" + f.parametros.get(i).tipo);
											}
										}
									}
									RESULT = new Termino(myid.value.toString(), myid.left, myid.right, myid.offset, f.tipo, CuadTable.newTemp());
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncEval",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MethodCall ::= Call FuncEval 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("MethodCall",44, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MethodCall ::= FuncEval 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("MethodCall",44, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Negativo ::= Menos 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Negativo",43, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Distinto ::= Menor Mayor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Distinto",42, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BoolLiteral ::= False 
            {
              Literal RESULT =null;
		
								MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								RESULT = new Literal("false", tok.left, tok.right, tok.offset, "boolean", "0");
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",3, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BoolLiteral ::= True 
            {
              Literal RESULT =null;
		
								MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								RESULT = new Literal("true", tok.left, tok.right, tok.offset, "boolean", "1");
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",3, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // N ::= 
            {
              ArrayList<Integer> RESULT =null;
		 
								RESULT = CuadTable.makeList(CuadTable.sigCuad);
								CuadTable.gen("goto", "");
							
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("N",2, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // M ::= 
            {
              Integer RESULT =null;
		 RESULT = CuadTable.sigCuad; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("M",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= 
            {
              Integer RESULT =null;
		 RESULT = CuadTable.sigCuad;
                                                       CuadTable.gen("_etiq"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PassMech ::= ByRef 
            {
              Object RESULT =null;
		int byRefleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int byRefright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object byRef = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = byRef.toString().toLowerCase(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PassMech",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PassMech ::= ByVal 
            {
              Object RESULT =null;
		int byValleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int byValright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object byVal = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = byVal.toString().toLowerCase(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PassMech",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ParamLst ::= ParamLst Coma PassMech Id As Tipo 
            {
              ArrayList<Parametro> RESULT =null;
		int paramLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int paramLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		ArrayList<Parametro> paramLst = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int passMechleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int passMechright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object passMech = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",41, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ParamLst ::= PassMech Id As Tipo 
            {
              ArrayList<Parametro> RESULT =null;
		int passMechleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int passMechright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object passMech = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",41, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Params ::= ParI ParamLst ParD 
            {
              ArrayList<Parametro> RESULT =null;
		int paramLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int paramLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Parametro> paramLst = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",40, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Params ::= ParI ParD 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",40, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Tipo ::= Id 
            {
              MyToken RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Tipo ::= Char 
            {
              MyToken RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Tipo ::= String 
            {
              MyToken RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Tipo ::= Boolean 
            {
              MyToken RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Tipo ::= Integer 
            {
              MyToken RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ElseOpt ::= 
            {
              Integer RESULT =null;
		 RESULT = null; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseOpt",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ElseOpt ::= Else M Expresion 
            {
              Integer RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		 RESULT = m; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseOpt",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ElseIfs ::= 
            {
              Simbolo RESULT =null;
		 RESULT = null; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseIfs",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ElseIfs ::= ElseIfs ElseIf M Expresion Then LineEnd M Block 
            {
              Simbolo RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		CuadTable.backpatch(e.lstVerd,m2.toString());
                                                                                                    Simbolo sim = new Simbolo("",0,0,0,"");
                                                                                                    sim.lstFals = e.lstFals;
                                                                                                    RESULT = sim;
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseIfs",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IfStmt ::= If E Expresion Then NT$9 LineEnd M Block NT$10 ElseIfs M ElseOpt End If M 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-13)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-13)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-13)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).value;
		int elseIfsleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int elseIfsright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Simbolo elseIfs = (Simbolo)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Integer m3 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int elseOptleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int elseOptright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Integer elseOpt = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								//Statement s = new Statement("", 0, 0, 0, "", "");
								//s.lstSig = CuadTable.merge(e.lstFals, block.lstSig);
								//parser.msg("generando if=");
								//CuadTable.gen("if=", e.lugar, "1", m.toString());
								//CuadTable.backpatch(e.lstVerd, m1);
								//CuadTable.backpatch(n, m2);
								
								if (elseIfs != null) {
									CuadTable.backpatch(e.lstFals, m3.toString());
									//CuadTable.backpatch(elseIfs.lstSig, m2);
									if (elseOpt != null){
										//CuadTable.backpatch(elseIfs.lstFals, elseOpt);
									}else{
										//CuadTable.backpatch(elseIfs.lstFals, m2);
									}
								}else if (elseOpt != null){
									//CuadTable.backpatch(e.lstFals, elseOpt);
								}else{
									//CuadTable.backpatch(e.lstFals, m2);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("IfStmt",34, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-14)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;

                                                                CuadTable.backpatch(e.lstVerd, m1.toString());
                                                                //RESULT = CuadTable.merge(e.lstFals,b.lstSig);
                                                 SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$10",60, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$9 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

								MyToken ifTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);
								SymTable.createSubScope("If" + SymTable.blockName(), ifTok.left, ifTok.right, ifTok.offset); 
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$9",59, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DoWhile ::= Do While E Expresion LineEnd E NT$7 Block N NT$8 Loop 
            {
              Simbolo RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Simbolo) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int et1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).right;
		Integer et1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Integer et2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("DoWhile",33, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-10)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$8 ::= 
            {
              Simbolo RESULT =(Simbolo) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int et1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		Integer et1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Integer et2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;

								SymTable.endScope();
                                                                CuadTable.backpatch(n,et1.toString());
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$8",58, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$7 ::= 
            {
              Simbolo RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Integer et1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Integer et2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;

                                                                Simbolo nuevo = new Simbolo("",0,0,0,"");
								MyToken doTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4);
								SymTable.createSubScope("Do" + SymTable.blockName(), doTok.left, doTok.right, doTok.offset);
                                                                CuadTable.backpatch(e1.lstVerd,et2.toString());
                                                                nuevo.lstSig = e1.lstFals;
                                                                
                                                                RESULT = nuevo;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$7",57, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ForLoop ::= For Id Igual Expresion M To Expresion M LineEnd NT$5 Block Next Id NT$6 N 
            {
              Simbolo RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Simbolo) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-10)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-10)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		CuadTable.backpatch(n,m2+1+"");
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-14)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$6 ::= 
            {
              Simbolo RESULT =(Simbolo) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;

								SymTable.endScope();
                                                                String temp = CuadTable.newTemp();
                                                                Simbolo nuevo = new Simbolo("",0,0,0,"");
                                                                MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
                                                                CuadTable.gen("+",myid.value.toString(),1+"",temp);
                                                                CuadTable.gen("=",temp,myid.value.toString());
                                                                nuevo.lstSig = lstFal;
                                                                if(b != null){
                                                                    for(int i = 0; i<b.size();i++){
                                                                        nuevo.lstSig = b.get(i).lstSig;
                                                                    }
                                                                }
                                                                RESULT = nuevo;
                                                
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$5 ::= 
            {
              Simbolo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

								MyToken forTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8);
                                                                MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7);
                                                                SymTable.createSubScope("For" + SymTable.blockName(), forTok.left, forTok.right, forTok.offset);
                                                                CuadTable.gen("=",e1.lugar,myid.value.toString());
                                                                CuadTable.gen("_etiq",e1.lugar,myid.value.toString());
                                                                CuadTable.gen("if<",e1.lugar,e2.lugar,m2+4 + "");
                                                                 lstFal =CuadTable.makeList(CuadTable.sigCuad);
                                                                CuadTable.gen("goto","");
                                                                
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Operador ::= Ampersand 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Operador ::= Distinto 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Operador ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Operador ::= Mayor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Operador ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Operador ::= Menor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Operador ::= Not 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Operador ::= Or 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Operador ::= And 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Operador ::= Entre 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Operador ::= Por 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Operador ::= Menos 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Operador ::= Mas 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Termino ::= Property 
            {
              Termino RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino p = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (p == null){
									RESULT = null;
								}else{
									RESULT = new Termino(p.id, p.linea, p.columna, p.offset, p.tipo, p.lugar);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Termino ::= FuncEval 
            {
              Termino RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino f = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (f == null){
									RESULT = null;
								}else{
									RESULT = new Termino(f.id, f.linea, f.columna, f.offset, f.tipo, f.lugar);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Termino ::= Id 
            {
              Termino RESULT =null;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
									RESULT = null;
								}else{
									RESULT = new Termino(v.id, v.linea, v.columna, v.offset, v.tipo, v.lugar);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Termino ::= StrLiteral 
            {
              Termino RESULT =null;
		
								MyToken strLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								String valor = strLit.value.toString();
								
								if (valor.length() == 1){
									RESULT = new Termino(valor, strLit.left, strLit.right, strLit.offset, "char", valor);
								}else{
									RESULT = new Termino(valor, strLit.left, strLit.right, strLit.offset, "string", valor);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Termino ::= BoolLiteral 
            {
              Termino RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Literal b = (Literal)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								Termino t = new Termino(b.id, b.linea, b.columna, b.offset, "boolean", b.lugar);
								RESULT = t;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Termino ::= IntLiteral 
            {
              Termino RESULT =null;
		  
								MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								String valor = intLit.value.toString();
								Termino t = new Termino(valor, intLit.left, intLit.right, intLit.offset, "integer", valor);
								RESULT = t;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= Negativo Expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e != null){
									if (e.tipo.equalsIgnoreCase("integer")){
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal ()");
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= Termino operel Termino 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Termino t1 = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino t2 = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
                                                                if (t1 != null && t2 != null){
                                                                        RESULT = new Expresion("", 0, 0, 0, "boolean");
                                                                        RESULT.lstVerd = CuadTable.makeList(CuadTable.sigCuad);
                                                                        RESULT.lstFals = CuadTable.makeList(CuadTable.sigCuad+1);
                                                                        CuadTable.gen("if"+t.toString(),t1.id,t2.id,"");
                                                                        CuadTable.gen("goto","");
								}else{
									RESULT = null;
								} 
                                                                              
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= Not Expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e != null){
									RESULT = new Expresion(e.id, e.linea, e.columna, e.offset, "boolean");
                                                                        RESULT.lstVerd = e.lstFals;
                                                                        RESULT.lstFals = e.lstVerd;
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= Termino 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino t = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (t != null){
									RESULT = new Expresion(t.id, t.linea, t.columna, t.offset, t.tipo, t.lugar);
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= ParI Expresion ParD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		
								RESULT = e;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= Expresion Ampersand GuionBajo LineEnd Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (SymTable.isPrimitive(e1.tipo) && SymTable.isPrimitive(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "string");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " & " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= Expresion Or M Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("boolean") && e1.tipo.equalsIgnoreCase(e2.tipo)){
										Expresion nuevaExp = new Expresion("", 0, 0, 0, "boolean");
										CuadTable.backpatch(e1.lstFals, m.toString());
										nuevaExp.lstVerd = CuadTable.merge(e1.lstVerd, e2.lstVerd);
										nuevaExp.lstFals = e2.lstFals;
										RESULT = nuevaExp;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " Or " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= Expresion And M Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("boolean") && e1.tipo.equalsIgnoreCase(e2.tipo)){
										Expresion nuevaExp = new Expresion("", 0, 0, 0, "boolean");
										CuadTable.backpatch(e1.lstVerd, m.toString());
										nuevaExp.lstVerd = e2.lstVerd;
										nuevaExp.lstFals = CuadTable.merge(e1.lstFals, e2.lstFals);
										RESULT = nuevaExp;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " And " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion Distinto Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " <> " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= Expresion Igual Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " = " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= Expresion Entre Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("/", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " / " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= Expresion Por Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("*", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " * " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= Expresion Ampersand Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (SymTable.isPrimitive(e1.tipo) && SymTable.isPrimitive(e2.tipo)){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("&", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " & " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= Expresion Menos Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("-", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " - " + e2.tipo + ")");
										RESULT = null;
									}
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= Expresion Mas Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("+", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " + " + e2.tipo + ")");
										RESULT = null;
									}
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operel ::= MayorIgual 
            {
              Object RESULT =null;
		MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
                                    String valor = intLit.value.toString();
                                    RESULT = valor.toString();
                                      
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("operel",48, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operel ::= MenorIgual 
            {
              Object RESULT =null;
		MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
                                    String valor = intLit.value.toString();
                                    RESULT = valor.toString();
                                      
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("operel",48, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operel ::= Mayor 
            {
              Object RESULT =null;
		MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
                                    String valor = intLit.value.toString();
                                    RESULT = valor.toString();
                                  
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("operel",48, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operel ::= Menor 
            {
              Object RESULT =null;
		MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
                                    String valor = intLit.value.toString();
                                    RESULT = valor.toString();
                                  
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("operel",48, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Asignacion ::= Asignable Igual Expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Asignable a = (Asignable)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (a != null && e != null){
									if (!a.tipo.equalsIgnoreCase(e.tipo)){
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
										parser.syntax_error(tok);
										parser.appendErr("Asignacion ilegal (" + a.tipo + " = " + e.tipo + ")");
									}else{
										CuadTable.gen("=", e.lugar, a.lugar);
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignacion",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Asignable ::= Property 
            {
              Asignable RESULT =null;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino property = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (property == null){
									RESULT = null;
								}else{
									RESULT = new Asignable(property.id, property.linea, property.columna, property.offset, property.tipo, "propiedad", CuadTable.newTemp());
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignable",26, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Asignable ::= Id 
            {
              Asignable RESULT =null;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									RESULT = new Asignable(v.id, v.linea, v.columna, v.offset, v.tipo, "variable", v.lugar);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignable",26, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BlockStmt ::= MethodCall LineEnd 
            {
              Simbolo RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BlockStmt ::= Asignacion LineEnd 
            {
              Simbolo RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BlockStmt ::= IfStmt LineEnd 
            {
              Simbolo RESULT =null;
		
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BlockStmt ::= DoWhile LineEnd 
            {
              Simbolo RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Simbolo D = (Simbolo)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		CuadTable.backpatch(D.lstSig,CuadTable.sigCuad);RESULT=D;
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BlockStmt ::= ForLoop LineEnd 
            {
              Simbolo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Simbolo f = (Simbolo)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		CuadTable.backpatch(f.lstSig,CuadTable.sigCuad);RESULT=f;
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BlockStmt ::= VarDecl LineEnd 
            {
              Simbolo RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BlockStmts ::= BlockStmts BlockStmt 
            {
              ArrayList<Simbolo> RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Simbolo> b1 = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 if(b != null && b1 != null){
                                                                                        b1.add(b);
                                                                                        RESULT=b1;
                                                                                    }
                                                                                    else if(b != null && b1 == null){
                                                                                        ArrayList<Simbolo> sim= new ArrayList<Simbolo>();
                                                                                        sim.add(b);
                                                                                        RESULT=sim;
                                                                                    }
                                                                                    else{RESULT=null;}
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",17, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BlockStmts ::= BlockStmt 
            {
              ArrayList<Simbolo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		   if(b != null){System.out.println("ttttttttttttttxxxxxxx"+b.lstSig.get(0));
                                                            ArrayList<Simbolo> sim= new ArrayList<Simbolo>();
                                                            sim.add(b);
                                                            RESULT=sim;}else{RESULT = null;}
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",17, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Block ::= 
            {
              ArrayList<Simbolo> RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Block",16, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Block ::= BlockStmts 
            {
              ArrayList<Simbolo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		if(b != null){RESULT=b;}else{RESULT=null;}
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Block",16, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TypeVarDecl ::= Id As Tipo 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curTypeStruct.hasProp(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La propiedad \"" + myid.value.toString() + "\" ya existe en este Type");
								}else{
									if (!SymTable.rootScope.hasType(tipo.value.toString())){
										parser.syntax_error(tipo);
										parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
									}

									SymTable.curTypeStruct.addProp(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeVarDecl",25, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TypeBlockStmts ::= TypeBlockStmts TypeVarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlockStmts",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypeBlockStmts ::= TypeVarDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlockStmts",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeBlock ::= 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlock",23, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeBlock ::= TypeBlockStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlock",23, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeDecl ::= Type Id LineEnd NT$4 TypeBlock End Type 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		
								SymTable.curTypeStruct = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeDecl",22, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
								TypeStruct t = new TypeStruct(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curTypeStruct = t;
								SymTable.curScope.addTypeStruct(t);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FuncDecl ::= Function Id NT$1 Params As Tipo NT$2 LineEnd Block NT$3 End Function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",12, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;

								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
 
								((Funcion)SymTable.curMethod).tipo = tipo.value.toString();
								
								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}

								SymTable.curMethod = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              Object RESULT =null;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Function \"" + myid.value.toString() + "\" ya existe");
								}else if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Ya existe un Sub llamado \"" + myid.value.toString() + "\"");
								}
								
								Funcion newFunc = new Funcion(myid.value.toString(), myid.left, myid.right, myid.offset, "void");
								SymTable.curScope.addFunc(newFunc);
								SymTable.curMethod = newFunc;
								Scope s = SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SubDecl ::= Sub Id NT$0 Params LineEnd Block End Sub 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		
								SymTable.endScope();
								SymTable.curMethod = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("SubDecl",14, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              Object RESULT =null;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
                                                                CuadTable.gen(myid.value.toString());
								if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Sub \"" + myid.value.toString() + "\" ya existe");
								}else if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Ya existe una funcion llamada \"" + myid.value.toString() + "\"");
								}else{
									if (myid.value.toString().equalsIgnoreCase("main")){
										SymTable.existeMain = true;
									}
								}
								
								Sub newSub = new Sub(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curScope.addSub(newSub);
								SymTable.curMethod = newSub;
								SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= Dim Id As Tipo 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curScope.hasLocalVar(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" ya existe en este contexto");
								}else{
									Variable v = new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString(), CuadTable.newTemp());
									SymTable.curScope.addVar(v);
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",9, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RootStmt ::= TypeDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RootStmt ::= FuncDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RootStmt ::= SubDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RootStmt ::= VarDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RootStmts ::= RootStmts RootStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmts",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RootStmts ::= RootStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmts",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Root ::= 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Root ::= RootStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Root ::= LineEnd RootStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgStart ::= Root 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ProgStart",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgStart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		RESULT = start_val;
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VbParser$parser.done_parsing();
          return CUP$VbParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

