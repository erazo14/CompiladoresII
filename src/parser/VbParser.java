
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 19 11:51:28 CST 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;
import lexer.VbLexer;
import parser.VbSyntaxError;
import parser.sym;
import symtable.*;
import intermedio.*;
import org.fife.ui.rsyntaxtextarea.parser.Parser;
import org.fife.ui.rsyntaxtextarea.parser.ExtendedHyperlinkListener;
import org.fife.ui.rsyntaxtextarea.parser.ParseResult;
import org.fife.ui.rsyntaxtextarea.parser.ParserNotice;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 19 11:51:28 CST 2014
  */
public class VbParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public VbParser() {super();}

  /** Constructor which sets the default scanner. */
  public VbParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VbParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\006\003\000\002\007" +
    "\004\000\002\007\003\000\002\007\002\000\002\010\003" +
    "\000\002\010\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\025\004\000\002" +
    "\025\004\000\002\013\006\000\002\065\002\000\002\066" +
    "\002\000\002\020\013\000\002\067\002\000\002\070\002" +
    "\000\002\071\002\000\002\016\016\000\002\072\002\000" +
    "\002\031\011\000\002\032\003\000\002\032\002\000\002" +
    "\033\004\000\002\033\004\000\002\034\005\000\002\022" +
    "\003\000\002\022\002\000\002\023\003\000\002\023\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\035\003\000\002\035\003\000\002\040" +
    "\005\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\007\000\002\042" +
    "\007\000\002\042\007\000\002\042\005\000\002\042\003" +
    "\000\002\042\004\000\002\042\005\000\002\042\004\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\073" +
    "\002\000\002\074\002\000\002\043\022\000\002\075\002" +
    "\000\002\076\002\000\002\044\015\000\002\077\002\000" +
    "\002\100\002\000\002\045\024\000\002\046\014\000\002" +
    "\046\002\000\002\047\006\000\002\047\002\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\053\004\000\002\053\005\000" +
    "\002\054\006\000\002\054\010\000\002\050\003\000\002" +
    "\050\003\000\002\003\002\000\002\002\002\000\002\004" +
    "\002\000\002\005\003\000\002\005\003\000\002\055\004" +
    "\000\002\056\003\000\002\057\003\000\002\057\004\000" +
    "\002\037\004\000\002\051\004\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\052\003\000\002\052" +
    "\005\000\002\052\005\000\002\101\002\000\002\061\005" +
    "\000\002\062\004\000\002\102\002\000\002\062\006\000" +
    "\002\060\003\000\002\060\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\016\002\ufffd\004\015\042\007\043\011\070" +
    "\004\074\016\001\002\000\004\055\341\001\002\000\004" +
    "\074\016\001\002\000\004\002\000\001\002\000\004\055" +
    "\330\001\002\000\004\074\016\001\002\000\004\055\040" +
    "\001\002\000\014\002\ufffe\004\015\042\007\043\011\070" +
    "\004\001\002\000\004\074\016\001\002\000\004\074\016" +
    "\001\002\000\004\055\026\001\002\000\064\002\uff83\004" +
    "\uff83\006\uff83\013\uff83\016\uff83\021\uff83\022\uff83\023\uff83" +
    "\026\uff83\030\uff83\031\uff83\032\uff83\042\uff83\043\uff83\044" +
    "\uff83\045\uff83\050\uff83\052\uff83\055\uff83\064\uff83\065\uff83" +
    "\070\uff83\074\016\075\uff83\076\uff83\001\002\000\012\004" +
    "\015\042\007\043\011\070\004\001\002\000\004\002\022" +
    "\001\002\000\014\002\ufffc\004\ufffc\042\ufffc\043\ufffc\070" +
    "\ufffc\001\002\000\004\002\001\001\002\000\014\002\uffff" +
    "\004\015\042\007\043\011\070\004\001\002\000\014\002" +
    "\ufffb\004\ufffb\042\ufffb\043\ufffb\070\ufffb\001\002\000\062" +
    "\002\uff82\004\uff82\006\uff82\013\uff82\016\uff82\021\uff82\022" +
    "\uff82\023\uff82\026\uff82\030\uff82\031\uff82\032\uff82\042\uff82" +
    "\043\uff82\044\uff82\045\uff82\050\uff82\052\uff82\055\uff82\064" +
    "\uff82\065\uff82\070\uff82\075\uff82\076\uff82\001\002\000\004" +
    "\041\027\001\002\000\014\033\032\034\035\035\033\036" +
    "\034\055\031\001\002\000\004\074\ufff4\001\002\000\014" +
    "\032\uffa0\046\uffa0\051\uffa0\055\uffa0\074\uffa0\001\002\000" +
    "\014\032\uffa4\046\uffa4\051\uffa4\055\uffa4\074\uffa4\001\002" +
    "\000\014\032\uffa1\046\uffa1\051\uffa1\055\uffa1\074\uffa1\001" +
    "\002\000\014\032\uffa2\046\uffa2\051\uffa2\055\uffa2\074\uffa2" +
    "\001\002\000\014\032\uffa3\046\uffa3\051\uffa3\055\uffa3\074" +
    "\uffa3\001\002\000\014\002\ufffa\004\ufffa\042\ufffa\043\ufffa" +
    "\070\ufffa\001\002\000\014\002\ufff9\004\ufff9\042\ufff9\043" +
    "\ufff9\070\ufff9\001\002\000\004\050\ufff0\001\002\000\004" +
    "\050\043\001\002\000\004\041\062\001\002\000\010\037" +
    "\047\040\044\051\046\001\002\000\004\055\uff9a\001\002" +
    "\000\004\055\057\001\002\000\006\041\uff9f\074\uff9f\001" +
    "\002\000\004\055\uff9b\001\002\000\006\046\051\051\052" +
    "\001\002\000\006\037\047\040\044\001\002\000\006\041" +
    "\uff9e\074\uff9e\001\002\000\004\055\054\001\002\000\004" +
    "\041\055\001\002\000\014\033\032\034\035\035\033\036" +
    "\034\055\031\001\002\000\006\046\uff9c\051\uff9c\001\002" +
    "\000\004\041\060\001\002\000\014\033\032\034\035\035" +
    "\033\036\034\055\031\001\002\000\006\046\uff9d\051\uff9d" +
    "\001\002\000\014\033\032\034\035\035\033\036\034\055" +
    "\031\001\002\000\004\074\uffef\001\002\000\004\074\016" +
    "\001\002\000\024\004\015\016\070\023\105\026\101\032" +
    "\uffe4\044\067\045\111\055\103\065\071\001\002\000\004" +
    "\074\016\001\002\000\004\055\325\001\002\000\004\055" +
    "\306\001\002\000\004\055\304\001\002\000\004\074\016" +
    "\001\002\000\004\054\uffd9\001\002\000\004\074\016\001" +
    "\002\000\034\004\015\016\070\021\uffe5\022\uffe5\023\105" +
    "\026\101\030\uffe5\031\uffe5\032\uffe5\044\067\045\111\055" +
    "\103\065\071\001\002\000\004\074\016\001\002\000\004" +
    "\032\uffee\001\002\000\004\054\273\001\002\000\022\006" +
    "\uff99\013\uff99\050\uff99\052\uff99\055\uff99\064\uff99\075\uff99" +
    "\076\uff99\001\002\000\004\074\016\001\002\000\010\047" +
    "\uff88\050\125\054\uffda\001\002\000\004\074\uff92\001\002" +
    "\000\004\024\221\001\002\000\034\004\uffe3\016\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\044\uffe3\045\uffe3\055\uffe3\065\uffe3\001\002\000\004\074" +
    "\016\001\002\000\004\074\016\001\002\000\014\052\122" +
    "\055\117\064\121\075\113\076\116\001\002\000\004\074" +
    "\ufff5\001\002\000\046\003\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\017\uffc4\027" +
    "\uffc4\046\uffc4\051\uffc4\054\uffc4\062\uffc4\063\uffc4\071\uffc4" +
    "\074\uffc4\001\002\000\046\003\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\014\uffc0\015\uffc0\017\uffc0" +
    "\027\uffc0\046\uffc0\051\uffc0\054\uffc0\062\uffc0\063\uffc0\071" +
    "\uffc0\074\uffc0\001\002\000\046\003\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\017" +
    "\uffc3\027\uffc3\046\uffc3\051\uffc3\054\uffc3\062\uffc3\063\uffc3" +
    "\071\uffc3\074\uffc3\001\002\000\046\003\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2" +
    "\017\uffc2\027\uffc2\046\uffc2\051\uffc2\054\uffc2\062\uffc2\063" +
    "\uffc2\071\uffc2\074\uffc2\001\002\000\052\003\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\014\uffc1\015" +
    "\uffc1\017\uffc1\027\uffc1\046\uffc1\047\uff88\050\125\051\uffc1" +
    "\054\uffc1\062\uffc1\063\uffc1\071\uffc1\074\uffc1\001\002\000" +
    "\046\003\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\014\uffbf\015\uffbf\017\uffbf\027\uffbf\046\uffbf\051" +
    "\uffbf\054\uffbf\062\uffbf\063\uffbf\071\uffbf\074\uffbf\001\002" +
    "\000\046\003\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011" +
    "\uff95\012\uff95\014\uff95\015\uff95\017\uff95\027\uff95\046\uff95" +
    "\051\uff95\054\uff95\062\uff95\063\uff95\071\uff95\074\uff95\001" +
    "\002\000\046\003\uff96\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\014\uff96\015\uff96\017\uff96\027\uff96\046" +
    "\uff96\051\uff96\054\uff96\062\uff96\063\uff96\071\uff96\074\uff96" +
    "\001\002\000\046\003\uff90\005\uff90\006\uff90\007\uff90\010" +
    "\uff90\011\uff90\012\uff90\014\uff90\015\uff90\017\uff90\027\uff90" +
    "\046\uff90\051\uff90\054\uff90\062\uff90\063\uff90\071\uff90\074" +
    "\uff90\001\002\000\004\047\213\001\002\000\026\003\135" +
    "\006\127\013\130\050\131\051\133\052\122\055\117\064" +
    "\121\075\113\076\116\001\002\000\046\003\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\204\012\205\014\uffc8\015" +
    "\uffc8\017\uffc8\027\uffc8\046\uffc8\051\uffc8\054\uffc8\062\207" +
    "\063\210\071\uffc8\074\uffc8\001\002\000\022\006\uff93\013" +
    "\uff93\050\uff93\052\uff93\055\uff93\064\uff93\075\uff93\076\uff93" +
    "\001\002\000\022\006\127\013\130\050\131\052\122\055" +
    "\117\064\121\075\113\076\116\001\002\000\022\006\127" +
    "\013\130\050\131\052\122\055\117\064\121\075\113\076" +
    "\116\001\002\000\010\003\174\046\175\051\176\001\002" +
    "\000\046\003\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011" +
    "\uff8f\012\uff8f\014\uff8f\015\uff8f\017\uff8f\027\uff8f\046\uff8f" +
    "\051\uff8f\054\uff8f\062\uff8f\063\uff8f\071\uff8f\074\uff8f\001" +
    "\002\000\022\006\127\013\130\050\131\052\122\055\117" +
    "\064\121\075\113\076\116\001\002\000\004\051\172\001" +
    "\002\000\032\003\uff8b\005\150\006\137\007\146\010\142" +
    "\011\140\014\143\015\144\046\uff8b\051\uff8b\054\145\071" +
    "\147\001\002\000\022\006\127\013\130\050\131\052\122" +
    "\055\117\064\121\075\113\076\116\001\002\000\004\012" +
    "\170\001\002\000\022\006\127\013\130\050\131\052\122" +
    "\055\117\064\121\075\113\076\116\001\002\000\022\006" +
    "\127\013\130\050\131\052\122\055\117\064\121\075\113" +
    "\076\116\001\002\000\022\006\uff98\013\uff98\050\uff98\052" +
    "\uff98\055\uff98\064\uff98\075\uff98\076\uff98\001\002\000\022" +
    "\006\uff98\013\uff98\050\uff98\052\uff98\055\uff98\064\uff98\075" +
    "\uff98\076\uff98\001\002\000\022\006\127\013\130\050\131" +
    "\052\122\055\117\064\121\075\113\076\116\001\002\000" +
    "\022\006\127\013\130\050\131\052\122\055\117\064\121" +
    "\075\113\076\116\001\002\000\024\006\127\013\130\050" +
    "\131\052\122\053\152\055\117\064\121\075\113\076\116" +
    "\001\002\000\022\006\127\013\130\050\131\052\122\055" +
    "\117\064\121\075\113\076\116\001\002\000\040\003\uffd3" +
    "\005\uffd3\006\uffd3\007\146\010\142\011\uffd3\014\uffd3\015" +
    "\uffd3\017\uffd3\027\uffd3\046\uffd3\051\uffd3\054\uffd3\071\uffd3" +
    "\074\uffd3\001\002\000\004\074\016\001\002\000\040\003" +
    "\uffd1\005\uffd1\006\uffd1\007\146\010\142\011\uffd1\014\uffd1" +
    "\015\uffd1\017\uffd1\027\uffd1\046\uffd1\051\uffd1\054\uffd1\071" +
    "\uffd1\074\uffd1\001\002\000\022\006\127\013\130\050\131" +
    "\052\122\055\117\064\121\075\113\076\116\001\002\000" +
    "\040\003\uffca\005\150\006\137\007\146\010\142\011\140" +
    "\014\143\015\144\017\uffca\027\uffca\046\uffca\051\uffca\054" +
    "\145\071\147\074\uffca\001\002\000\040\003\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\014\uffd0\015\uffd0\017" +
    "\uffd0\027\uffd0\046\uffd0\051\uffd0\054\uffd0\071\uffd0\074\uffd0" +
    "\001\002\000\040\003\uffce\005\150\006\137\007\146\010" +
    "\142\011\uffce\014\uffce\015\uffce\017\uffce\027\uffce\046\uffce" +
    "\051\uffce\054\uffce\071\147\074\uffce\001\002\000\022\006" +
    "\uff99\013\uff99\050\uff99\052\uff99\055\uff99\064\uff99\075\uff99" +
    "\076\uff99\001\002\000\022\006\127\013\130\050\131\052" +
    "\122\055\117\064\121\075\113\076\116\001\002\000\040" +
    "\003\uffcb\005\150\006\137\007\146\010\142\011\140\014" +
    "\143\015\uffcb\017\uffcb\027\uffcb\046\uffcb\051\uffcb\054\145" +
    "\071\147\074\uffcb\001\002\000\022\006\uff99\013\uff99\050" +
    "\uff99\052\uff99\055\uff99\064\uff99\075\uff99\076\uff99\001\002" +
    "\000\022\006\127\013\130\050\131\052\122\055\117\064" +
    "\121\075\113\076\116\001\002\000\040\003\uffcc\005\150" +
    "\006\137\007\146\010\142\011\140\014\uffcc\015\uffcc\017" +
    "\uffcc\027\uffcc\046\uffcc\051\uffcc\054\145\071\147\074\uffcc" +
    "\001\002\000\040\003\uffcf\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\014\uffcf\015\uffcf\017\uffcf\027\uffcf\046\uffcf" +
    "\051\uffcf\054\uffcf\071\uffcf\074\uffcf\001\002\000\040\003" +
    "\uffcd\005\150\006\137\007\146\010\142\011\140\014\143" +
    "\015\144\017\uffcd\027\uffcd\046\uffcd\051\uffcd\054\145\071" +
    "\147\074\uffcd\001\002\000\022\006\uff94\013\uff94\050\uff94" +
    "\052\uff94\055\uff94\064\uff94\075\uff94\076\uff94\001\002\000" +
    "\040\003\uffd2\005\uffd2\006\uffd2\007\146\010\142\011\uffd2" +
    "\014\uffd2\015\uffd2\017\uffd2\027\uffd2\046\uffd2\051\uffd2\054" +
    "\uffd2\071\uffd2\074\uffd2\001\002\000\046\003\uff8c\005\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\014\uff8c\015" +
    "\uff8c\017\uff8c\027\uff8c\046\uff8c\051\uff8c\054\uff8c\062\uff8c" +
    "\063\uff8c\071\uff8c\074\uff8c\001\002\000\040\003\uffc5\005" +
    "\150\006\137\007\146\010\142\011\140\014\143\015\144" +
    "\017\uffc5\027\uffc5\046\uffc5\051\uffc5\054\145\071\147\074" +
    "\uffc5\001\002\000\046\003\uff8d\005\uff8d\006\uff8d\007\uff8d" +
    "\010\uff8d\011\uff8d\012\uff8d\014\uff8d\015\uff8d\017\uff8d\027" +
    "\uff8d\046\uff8d\051\uff8d\054\uff8d\062\uff8d\063\uff8d\071\uff8d" +
    "\074\uff8d\001\002\000\024\003\177\006\127\013\130\050" +
    "\131\052\122\055\117\064\121\075\113\076\116\001\002" +
    "\000\046\003\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011" +
    "\uff8e\012\uff8e\014\uff8e\015\uff8e\017\uff8e\027\uff8e\046\uff8e" +
    "\051\uff8e\054\uff8e\062\uff8e\063\uff8e\071\uff8e\074\uff8e\001" +
    "\002\000\010\003\uff89\046\uff89\051\uff89\001\002\000\032" +
    "\003\uff8a\005\150\006\137\007\146\010\142\011\140\014" +
    "\143\015\144\046\uff8a\051\uff8a\054\145\071\147\001\002" +
    "\000\026\005\150\006\137\007\146\010\142\011\140\014" +
    "\143\015\144\051\202\054\145\071\147\001\002\000\040" +
    "\003\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\014" +
    "\uffc9\015\uffc9\017\uffc9\027\uffc9\046\uffc9\051\uffc9\054\uffc9" +
    "\071\uffc9\074\uffc9\001\002\000\040\003\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\014\uffc7\015\uffc7\017\uffc7" +
    "\027\uffc7\046\uffc7\051\uffc7\054\uffc7\071\uffc7\074\uffc7\001" +
    "\002\000\014\052\uffd7\055\uffd7\064\uffd7\075\uffd7\076\uffd7" +
    "\001\002\000\014\052\uffd6\055\uffd6\064\uffd6\075\uffd6\076" +
    "\uffd6\001\002\000\014\052\122\055\117\064\121\075\113" +
    "\076\116\001\002\000\014\052\uffd4\055\uffd4\064\uffd4\075" +
    "\uffd4\076\uffd4\001\002\000\014\052\uffd5\055\uffd5\064\uffd5" +
    "\075\uffd5\076\uffd5\001\002\000\040\003\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\014\uffc6\015\uffc6\017\uffc6" +
    "\027\uffc6\046\uffc6\051\uffc6\054\uffc6\071\uffc6\074\uffc6\001" +
    "\002\000\046\003\uff87\005\uff87\006\uff87\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\014\uff87\015\uff87\017\uff87\027\uff87\046" +
    "\uff87\051\uff87\054\uff87\062\uff87\063\uff87\071\uff87\074\uff87" +
    "\001\002\000\004\055\214\001\002\000\050\003\uff86\005" +
    "\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86\014\uff86" +
    "\015\uff86\017\uff86\027\uff86\046\uff86\047\uff85\051\uff86\054" +
    "\uff86\062\uff86\063\uff86\071\uff86\074\uff86\001\002\000\004" +
    "\047\213\001\002\000\046\003\uff84\005\uff84\006\uff84\007" +
    "\uff84\010\uff84\011\uff84\012\uff84\014\uff84\015\uff84\017\uff84" +
    "\027\uff84\046\uff84\051\uff84\054\uff84\062\uff84\063\uff84\071" +
    "\uff84\074\uff84\001\002\000\034\004\uffde\016\uffde\021\uffde" +
    "\022\uffde\023\uffde\026\uffde\030\uffde\031\uffde\032\uffde\044" +
    "\uffde\045\uffde\055\uffde\065\uffde\001\002\000\034\004\uffdc" +
    "\016\uffdc\021\uffdc\022\uffdc\023\uffdc\026\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\044\uffdc\045\uffdc\055\uffdc\065\uffdc\001\002" +
    "\000\022\006\uff99\013\uff99\050\uff99\052\uff99\055\uff99\064" +
    "\uff99\075\uff99\076\uff99\001\002\000\022\006\127\013\130" +
    "\050\131\052\122\055\117\064\121\075\113\076\116\001" +
    "\002\000\026\005\150\006\137\007\146\010\142\011\140" +
    "\014\143\015\144\054\145\071\147\074\016\001\002\000" +
    "\024\004\uff99\016\uff99\022\uff99\023\uff99\026\uff99\044\uff99" +
    "\045\uff99\055\uff99\065\uff99\001\002\000\024\004\uffae\016" +
    "\uffae\022\uffae\023\uffae\026\uffae\044\uffae\045\uffae\055\uffae" +
    "\065\uffae\001\002\000\024\004\015\016\070\022\uffe4\023" +
    "\105\026\101\044\067\045\111\055\103\065\071\001\002" +
    "\000\004\022\uff97\001\002\000\004\022\uffad\001\002\000" +
    "\004\022\232\001\002\000\004\074\uffac\001\002\000\034" +
    "\004\uffdb\016\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\044\uffdb\045\uffdb\055\uffdb\065\uffdb" +
    "\001\002\000\022\006\127\013\130\050\131\052\122\055" +
    "\117\064\121\075\113\076\116\001\002\000\026\005\150" +
    "\006\137\007\146\010\142\011\140\014\143\015\144\027" +
    "\236\054\145\071\147\001\002\000\004\074\uffab\001\002" +
    "\000\004\074\016\001\002\000\030\004\uff98\016\uff98\023" +
    "\uff98\026\uff98\030\uff98\031\uff98\032\uff98\044\uff98\045\uff98" +
    "\055\uff98\065\uff98\001\002\000\030\004\uff99\016\uff99\023" +
    "\uff99\026\uff99\030\uff99\031\uff99\032\uff99\044\uff99\045\uff99" +
    "\055\uff99\065\uff99\001\002\000\030\004\015\016\070\023" +
    "\105\026\101\030\uffe4\031\uffe4\032\uffe4\044\067\045\111" +
    "\055\103\065\071\001\002\000\010\030\uffaa\031\uffaa\032" +
    "\uffaa\001\002\000\010\030\uff98\031\uff98\032\uff98\001\002" +
    "\000\010\030\uff99\031\uff99\032\uff99\001\002\000\010\030" +
    "\uffa7\031\247\032\uffa7\001\002\000\022\006\uff98\013\uff98" +
    "\050\uff98\052\uff98\055\uff98\064\uff98\075\uff98\076\uff98\001" +
    "\002\000\006\030\uff98\032\uff98\001\002\000\006\030\253" +
    "\032\uffa5\001\002\000\004\032\257\001\002\000\004\074" +
    "\016\001\002\000\024\004\uff98\016\uff98\023\uff98\026\uff98" +
    "\032\uff98\044\uff98\045\uff98\055\uff98\065\uff98\001\002\000" +
    "\024\004\015\016\070\023\105\026\101\032\uffe4\044\067" +
    "\045\111\055\103\065\071\001\002\000\004\032\uffa6\001" +
    "\002\000\004\026\260\001\002\000\004\074\uff98\001\002" +
    "\000\004\074\uffa9\001\002\000\022\006\127\013\130\050" +
    "\131\052\122\055\117\064\121\075\113\076\116\001\002" +
    "\000\026\005\150\006\137\007\146\010\142\011\140\014" +
    "\143\015\144\027\264\054\145\071\147\001\002\000\004" +
    "\074\016\001\002\000\030\004\uff98\016\uff98\023\uff98\026" +
    "\uff98\030\uff98\031\uff98\032\uff98\044\uff98\045\uff98\055\uff98" +
    "\065\uff98\001\002\000\030\004\uff99\016\uff99\023\uff99\026" +
    "\uff99\030\uff99\031\uff99\032\uff99\044\uff99\045\uff99\055\uff99" +
    "\065\uff99\001\002\000\030\004\015\016\070\023\105\026" +
    "\101\030\uffe4\031\uffe4\032\uffe4\044\067\045\111\055\103" +
    "\065\071\001\002\000\010\030\uff98\031\uff98\032\uff98\001" +
    "\002\000\010\030\uffa7\031\247\032\uffa7\001\002\000\006" +
    "\030\uffa8\032\uffa8\001\002\000\022\006\127\013\130\050" +
    "\131\052\122\055\117\064\121\075\113\076\116\001\002" +
    "\000\026\005\150\006\137\007\146\010\142\011\140\014" +
    "\143\015\144\054\145\071\147\074\uffd8\001\002\000\004" +
    "\032\276\001\002\000\004\043\277\001\002\000\004\074" +
    "\uffed\001\002\000\034\004\uffe1\016\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\044\uffe1\045" +
    "\uffe1\055\uffe1\065\uffe1\001\002\000\034\004\uffe2\016\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\026\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\044\uffe2\045\uffe2\055\uffe2\065\uffe2\001\002\000\034" +
    "\004\uffdd\016\uffdd\021\uffdd\022\uffdd\023\uffdd\026\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\044\uffdd\045\uffdd\055\uffdd\065\uffdd" +
    "\001\002\000\034\004\uffdf\016\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\044\uffdf\045\uffdf" +
    "\055\uffdf\065\uffdf\001\002\000\004\050\125\001\002\000" +
    "\004\074\uff91\001\002\000\004\054\307\001\002\000\022" +
    "\006\127\013\130\050\131\052\122\055\117\064\121\075" +
    "\113\076\116\001\002\000\026\005\150\006\137\007\146" +
    "\010\142\011\140\014\143\015\144\017\uff98\054\145\071" +
    "\147\001\002\000\004\017\312\001\002\000\022\006\127" +
    "\013\130\050\131\052\122\055\117\064\121\075\113\076" +
    "\116\001\002\000\026\005\150\006\137\007\146\010\142" +
    "\011\140\014\143\015\144\054\145\071\147\074\uff98\001" +
    "\002\000\004\074\016\001\002\000\024\004\uffb1\016\uffb1" +
    "\021\uffb1\023\uffb1\026\uffb1\044\uffb1\045\uffb1\055\uffb1\065" +
    "\uffb1\001\002\000\024\004\uff99\016\uff99\021\uff99\023\uff99" +
    "\026\uff99\044\uff99\045\uff99\055\uff99\065\uff99\001\002\000" +
    "\024\004\015\016\070\021\uffe4\023\105\026\101\044\067" +
    "\045\111\055\103\065\071\001\002\000\004\021\321\001" +
    "\002\000\004\055\322\001\002\000\004\074\uffb0\001\002" +
    "\000\004\074\uff97\001\002\000\004\074\uffaf\001\002\000" +
    "\004\074\ufff6\001\002\000\034\004\uffe0\016\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\044" +
    "\uffe0\045\uffe0\055\uffe0\065\uffe0\001\002\000\014\002\ufff7" +
    "\004\ufff7\042\ufff7\043\ufff7\070\ufff7\001\002\000\004\050" +
    "\ufff3\001\002\000\004\050\043\001\002\000\004\074\ufff2" +
    "\001\002\000\004\074\016\001\002\000\024\004\015\016" +
    "\070\023\105\026\101\032\uffe4\044\067\045\111\055\103" +
    "\065\071\001\002\000\004\032\336\001\002\000\004\042" +
    "\337\001\002\000\004\074\ufff1\001\002\000\014\002\ufff8" +
    "\004\ufff8\042\ufff8\043\ufff8\070\ufff8\001\002\000\004\074" +
    "\016\001\002\000\006\032\uffec\055\uffec\001\002\000\006" +
    "\032\uffe9\055\344\001\002\000\004\041\354\001\002\000" +
    "\004\074\016\001\002\000\006\032\uffea\055\344\001\002" +
    "\000\004\032\350\001\002\000\004\070\351\001\002\000" +
    "\004\074\uffeb\001\002\000\006\032\uffe7\055\uffe7\001\002" +
    "\000\006\032\uffe8\055\uffe8\001\002\000\014\033\032\034" +
    "\035\035\033\036\034\055\031\001\002\000\010\032\uffe6" +
    "\055\uffe6\074\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\024\006\017\007\005\010\011\011\020\013" +
    "\013\016\004\020\012\031\007\060\016\001\001\000\002" +
    "\001\001\000\004\060\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\326\001\001\000\002\001\001" +
    "\000\014\011\023\013\013\016\004\020\012\031\007\001" +
    "\001\000\004\060\036\001\001\000\004\060\035\001\001" +
    "\000\002\001\001\000\004\060\024\001\001\000\016\010" +
    "\022\011\020\013\013\016\004\020\012\031\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\023\013\013\016\004\020\012\031\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\040\001\001\000\004\053\041\001\001\000\002\001" +
    "\001\000\006\050\044\054\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\060" +
    "\001\001\000\002\001\001\000\004\064\062\001\001\000" +
    "\004\070\063\001\001\000\004\060\064\001\001\000\034" +
    "\013\075\022\076\023\074\024\105\025\073\035\077\037" +
    "\103\040\106\043\065\044\071\045\107\057\101\061\072" +
    "\001\001\000\004\060\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\304\001\001\000\004\060\302" +
    "\001\001\000\002\001\001\000\004\060\301\001\001\000" +
    "\030\013\075\024\300\025\073\035\077\037\103\040\106" +
    "\043\065\044\071\045\107\057\101\061\072\001\001\000" +
    "\004\060\277\001\001\000\004\071\274\001\001\000\002" +
    "\001\001\000\004\003\233\001\001\000\004\060\232\001" +
    "\001\000\006\051\122\101\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\217\001" +
    "\001\000\004\060\216\001\001\000\012\005\114\036\111" +
    "\037\113\061\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\122\101\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\211\001\001\000\020\005\114\036\125\037\113\042" +
    "\135\052\131\056\133\061\117\001\001\000\004\063\205" +
    "\001\001\000\002\001\001\000\016\005\114\036\125\037" +
    "\113\042\202\056\133\061\117\001\001\000\016\005\114" +
    "\036\125\037\113\042\200\056\133\061\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\114\036\125" +
    "\037\113\042\172\056\133\061\117\001\001\000\002\001" +
    "\001\000\004\055\140\001\001\000\016\005\114\036\125" +
    "\037\113\042\170\056\133\061\117\001\001\000\002\001" +
    "\001\000\016\005\114\036\125\037\113\042\166\056\133" +
    "\061\117\001\001\000\016\005\114\036\125\037\113\042" +
    "\165\056\133\061\117\001\001\000\004\002\162\001\001" +
    "\000\004\002\157\001\001\000\016\005\114\036\125\037" +
    "\113\042\156\056\133\061\117\001\001\000\016\005\114" +
    "\036\125\037\113\042\155\056\133\061\117\001\001\000" +
    "\016\005\114\036\125\037\113\042\152\056\133\061\117" +
    "\001\001\000\016\005\114\036\125\037\113\042\150\056" +
    "\133\061\117\001\001\000\004\055\140\001\001\000\004" +
    "\060\153\001\001\000\004\055\140\001\001\000\016\005" +
    "\114\036\125\037\113\042\154\056\133\061\117\001\001" +
    "\000\004\055\140\001\001\000\004\055\140\001\001\000" +
    "\004\055\140\001\001\000\004\003\160\001\001\000\016" +
    "\005\114\036\125\037\113\042\161\056\133\061\117\001" +
    "\001\000\004\055\140\001\001\000\004\003\163\001\001" +
    "\000\016\005\114\036\125\037\113\042\164\056\133\061" +
    "\117\001\001\000\004\055\140\001\001\000\004\055\140" +
    "\001\001\000\004\055\140\001\001\000\002\001\001\000" +
    "\004\055\140\001\001\000\002\001\001\000\004\055\140" +
    "\001\001\000\002\001\001\000\016\005\114\036\125\037" +
    "\113\042\177\056\133\061\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\140\001\001\000\004\055" +
    "\140\001\001\000\002\001\001\000\004\055\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\114\036" +
    "\210\037\113\061\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\214\001\001\000\004\062\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\221\001\001\000\016\005\114\036\125\037\113" +
    "\042\222\056\133\061\117\001\001\000\006\055\140\060" +
    "\223\001\001\000\004\003\224\001\001\000\004\075\225" +
    "\001\001\000\034\013\075\022\226\023\074\024\105\025" +
    "\073\035\077\037\103\040\106\043\065\044\071\045\107" +
    "\057\101\061\072\001\001\000\004\004\227\001\001\000" +
    "\004\076\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\114\036\125\037\113\042" +
    "\234\056\133\061\117\001\001\000\004\055\140\001\001" +
    "\000\004\077\236\001\001\000\004\060\237\001\001\000" +
    "\004\002\240\001\001\000\004\003\241\001\001\000\034" +
    "\013\075\022\242\023\074\024\105\025\073\035\077\037" +
    "\103\040\106\043\065\044\071\045\107\057\101\061\072" +
    "\001\001\000\004\100\243\001\001\000\004\002\244\001" +
    "\001\000\004\003\245\001\001\000\004\046\247\001\001" +
    "\000\004\002\261\001\001\000\004\002\250\001\001\000" +
    "\004\047\251\001\001\000\002\001\001\000\004\060\253" +
    "\001\001\000\004\002\254\001\001\000\034\013\075\022" +
    "\255\023\074\024\105\025\073\035\077\037\103\040\106" +
    "\043\065\044\071\045\107\057\101\061\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\260\001\001" +
    "\000\002\001\001\000\016\005\114\036\125\037\113\042" +
    "\262\056\133\061\117\001\001\000\004\055\140\001\001" +
    "\000\004\060\264\001\001\000\004\002\265\001\001\000" +
    "\004\003\266\001\001\000\034\013\075\022\267\023\074" +
    "\024\105\025\073\035\077\037\103\040\106\043\065\044" +
    "\071\045\107\057\101\061\072\001\001\000\004\002\270" +
    "\001\001\000\004\046\271\001\001\000\002\001\001\000" +
    "\016\005\114\036\125\037\113\042\273\056\133\061\117" +
    "\001\001\000\004\055\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\114\036\125\037\113\042\307\056\133\061\117\001" +
    "\001\000\006\002\310\055\140\001\001\000\002\001\001" +
    "\000\016\005\114\036\125\037\113\042\312\056\133\061" +
    "\117\001\001\000\006\002\313\055\140\001\001\000\004" +
    "\060\314\001\001\000\004\073\315\001\001\000\004\003" +
    "\316\001\001\000\034\013\075\022\317\023\074\024\105" +
    "\025\073\035\077\037\103\040\106\043\065\044\071\045" +
    "\107\057\101\061\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\322\001\001\000\004\004\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\330\001\001\000\004\053" +
    "\331\001\001\000\004\066\332\001\001\000\004\060\333" +
    "\001\001\000\034\013\075\022\334\023\074\024\105\025" +
    "\073\035\077\037\103\040\106\043\065\044\071\045\107" +
    "\057\101\061\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\341" +
    "\001\001\000\004\072\342\001\001\000\010\032\346\033" +
    "\345\034\344\001\001\000\002\001\001\000\004\060\352" +
    "\001\001\000\004\034\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\354\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VbParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VbParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VbParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	private VbLexer lexer;
	private ArrayList<VbSyntaxError> errLst = new ArrayList<>();

	public void msg(Object str){
		javax.swing.JOptionPane.showMessageDialog(null, str.toString());
	}
	public VbParser(VbLexer lex) {
		super(lex);
		this.lexer = lex;
	}

	public void user_init(){
		this.errLst = new ArrayList<>();
		SymTable.init();
		CuadTable.init();
	}

	public Symbol getCurToken(){
		return this.cur_token;
	}

	public void report_fatal_error(String message, Object info) throws Exception{
		done_parsing();
		report_error(message, info);
		throw new Exception("Can't recover from previous error(s)");
	}

	public void report_error(String message, Object info){
		System.err.print(message);
		System.err.flush();
		if ((info instanceof Symbol)){
		  if (((Symbol)info).left != -1){
			System.err.println(" at character " + ((Symbol)info).left + " of input");
		  }else{
			System.err.println("");
		  }
		}else{
		  System.err.println("");
	   }
	}

	public void syntax_error(Symbol cur_token){
		System.out.println("syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("1cur_token '" + cur_token + "' no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
		System.out.println("unrec_syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error fatal en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("2unrec cur_token no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	protected int error_sync_size(){
		return 3;
	}
	
	public void addErr(String msg, int left, int right, int offset, int length){
		this.errLst.add(new VbSyntaxError(msg, left, right, offset, length));
	}

	public void appendErr(String msg){
		if (!this.errLst.isEmpty()){
			int index = this.errLst.size() - 1;
			this.errLst.get(index).message += ": " + msg;
		}
	}

	public ArrayList getErrLst(){
		return this.errLst;
	}

	public void setLexer(VbLexer lexer){
		this.lexer = lexer;
	}

	public MyToken tokenAt(java.util.Stack stack, int top, int offset){
		return (MyToken)stack.elementAt(top + offset);
	}

	public MyToken toMyToken(Object o){
		return (MyToken)o;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$VbParser$actions {


    ArrayList<Integer> lstFal;

  private final VbParser parser;

  /** Constructor */
  CUP$VbParser$actions(VbParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$VbParser$do_action(
    int                        CUP$VbParser$act_num,
    java_cup.runtime.lr_parser CUP$VbParser$parser,
    java.util.Stack            CUP$VbParser$stack,
    int                        CUP$VbParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VbParser$result;

      /* select the action based on the action number */
      switch (CUP$VbParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LineEnd ::= FinDeLinea LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("LineEnd",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LineEnd ::= FinDeLinea 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("LineEnd",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PropChain ::= Punto Id NT$13 PropChain 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int propChainleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propChainright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object propChain = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = propChain; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PropChain",48, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$13 ::= 
            {
              Object RESULT =null;

								if (SymTable.curProp != null){
									String tipoCurProp = SymTable.curProp.tipo;
									TypeStruct t = SymTable.curScope.findTypeStruct(tipoCurProp);

									if (t == null || SymTable.isPrimitive(tipoCurProp)){
										MyToken myid = new MyToken(sym.Id, SymTable.curProp.linea, SymTable.curProp.columna, SymTable.curProp.offset);
										parser.syntax_error(myid);
										parser.appendErr("\"" + tipoCurProp + "\" no es un Type");
										SymTable.curProp = null;
									}else{
										MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
										Variable v = t.findProp(myid.value.toString());
										if (v == null){
											parser.syntax_error(myid);
											parser.appendErr("Type \"" + t.id + "\" no tiene una propiedad llamada \"" + myid.value.toString() + "\"");
											SymTable.curProp = null;
										}else{
											if (!SymTable.isPrimitive(v.tipo)){
												t = SymTable.curScope.findTypeStruct(v.tipo);

												if (t == null || SymTable.isPrimitive(tipoCurProp)){
													parser.syntax_error(myid);
													parser.appendErr("\"" + myid.value.toString() + "\" no es un Type");
													SymTable.curProp = null;
												}else{
													SymTable.curProp = new Property(v.id, v.linea, v.columna, v.offset, v.tipo);
												}
											}else{
												parser.syntax_error(myid);
												parser.appendErr("\"" + myid.value.toString() + "\" no es un Type");
												SymTable.curProp = null;
											}
										}
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$13",64, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PropChain ::= Punto Id 
            {
              Object RESULT =null;
		
								if (SymTable.curProp != null){
									String tipoCurProp = SymTable.curProp.tipo;
									TypeStruct t = SymTable.curScope.findTypeStruct(tipoCurProp);

									if (t == null || SymTable.isPrimitive(tipoCurProp)){
										MyToken myid = new MyToken(sym.Id, SymTable.curProp.linea, SymTable.curProp.columna, SymTable.curProp.offset);
										parser.syntax_error(myid);
										parser.appendErr("\"" + tipoCurProp + "\" no es un Type");
										SymTable.curProp = null;
									}else{
										MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
										Variable v = t.findProp(myid.value.toString());
										if (v == null){
											parser.syntax_error(myid);
											parser.appendErr("Type \"" + t.id + "\" no tiene una propiedad llamada \"" + myid.value.toString() + "\"");
											SymTable.curProp = null;
										}else{
											RESULT = v.tipo;
										}
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PropChain",48, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Property ::= Id NT$12 PropChain 
            {
              Termino RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Termino) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int propChainleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propChainright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object propChain = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								RESULT = new Termino(myid.value.toString(), myid.left, myid.right, myid.offset, propChain.toString());
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Property",47, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$12 ::= 
            {
              Termino RESULT =null;

								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									if (!SymTable.isPrimitive(v.tipo)){
										Property p = new Property(v.id, v.linea, v.columna, v.offset, v.tipo);
										SymTable.curProp = p;
									}else{
										parser.syntax_error(myid);
										parser.appendErr("La variable \"" + v.id + "\" no es un Type4");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$12",63, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ArgLst ::= ArgLst Coma error 
            {
              ArrayList<Expresion> RESULT =null;
		int argLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int argLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Expresion> argLst = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		 
								parser.appendErr("Se esperaba Argumento"); 
								RESULT = argLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",40, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ArgLst ::= ArgLst Coma Expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int argLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int argLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Expresion> argLst = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								argLst.add(e);
								RESULT = argLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",40, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ArgLst ::= Expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								ArrayList<Expresion> args = new ArrayList<>();
								args.add(e);
								RESULT = args;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",40, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Args ::= ParI error ParD 
            {
              ArrayList<Expresion> RESULT =null;
		 parser.appendErr("Argumentos invalidos"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Args ::= ParI ArgLst error 
            {
              ArrayList<Expresion> RESULT =null;
		 parser.appendErr("Se esperaba ')'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Args ::= ParI ArgLst ParD 
            {
              ArrayList<Expresion> RESULT =null;
		int argLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int argLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Expresion> argLst = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		
								RESULT = argLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Args ::= ParI ParD 
            {
              ArrayList<Expresion> RESULT =null;
		
								RESULT = new ArrayList<Expresion>();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FuncEval ::= Id Args 
            {
              Termino RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Expresion> args = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
								Funcion f = SymTable.curScope.findFunc(myid.value.toString());
                                                                Sub s = SymTable.curScope.findSub(myid.value.toString());
								if (f == null && s == null){
									parser.syntax_error(myid);
									parser.appendErr("La funcion \"" + myid.value.toString() + "\" no ha sido declarada");
									RESULT = null;
								}else{
                                                                    if(f != null){
                                                                        CuadTable.gen("Call",myid.value.toString(),f.tipo);
                                                                        if (f.parametros.size() != args.size()){
										parser.syntax_error(myid);
										parser.appendErr("La funcion \"" + myid.value.toString() + "\" recibe " + f.parametros.size() + " argumentos. Se pasaron " + args.size());
										RESULT = null;
									}else{
										for (int i = 0; i < f.parametros.size(); i++){
											if (!f.parametros.get(i).tipo.equalsIgnoreCase(args.get(i).tipo)){
												parser.syntax_error(myid);
												parser.appendErr("El argumento en la posicion " + (i + 1) + " es \"" + args.get(i).tipo + "\", debe ser \"" + f.parametros.get(i).tipo);
											}
										}
									}
                                                                        RESULT = new Termino(myid.value.toString(), myid.left, myid.right, myid.offset, f.tipo, CuadTable.newTemp());
                                                                    }else{
                                                                        CuadTable.gen("call",myid.value.toString(),"void");   // pendientes del tipo
                                                                        if (s.parametros.size() != args.size()){
										parser.syntax_error(myid);
										parser.appendErr("La funcion \"" + myid.value.toString() + "\" recibe " + s.parametros.size() + " argumentos. Se pasaron " + args.size());
										RESULT = null;
									}else{
										for (int i = 0; i < s.parametros.size(); i++){
											if (!s.parametros.get(i).tipo.equalsIgnoreCase(args.get(i).tipo)){
												parser.syntax_error(myid);
												parser.appendErr("El argumento en la posicion " + (i + 1) + " es \"" + args.get(i).tipo + "\", debe ser \"" + s.parametros.get(i).tipo);
											}
										}
									}
                                                                        RESULT = new Termino(myid.value.toString(), myid.left, myid.right, myid.offset, s.tipo, CuadTable.newTemp());
                                                                    }
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncEval",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // MethodCall ::= Call FuncEval 
            {
              Simbolo RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("MethodCall",45, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MethodCall ::= FuncEval 
            {
              Simbolo RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("MethodCall",45, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Negativo ::= Menos 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Negativo",44, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Distinto ::= Menor Mayor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Distinto",43, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BoolLiteral ::= False 
            {
              Literal RESULT =null;
		
								MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								RESULT = new Literal("false", tok.left, tok.right, tok.offset, "boolean", "0");
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",3, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BoolLiteral ::= True 
            {
              Literal RESULT =null;
		
								MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								RESULT = new Literal("true", tok.left, tok.right, tok.offset, "boolean", "1");
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",3, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // N ::= 
            {
              ArrayList<Integer> RESULT =null;
		 
								RESULT = CuadTable.makeList(CuadTable.sigCuad);
								CuadTable.gen("goto", "");
							
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("N",2, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // M ::= 
            {
              Integer RESULT =null;
		 RESULT = CuadTable.sigCuad; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("M",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= 
            {
              Integer RESULT =null;
		 RESULT = CuadTable.sigCuad;
                                                       CuadTable.gen("_etiq"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PassMech ::= ByRef 
            {
              Object RESULT =null;
		int byRefleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int byRefright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object byRef = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = byRef.toString().toLowerCase(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PassMech",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PassMech ::= ByVal 
            {
              Object RESULT =null;
		int byValleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int byValright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object byVal = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = byVal.toString().toLowerCase(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PassMech",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ParamLst ::= ParamLst Coma PassMech Id As Tipo 
            {
              ArrayList<Parametro> RESULT =null;
		int paramLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int paramLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		ArrayList<Parametro> paramLst = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int passMechleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int passMechright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object passMech = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
                                                                CuadTable.gen("param",myid.value.toString());
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",42, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ParamLst ::= PassMech Id As Tipo 
            {
              ArrayList<Parametro> RESULT =null;
		int passMechleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int passMechright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object passMech = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
                                                                CuadTable.gen("param",myid.value.toString());
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",42, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Params ::= ParI ParamLst ParD 
            {
              ArrayList<Parametro> RESULT =null;
		int paramLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int paramLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Parametro> paramLst = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",41, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Params ::= ParI ParD 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",41, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Tipo ::= Id 
            {
              MyToken RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",50, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Tipo ::= Char 
            {
              MyToken RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",50, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Tipo ::= String 
            {
              MyToken RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",50, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Tipo ::= Boolean 
            {
              MyToken RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",50, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Tipo ::= Integer 
            {
              MyToken RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",50, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ElseOpt ::= 
            {
              Integer RESULT =null;
		 RESULT = null; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseOpt",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ElseOpt ::= Else LineEnd M Block 
            {
              Integer RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		 RESULT = m; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseOpt",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ElseIfs ::= 
            {
              Simbolo RESULT =null;
		 RESULT = null; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseIfs",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ElseIfs ::= ElseIf M Expresion Then LineEnd M E Block M ElseIfs 
            {
              Simbolo RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Integer m3 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Simbolo e2 = (Simbolo)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		CuadTable.backpatch(e.lstVerd,m2.toString()); 
                                                                                                    Simbolo sim = new Simbolo("",0,0,0,"");
                                                                                                    if (e2 != null){
                                                                                                    CuadTable.backpatch(e.lstFals,m3.toString());
                                                                                                    sim.lstSig = e2.lstSig;
                                                                                                    }else{
                                                                                                    sim.lstSig = e.lstFals;
                                                                                                    }
                                                                                                    RESULT = sim;
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseIfs",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IfStmt ::= If E Expresion Then NT$10 LineEnd M E Block NT$11 M E ElseIfs M ElseOpt End If M 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-15)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-15)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-15)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-12)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-12)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).value;
		int m5left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).left;
		int m5right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).right;
		Integer m5 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).value;
		int elseIfsleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int elseIfsright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Simbolo elseIfs = (Simbolo)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int m4left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int m4right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Integer m4 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int elseOptleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int elseOptright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Integer elseOpt = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								//Statement s = new Statement("", 0, 0, 0, "", "");
								//s.lstSig = CuadTable.merge(e.lstFals, block.lstSig);
								//parser.msg("generando if=");
								//CuadTable.gen("if=", e.lugar, "1", m.toString());
								//CuadTable.backpatch(e.lstVerd, m1);
								//CuadTable.backpatch(n, m2);
								
								if (elseIfs != null) {
                                                                System.out.println("rrrrrrrrrrrrrrrrrrrrr"+e.lstFals);
									CuadTable.backpatch(e.lstFals, m5.toString());
                                                                        CuadTable.backpatch(elseIfs.lstSig,m4.toString());
									//CuadTable.backpatch(elseIfs.lstSig, m2);
									if (elseOpt != null){
										CuadTable.backpatch(elseIfs.lstFals, m4.toString());
									}else{
										CuadTable.backpatch(elseIfs.lstFals, m2.toString());
									}
								}else if (elseOpt != null){
									CuadTable.backpatch(e.lstFals, m4.toString());
								}else{
									CuadTable.backpatch(e.lstFals, m2.toString());
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("IfStmt",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-17)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;

                                                                CuadTable.backpatch(e.lstVerd, m1.toString());
                                                                //RESULT = CuadTable.merge(e.lstFals,b.lstSig);
                                                 SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$11",62, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$10 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

								MyToken ifTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);
								SymTable.createSubScope("If" + SymTable.blockName(), ifTok.left, ifTok.right, ifTok.offset);
                                                                Simbolo nuevo = new Simbolo("",0,0,0,"");
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$10",61, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DoWhile ::= Do While E Expresion LineEnd E NT$8 Block N NT$9 Loop 
            {
              Simbolo RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Simbolo) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int et1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).right;
		Integer et1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Integer et2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("DoWhile",34, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-10)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$9 ::= 
            {
              Simbolo RESULT =(Simbolo) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int et1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		Integer et1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Integer et2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;

								SymTable.endScope();
                                                                CuadTable.backpatch(n,et1.toString());
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$9",60, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$8 ::= 
            {
              Simbolo RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Integer et1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Integer et2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;

                                                                Simbolo nuevo = new Simbolo("",0,0,0,"");
								MyToken doTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4);
								SymTable.createSubScope("Do" + SymTable.blockName(), doTok.left, doTok.right, doTok.offset);
                                                                CuadTable.backpatch(e1.lstVerd,et2.toString());
                                                                nuevo.lstSig = e1.lstFals;
                                                                
                                                                RESULT = nuevo;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$8",59, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ForLoop ::= For Id Igual Expresion M To Expresion M LineEnd NT$6 E Block Next Id NT$7 N 
            {
              Simbolo RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Simbolo) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-12)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-12)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-12)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		CuadTable.backpatch(n,m2+1+"");
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",33, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-15)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$7 ::= 
            {
              Simbolo RESULT =(Simbolo) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-10)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-10)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;

								SymTable.endScope();
                                                                String temp = CuadTable.newTemp();
                                                                Simbolo nuevo = new Simbolo("",0,0,0,"");
                                                                MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
                                                                CuadTable.gen("+",myid.value.toString(),1+"",temp);
                                                                CuadTable.gen("=",temp,myid.value.toString());
                                                                nuevo.lstSig = lstFal;
                                                                if(b != null){
                                                                    for(int i = 0; i<b.size();i++){
                                                                        nuevo.lstSig = b.get(i).lstSig;
                                                                    }
                                                                }
                                                                RESULT = nuevo;
                                                
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$7",58, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$6 ::= 
            {
              Simbolo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

								MyToken forTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8);
                                                                MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7);
                                                                SymTable.createSubScope("For" + SymTable.blockName(), forTok.left, forTok.right, forTok.offset);
                                                                CuadTable.gen("=",e1.lugar,myid.value.toString());
                                                                CuadTable.gen("_etiq",e1.lugar,myid.value.toString());
                                                                CuadTable.gen("if<",e1.lugar,e2.lugar,m2+4 + "");
                                                                 lstFal =CuadTable.makeList(CuadTable.sigCuad);
                                                                CuadTable.gen("goto","");
                                                                
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$6",57, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Operador ::= Ampersand 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Operador ::= Distinto 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Operador ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Operador ::= Mayor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Operador ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Operador ::= Menor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Operador ::= Not 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Operador ::= Or 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Operador ::= And 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Operador ::= Entre 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Operador ::= Por 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Operador ::= Menos 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Operador ::= Mas 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Termino ::= Property 
            {
              Termino RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino p = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (p == null){
									RESULT = null;
								}else{
									RESULT = new Termino(p.id, p.linea, p.columna, p.offset, p.tipo, p.lugar);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Termino ::= FuncEval 
            {
              Termino RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino f = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (f == null){
									RESULT = null;
								}else{
									RESULT = new Termino(f.id, f.linea, f.columna, f.offset, f.tipo, f.lugar);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Termino ::= Id 
            {
              Termino RESULT =null;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
									RESULT = null;
								}else{
									RESULT = new Termino(v.id, v.linea, v.columna, v.offset, v.tipo, v.lugar);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Termino ::= StrLiteral 
            {
              Termino RESULT =null;
		
								MyToken strLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								String valor = strLit.value.toString();
								
								if (valor.length() == 1){
									RESULT = new Termino(valor, strLit.left, strLit.right, strLit.offset, "char", valor);
								}else{
									RESULT = new Termino(valor, strLit.left, strLit.right, strLit.offset, "string", valor);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Termino ::= BoolLiteral 
            {
              Termino RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Literal b = (Literal)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								Termino t = new Termino(b.id, b.linea, b.columna, b.offset, "boolean", b.lugar);
								RESULT = t;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Termino ::= IntLiteral 
            {
              Termino RESULT =null;
		  
								MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								String valor = intLit.value.toString();
								Termino t = new Termino(valor, intLit.left, intLit.right, intLit.offset, "integer", valor);
								RESULT = t;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expresion ::= Negativo Expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e != null){
									if (e.tipo.equalsIgnoreCase("integer")){
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal ()");
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresion ::= Termino operel Termino 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Termino t1 = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino t2 = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
                                                                if (t1 != null && t2 != null){
                                                                        RESULT = new Expresion("", 0, 0, 0, "boolean");
                                                                        RESULT.lstVerd = CuadTable.makeList(CuadTable.sigCuad);
                                                                        RESULT.lstFals = CuadTable.makeList(CuadTable.sigCuad+1);
                                                                        CuadTable.gen("if"+t.toString(),t1.id,t2.id,"");
                                                                        CuadTable.gen("goto","");
								}else{
									RESULT = null;
								} 
                                                                              
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion ::= Not Expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e != null){
									RESULT = new Expresion(e.id, e.linea, e.columna, e.offset, "boolean");
                                                                        RESULT.lstVerd = e.lstFals;
                                                                        RESULT.lstFals = e.lstVerd;
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion ::= Termino 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino t = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (t != null){
									RESULT = new Expresion(t.id, t.linea, t.columna, t.offset, t.tipo, t.lugar);
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= ParI Expresion ParD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		
								RESULT = e;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= Expresion Ampersand GuionBajo LineEnd Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (SymTable.isPrimitive(e1.tipo) && SymTable.isPrimitive(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "string");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " & " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= Expresion Or M E Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("boolean") && e1.tipo.equalsIgnoreCase(e2.tipo)){
										Expresion nuevaExp = new Expresion("", 0, 0, 0, "boolean");
										CuadTable.backpatch(e1.lstFals, m.toString());
										nuevaExp.lstVerd = CuadTable.merge(e1.lstVerd, e2.lstVerd);
										nuevaExp.lstFals = e2.lstFals;
										RESULT = nuevaExp;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " Or " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= Expresion And M E Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("boolean") && e1.tipo.equalsIgnoreCase(e2.tipo)){
										Expresion nuevaExp = new Expresion("", 0, 0, 0, "boolean");
										CuadTable.backpatch(e1.lstVerd, m.toString());
										nuevaExp.lstVerd = e2.lstVerd;
										nuevaExp.lstFals = CuadTable.merge(e1.lstFals, e2.lstFals);
										RESULT = nuevaExp;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " And " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= Expresion Distinto Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " <> " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= Expresion Igual Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " = " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= Expresion Entre Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("/", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " / " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= Expresion Por Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("*", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " * " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion Ampersand Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (SymTable.isPrimitive(e1.tipo) && SymTable.isPrimitive(e2.tipo)){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("&", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " & " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= Expresion Menos Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("-", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " - " + e2.tipo + ")");
										RESULT = null;
									}
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= Expresion Mas Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										Expresion nuevaExpresion = new Expresion("", 0, 0, 0, "integer", CuadTable.newTemp());
										CuadTable.gen("+", e1.lugar, e2.lugar, nuevaExpresion.lugar);
										RESULT = nuevaExpresion;
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " + " + e2.tipo + ")");
										RESULT = null;
									}
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operel ::= MayorIgual 
            {
              Object RESULT =null;
		MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
                                    String valor = intLit.value.toString();
                                    RESULT = valor.toString();
                                      
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("operel",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operel ::= MenorIgual 
            {
              Object RESULT =null;
		MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
                                    String valor = intLit.value.toString();
                                    RESULT = valor.toString();
                                      
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("operel",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operel ::= Mayor 
            {
              Object RESULT =null;
		MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
                                    String valor = intLit.value.toString();
                                    RESULT = valor.toString();
                                  
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("operel",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operel ::= Menor 
            {
              Object RESULT =null;
		MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
                                    String valor = intLit.value.toString();
                                    RESULT = valor.toString();
                                  
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("operel",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Asignacion ::= Asignable Igual Expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Asignable a = (Asignable)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (a != null && e != null){
									if (!a.tipo.equalsIgnoreCase(e.tipo)){
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
										parser.syntax_error(tok);
										parser.appendErr("Asignacion ilegal (" + a.tipo + " = " + e.tipo + ")");
									}else{
										CuadTable.gen("=", e.lugar, a.lugar);
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignacion",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Asignable ::= Property 
            {
              Asignable RESULT =null;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino property = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (property == null){
									RESULT = null;
								}else{
									RESULT = new Asignable(property.id, property.linea, property.columna, property.offset, property.tipo, "propiedad", CuadTable.newTemp());
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignable",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Asignable ::= Id 
            {
              Asignable RESULT =null;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									RESULT = new Asignable(v.id, v.linea, v.columna, v.offset, v.tipo, "variable", v.lugar);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignable",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BlockStmt ::= MethodCall LineEnd 
            {
              Simbolo RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BlockStmt ::= Asignacion LineEnd 
            {
              Simbolo RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BlockStmt ::= Consola LineEnd 
            {
              Simbolo RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BlockStmt ::= IfStmt LineEnd 
            {
              Simbolo RESULT =null;
		
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BlockStmt ::= DoWhile LineEnd 
            {
              Simbolo RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Simbolo D = (Simbolo)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		CuadTable.backpatch(D.lstSig,CuadTable.sigCuad);RESULT=D;
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BlockStmt ::= ForLoop LineEnd 
            {
              Simbolo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Simbolo f = (Simbolo)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		CuadTable.backpatch(f.lstSig,CuadTable.sigCuad);RESULT=f;
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BlockStmt ::= VarDecl LineEnd 
            {
              Simbolo RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",18, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BlockStmts ::= BlockStmts BlockStmt 
            {
              ArrayList<Simbolo> RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Simbolo> b1 = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 if(b != null && b1 != null){
                                                                                        b1.add(b);
                                                                                        RESULT=b1;
                                                                                    }
                                                                                    else if(b != null && b1 == null){
                                                                                        ArrayList<Simbolo> sim= new ArrayList<Simbolo>();
                                                                                        sim.add(b);
                                                                                        RESULT=sim;
                                                                                    }
                                                                                    else{RESULT=null;}
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",17, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BlockStmts ::= BlockStmt 
            {
              ArrayList<Simbolo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		   if(b != null){System.out.println("ttttttttttttttxxxxxxx"+b.lstSig.get(0));
                                                            ArrayList<Simbolo> sim= new ArrayList<Simbolo>();
                                                            sim.add(b);
                                                            RESULT=sim;}else{RESULT = null;}
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",17, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Block ::= 
            {
              ArrayList<Simbolo> RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Block",16, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Block ::= BlockStmts 
            {
              ArrayList<Simbolo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Simbolo> b = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		if(b != null){RESULT=b;}else{RESULT=null;}
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Block",16, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TypeVarDecl ::= Id As Tipo 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curTypeStruct.hasProp(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La propiedad \"" + myid.value.toString() + "\" ya existe en este Type");
								}else{
									if (!SymTable.rootScope.hasType(tipo.value.toString())){
										parser.syntax_error(tipo);
										parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
									}

									SymTable.curTypeStruct.addProp(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeVarDecl",26, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TypeBlockStmts ::= TypeBlockStmts TypeVarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlockStmts",25, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TypeBlockStmts ::= TypeVarDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlockStmts",25, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TypeBlock ::= 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlock",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TypeBlock ::= TypeBlockStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlock",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypeDecl ::= Type Id LineEnd NT$5 TypeBlock End Type 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		
								SymTable.curTypeStruct = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeDecl",23, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
								TypeStruct t = new TypeStruct(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curTypeStruct = t;
								SymTable.curScope.addTypeStruct(t);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$5",56, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FuncDecl ::= Function Id NT$2 Params As Tipo NT$3 LineEnd Block NT$4 End Function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",12, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;

								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$4",55, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
 
								((Funcion)SymTable.curMethod).tipo = tipo.value.toString();
								
								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}

								SymTable.curMethod = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$3",54, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =null;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Function \"" + myid.value.toString() + "\" ya existe");
								}else if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Ya existe un Sub llamado \"" + myid.value.toString() + "\"");
								}
								CuadTable.gen(myid.value.toString());
								Funcion newFunc = new Funcion(myid.value.toString(), myid.left, myid.right, myid.offset, "void");
								SymTable.curScope.addFunc(newFunc);
								SymTable.curMethod = newFunc;
								Scope s = SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$2",53, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SubDecl ::= Sub Id NT$0 Params NT$1 LineEnd Block End Sub 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).value;
		
                                                                
								SymTable.endScope();
								SymTable.curMethod = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("SubDecl",14, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
CuadTable.gen(i.toString());
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Sub \"" + myid.value.toString() + "\" ya existe");
								}else if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Ya existe una funcion llamada \"" + myid.value.toString() + "\"");
								}else{
									if (myid.value.toString().equalsIgnoreCase("main")){
										SymTable.existeMain = true;
									}
								}
								Sub newSub = new Sub(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curScope.addSub(newSub);
								SymTable.curMethod = newSub;
								SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDecl ::= Dim Id As Tipo 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curScope.hasLocalVar(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" ya existe en este contexto");
								}else{
									Variable v = new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString(), CuadTable.newTemp());
									SymTable.curScope.addVar(v);
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",9, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Consola ::= Read Termino 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Consola",19, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Consola ::= Write Id 
            {
              Object RESULT =null;
		
                                                        MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
                                                        System.out.println("rrrrrrrrrrrrrrrrrrrrrr"+myid.value.toString());
                                                        Variable input;
                                                        input = SymTable.curScope.findVar(myid.value.toString());
                                                        if(input != null){
                                           //                 CuadTable.gen("write",input.tipo,input.id);
                                                            System.out.println("yyyyyyyyyyyyyyyyyyy"+input.id);
                                                        }
                                                    
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Consola",19, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RootStmt ::= TypeDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RootStmt ::= FuncDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RootStmt ::= SubDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RootStmt ::= VarDecl LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RootStmts ::= RootStmts RootStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmts",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RootStmts ::= RootStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmts",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Root ::= 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Root ::= RootStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Root ::= LineEnd RootStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgStart ::= Root 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ProgStart",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgStart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		RESULT = start_val;
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VbParser$parser.done_parsing();
          return CUP$VbParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

