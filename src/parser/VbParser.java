
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 18 03:34:06 CST 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;
import lexer.VbLexer;
import parser.VbSyntaxError;
import parser.sym;
import symtable.*;
import org.fife.ui.rsyntaxtextarea.parser.Parser;
import org.fife.ui.rsyntaxtextarea.parser.ExtendedHyperlinkListener;
import org.fife.ui.rsyntaxtextarea.parser.ParseResult;
import org.fife.ui.rsyntaxtextarea.parser.ParserNotice;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 18 03:34:06 CST 2014
  */
public class VbParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public VbParser() {super();}

  /** Constructor which sets the default scanner. */
  public VbParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VbParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\007\000\002\007\005\000\002\007\006\000\002\007" +
    "\007\000\002\061\002\000\002\017\012\000\002\017\004" +
    "\000\002\017\005\000\002\017\006\000\002\062\002\000" +
    "\002\015\014\000\002\015\004\000\002\015\005\000\002" +
    "\015\006\000\002\015\007\000\002\063\002\000\002\027" +
    "\011\000\002\030\004\000\002\030\003\000\002\031\003" +
    "\000\002\031\004\000\002\032\006\000\002\010\004\000" +
    "\002\010\003\000\002\011\003\000\002\011\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\033\003" +
    "\000\002\033\003\000\002\034\006\000\002\035\005\000" +
    "\002\036\003\000\002\036\003\000\002\037\003\000\002" +
    "\037\004\000\002\037\005\000\002\037\007\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\005\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\014\000\002\042\005\000\002\042\006\000\002" +
    "\042\006\000\002\042\010\000\002\042\011\000\002\042" +
    "\012\000\002\042\013\000\002\043\010\000\002\043\005" +
    "\000\002\043\006\000\002\043\007\000\002\043\010\000" +
    "\002\064\002\000\002\065\002\000\002\044\014\000\002" +
    "\066\002\000\002\067\002\000\002\045\011\000\002\070" +
    "\002\000\002\045\005\000\002\045\002\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\050\004\000\002\050\005\000\002" +
    "\050\005\000\002\050\004\000\002\051\006\000\002\051" +
    "\010\000\002\051\005\000\002\051\004\000\002\051\005" +
    "\000\002\051\006\000\002\047\003\000\002\047\003\000" +
    "\002\053\003\000\002\053\003\000\002\052\004\000\002" +
    "\054\004\000\002\054\005\000\002\055\004\000\002\046" +
    "\004\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\022\003\000\002\022\005\000\002\022\005\000" +
    "\002\057\004\000\002\060\004\000\002\060\005\000\002" +
    "\056\003\000\002\056\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\016\003\017\004\016\042\007\043\011\070" +
    "\004\076\020\001\002\000\004\055\327\001\002\000\004" +
    "\002\000\001\002\000\016\002\ufff7\003\ufff7\004\ufff7\042" +
    "\ufff7\043\ufff7\070\ufff7\001\002\000\006\003\316\055\315" +
    "\001\002\000\016\002\ufff6\003\ufff6\004\ufff6\042\ufff6\043" +
    "\ufff6\070\ufff6\001\002\000\006\003\050\055\047\001\002" +
    "\000\016\002\uffff\003\017\004\016\042\007\043\011\070" +
    "\004\001\002\000\016\002\ufff8\003\ufff8\004\ufff8\042\ufff8" +
    "\043\ufff8\070\ufff8\001\002\000\016\002\ufffb\003\ufffb\004" +
    "\ufffb\042\ufffb\043\ufffb\070\ufffb\001\002\000\016\002\ufff9" +
    "\003\ufff9\004\ufff9\042\ufff9\043\ufff9\070\ufff9\001\002\000" +
    "\006\003\031\055\030\001\002\000\016\002\ufffa\003\ufffa" +
    "\004\ufffa\042\ufffa\043\ufffa\070\ufffa\001\002\000\056\002" +
    "\uff80\003\uff80\004\uff80\016\uff80\021\uff80\022\uff80\023\uff80" +
    "\026\uff80\030\uff80\031\uff80\032\uff80\042\uff80\043\uff80\050" +
    "\uff80\052\uff80\055\uff80\064\uff80\065\uff80\070\uff80\074\uff80" +
    "\075\uff80\076\020\001\002\000\014\003\017\004\016\042" +
    "\007\043\011\070\004\001\002\000\004\002\024\001\002" +
    "\000\016\002\ufffd\003\ufffd\004\ufffd\042\ufffd\043\ufffd\070" +
    "\ufffd\001\002\000\004\002\001\001\002\000\016\002\ufffe" +
    "\003\017\004\016\042\007\043\011\070\004\001\002\000" +
    "\016\002\ufffc\003\ufffc\004\ufffc\042\ufffc\043\ufffc\070\ufffc" +
    "\001\002\000\054\002\uff7f\003\uff7f\004\uff7f\016\uff7f\021" +
    "\uff7f\022\uff7f\023\uff7f\026\uff7f\030\uff7f\031\uff7f\032\uff7f" +
    "\042\uff7f\043\uff7f\050\uff7f\052\uff7f\055\uff7f\064\uff7f\065" +
    "\uff7f\070\uff7f\074\uff7f\075\uff7f\001\002\000\006\003\033" +
    "\041\034\001\002\000\004\076\020\001\002\000\042\002" +
    "\ufff4\003\ufff4\004\ufff4\016\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\026\ufff4\030\ufff4\031\ufff4\032\ufff4\042\ufff4\043\ufff4\055" +
    "\ufff4\065\ufff4\070\ufff4\001\002\000\004\076\020\001\002" +
    "\000\016\003\042\033\040\034\043\035\035\036\041\055" +
    "\036\001\002\000\010\046\uff9e\051\uff9e\076\uff9e\001\002" +
    "\000\010\046\uff9d\051\uff9d\076\uff9d\001\002\000\004\076" +
    "\020\001\002\000\010\046\uffa1\051\uffa1\076\uffa1\001\002" +
    "\000\010\046\uff9f\051\uff9f\076\uff9f\001\002\000\004\076" +
    "\020\001\002\000\010\046\uffa0\051\uffa0\076\uffa0\001\002" +
    "\000\042\002\ufff2\003\ufff2\004\ufff2\016\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\042\ufff2" +
    "\043\ufff2\055\ufff2\065\ufff2\070\ufff2\001\002\000\042\002" +
    "\ufff5\003\ufff5\004\ufff5\016\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\026\ufff5\030\ufff5\031\ufff5\032\ufff5\042\ufff5\043\ufff5\055" +
    "\ufff5\065\ufff5\070\ufff5\001\002\000\042\002\ufff3\003\ufff3" +
    "\004\ufff3\016\ufff3\021\ufff3\022\ufff3\023\ufff3\026\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\042\ufff3\043\ufff3\055\ufff3\065\ufff3" +
    "\070\ufff3\001\002\000\006\003\051\050\053\001\002\000" +
    "\016\002\uffea\003\uffea\004\uffea\042\uffea\043\uffea\070\uffea" +
    "\001\002\000\016\002\uffe9\003\uffe9\004\uffe9\042\uffe9\043" +
    "\uffe9\070\uffe9\001\002\000\006\003\100\041\101\001\002" +
    "\000\012\003\055\037\060\040\054\051\056\001\002\000" +
    "\006\003\uff91\055\uff91\001\002\000\012\003\uff99\041\uff99" +
    "\051\077\076\uff99\001\002\000\010\003\uff9c\041\uff9c\076" +
    "\uff9c\001\002\000\006\003\072\055\071\001\002\000\006" +
    "\003\uff92\055\uff92\001\002\000\006\046\062\051\063\001" +
    "\002\000\010\003\064\037\060\040\054\001\002\000\010" +
    "\003\uff9b\041\uff9b\076\uff9b\001\002\000\006\046\uff96\051" +
    "\uff96\001\002\000\004\055\066\001\002\000\004\041\067" +
    "\001\002\000\014\033\040\034\043\035\035\036\041\055" +
    "\036\001\002\000\006\046\uff97\051\uff97\001\002\000\006" +
    "\003\074\041\073\001\002\000\006\046\uff95\051\uff95\001" +
    "\002\000\016\003\076\033\040\034\043\035\035\036\041" +
    "\055\036\001\002\000\006\046\uff94\051\uff94\001\002\000" +
    "\006\046\uff98\051\uff98\001\002\000\006\046\uff93\051\uff93" +
    "\001\002\000\010\003\uff9a\041\uff9a\076\uff9a\001\002\000" +
    "\016\002\uffe8\003\uffe8\004\uffe8\042\uffe8\043\uffe8\070\uffe8" +
    "\001\002\000\016\003\103\033\040\034\043\035\035\036" +
    "\041\055\036\001\002\000\004\076\uffec\001\002\000\016" +
    "\002\uffe7\003\uffe7\004\uffe7\042\uffe7\043\uffe7\070\uffe7\001" +
    "\002\000\004\076\020\001\002\000\032\003\uffde\004\016" +
    "\016\130\021\uffde\022\uffde\023\125\026\114\030\uffde\031" +
    "\uffde\032\uffde\055\117\065\121\001\002\000\004\032\107" +
    "\001\002\000\004\043\110\001\002\000\004\076\020\001" +
    "\002\000\016\002\uffeb\003\uffeb\004\uffeb\042\uffeb\043\uffeb" +
    "\070\uffeb\001\002\000\032\003\uffdd\004\uffdd\016\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\055\uffdd\065\uffdd\001\002\000\032\003\uffd9\004\uffd9\016" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\055\uffd9\065\uffd9\001\002\000\020\013\145\050" +
    "\146\052\152\055\144\064\151\074\137\075\142\001\002" +
    "\000\004\076\020\001\002\000\032\003\uffd8\004\uffd8\016" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\055\uffd8\065\uffd8\001\002\000\010\047\222\050" +
    "\223\054\uffd5\001\002\000\032\003\uffdf\004\016\016\130" +
    "\021\uffdf\022\uffdf\023\125\026\114\030\uffdf\031\uffdf\032" +
    "\uffdf\055\117\065\121\001\002\000\004\055\265\001\002" +
    "\000\032\003\uffd7\004\uffd7\016\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\055\uffd7\065\uffd7" +
    "\001\002\000\032\003\uffdb\004\uffdb\016\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb\055\uffdb" +
    "\065\uffdb\001\002\000\004\054\262\001\002\000\006\003" +
    "\241\024\242\001\002\000\004\054\uffd4\001\002\000\032" +
    "\003\uffd6\004\uffd6\016\uffd6\021\uffd6\022\uffd6\023\uffd6\026" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\055\uffd6\065\uffd6\001\002" +
    "\000\006\003\133\055\132\001\002\000\032\003\uffda\004" +
    "\uffda\016\uffda\021\uffda\022\uffda\023\uffda\026\uffda\030\uffda" +
    "\031\uffda\032\uffda\055\uffda\065\uffda\001\002\000\006\003" +
    "\135\054\136\001\002\000\004\076\020\001\002\000\032" +
    "\003\uffb6\004\uffb6\016\uffb6\021\uffb6\022\uffb6\023\uffb6\026" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\055\uffb6\065\uffb6\001\002" +
    "\000\004\076\020\001\002\000\022\003\150\013\145\050" +
    "\146\052\152\055\144\064\151\074\137\075\142\001\002" +
    "\000\050\003\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb\027\uffcb" +
    "\046\uffcb\051\uffcb\054\uffcb\062\uffcb\063\uffcb\071\uffcb\076" +
    "\uffcb\001\002\000\050\003\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\017" +
    "\uffcf\027\uffcf\046\uffcf\051\uffcf\054\uffcf\062\uffcf\063\uffcf" +
    "\071\uffcf\076\uffcf\001\002\000\050\003\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\017\uffc7\027\uffc7\046\uffc7\051\uffc7\054\uffc7\062" +
    "\uffc7\063\uffc7\071\uffc7\076\uffc7\001\002\000\050\003\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\017\uffc9\027\uffc9\046\uffc9\051\uffc9" +
    "\054\uffc9\062\uffc9\063\uffc9\071\uffc9\076\uffc9\001\002\000" +
    "\050\003\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca" +
    "\012\uffca\013\uffca\014\uffca\015\uffca\017\uffca\027\uffca\046" +
    "\uffca\051\uffca\054\uffca\062\uffca\063\uffca\071\uffca\076\uffca" +
    "\001\002\000\054\003\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8" +
    "\027\uffc8\046\uffc8\047\222\050\223\051\uffc8\054\uffc8\062" +
    "\uffc8\063\uffc8\071\uffc8\076\uffc8\001\002\000\016\050\146" +
    "\052\152\055\144\064\151\074\137\075\142\001\002\000" +
    "\020\013\145\050\146\052\152\055\144\064\151\074\137" +
    "\075\142\001\002\000\050\003\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\017\uffc6\027\uffc6\046\uffc6\051\uffc6\054\uffc6\062\uffc6\063" +
    "\uffc6\071\uffc6\076\uffc6\001\002\000\032\003\uffb4\004\uffb4" +
    "\016\uffb4\021\uffb4\022\uffb4\023\uffb4\026\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\055\uffb4\065\uffb4\001\002\000\050\003\uff8f" +
    "\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013" +
    "\uff8f\014\uff8f\015\uff8f\017\uff8f\027\uff8f\046\uff8f\051\uff8f" +
    "\054\uff8f\062\uff8f\063\uff8f\071\uff8f\076\uff8f\001\002\000" +
    "\050\003\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\012\uff90\013\uff90\014\uff90\015\uff90\017\uff90\027\uff90\046" +
    "\uff90\051\uff90\054\uff90\062\uff90\063\uff90\071\uff90\076\uff90" +
    "\001\002\000\036\003\165\005\173\006\154\007\170\010" +
    "\161\011\155\012\167\013\156\014\163\015\164\017\172" +
    "\062\166\063\162\071\171\001\002\000\020\050\uffc3\052" +
    "\uffc3\053\uffc3\055\uffc3\064\uffc3\074\uffc3\075\uffc3\001\002" +
    "\000\022\012\214\050\uffbd\052\uffbd\053\uffbd\055\uffbd\064" +
    "\uffbd\074\uffbd\075\uffbd\001\002\000\020\050\uffbe\052\uffbe" +
    "\053\uffbe\055\uffbe\064\uffbe\074\uffbe\075\uffbe\001\002\000" +
    "\020\050\uffb9\052\uffb9\053\uffb9\055\uffb9\064\uffb9\074\uffb9" +
    "\075\uffb9\001\002\000\020\050\146\052\152\053\211\055" +
    "\144\064\151\074\137\075\142\001\002\000\020\050\uffc1" +
    "\052\uffc1\053\uffc1\055\uffc1\064\uffc1\074\uffc1\075\uffc1\001" +
    "\002\000\020\050\uffbc\052\uffbc\053\uffbc\055\uffbc\064\uffbc" +
    "\074\uffbc\075\uffbc\001\002\000\020\050\uffc0\052\uffc0\053" +
    "\uffc0\055\uffc0\064\uffc0\074\uffc0\075\uffc0\001\002\000\020" +
    "\050\uffbf\052\uffbf\053\uffbf\055\uffbf\064\uffbf\074\uffbf\075" +
    "\uffbf\001\002\000\004\076\020\001\002\000\020\050\uffba" +
    "\052\uffba\053\uffba\055\uffba\064\uffba\074\uffba\075\uffba\001" +
    "\002\000\020\050\uffbb\052\uffbb\053\uffbb\055\uffbb\064\uffbb" +
    "\074\uffbb\075\uffbb\001\002\000\020\050\uffc2\052\uffc2\053" +
    "\uffc2\055\uffc2\064\uffc2\074\uffc2\075\uffc2\001\002\000\020" +
    "\050\uffb8\052\uffb8\053\uffb8\055\uffb8\064\uffb8\074\uffb8\075" +
    "\uffb8\001\002\000\022\003\174\013\145\050\146\052\152" +
    "\055\144\064\151\074\137\075\142\001\002\000\020\050" +
    "\uffc4\052\uffc4\053\uffc4\055\uffc4\064\uffc4\074\uffc4\075\uffc4" +
    "\001\002\000\004\076\020\001\002\000\036\003\177\005" +
    "\173\006\154\007\170\010\161\011\155\012\167\013\156" +
    "\014\163\015\164\062\166\063\162\071\171\076\020\001" +
    "\002\000\006\003\202\021\201\001\002\000\004\076\020" +
    "\001\002\000\032\003\uffb1\004\uffb1\016\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\026\uffb1\030\uffb1\031\uffb1\032\uffb1\055\uffb1" +
    "\065\uffb1\001\002\000\004\055\204\001\002\000\004\076" +
    "\020\001\002\000\032\003\uffb0\004\uffb0\016\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\026\uffb0\030\uffb0\031\uffb0\032\uffb0\055" +
    "\uffb0\065\uffb0\001\002\000\004\076\020\001\002\000\032" +
    "\003\uffb7\004\uffb7\016\uffb7\021\uffb7\022\uffb7\023\uffb7\026" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\055\uffb7\065\uffb7\001\002" +
    "\000\032\003\uffb2\004\uffb2\016\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\026\uffb2\030\uffb2\031\uffb2\032\uffb2\055\uffb2\065\uffb2" +
    "\001\002\000\032\003\uffb3\004\uffb3\016\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\026\uffb3\030\uffb3\031\uffb3\032\uffb3\055\uffb3" +
    "\065\uffb3\001\002\000\050\003\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\017\uffcd\027\uffcd\046\uffcd\051\uffcd\054\uffcd\062\uffcd\063" +
    "\uffcd\071\uffcd\076\uffcd\001\002\000\004\076\020\001\002" +
    "\000\016\050\146\052\152\055\144\064\151\074\137\075" +
    "\142\001\002\000\050\003\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017" +
    "\uffcc\027\uffcc\046\uffcc\051\uffcc\054\uffcc\062\uffcc\063\uffcc" +
    "\071\uffcc\076\uffcc\001\002\000\020\050\uff8e\052\uff8e\053" +
    "\uff8e\055\uff8e\064\uff8e\074\uff8e\075\uff8e\001\002\000\034" +
    "\005\173\006\154\007\170\010\161\011\155\012\167\013" +
    "\156\014\163\015\164\051\216\062\166\063\162\071\171" +
    "\001\002\000\050\003\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5" +
    "\027\uffc5\046\uffc5\051\uffc5\054\uffc5\062\uffc5\063\uffc5\071" +
    "\uffc5\076\uffc5\001\002\000\050\003\uffce\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\017\uffce\027\uffce\046\uffce\051\uffce\054\uffce\062\uffce" +
    "\063\uffce\071\uffce\076\uffce\001\002\000\050\003\uff8b\005" +
    "\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b" +
    "\014\uff8b\015\uff8b\017\uff8b\027\uff8b\046\uff8b\051\uff8b\054" +
    "\uff8b\062\uff8b\063\uff8b\071\uff8b\076\uff8b\001\002\000\050" +
    "\003\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012" +
    "\uff83\013\uff83\014\uff83\015\uff83\017\uff83\027\uff83\046\uff83" +
    "\051\uff83\054\uff83\062\uff83\063\uff83\071\uff83\076\uff83\001" +
    "\002\000\004\055\236\001\002\000\024\003\226\013\145" +
    "\050\146\051\225\052\152\055\144\064\151\074\137\075" +
    "\142\001\002\000\010\003\231\046\232\051\233\001\002" +
    "\000\050\003\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011" +
    "\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\017\uff8a\027\uff8a" +
    "\046\uff8a\051\uff8a\054\uff8a\062\uff8a\063\uff8a\071\uff8a\076" +
    "\uff8a\001\002\000\004\051\230\001\002\000\040\003\uff86" +
    "\005\173\006\154\007\170\010\161\011\155\012\167\013" +
    "\156\014\163\015\164\046\uff86\051\uff86\062\166\063\162" +
    "\071\171\001\002\000\050\003\uff87\005\uff87\006\uff87\007" +
    "\uff87\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87" +
    "\017\uff87\027\uff87\046\uff87\051\uff87\054\uff87\062\uff87\063" +
    "\uff87\071\uff87\076\uff87\001\002\000\050\003\uff88\005\uff88" +
    "\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014" +
    "\uff88\015\uff88\017\uff88\027\uff88\046\uff88\051\uff88\054\uff88" +
    "\062\uff88\063\uff88\071\uff88\076\uff88\001\002\000\022\003" +
    "\234\013\145\050\146\052\152\055\144\064\151\074\137" +
    "\075\142\001\002\000\050\003\uff89\005\uff89\006\uff89\007" +
    "\uff89\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89" +
    "\017\uff89\027\uff89\046\uff89\051\uff89\054\uff89\062\uff89\063" +
    "\uff89\071\uff89\076\uff89\001\002\000\010\003\uff84\046\uff84" +
    "\051\uff84\001\002\000\040\003\uff85\005\173\006\154\007" +
    "\170\010\161\011\155\012\167\013\156\014\163\015\164" +
    "\046\uff85\051\uff85\062\166\063\162\071\171\001\002\000" +
    "\052\003\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82" +
    "\012\uff82\013\uff82\014\uff82\015\uff82\017\uff82\027\uff82\046" +
    "\uff82\047\222\051\uff82\054\uff82\062\uff82\063\uff82\071\uff82" +
    "\076\uff82\001\002\000\050\003\uff81\005\uff81\006\uff81\007" +
    "\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81" +
    "\017\uff81\027\uff81\046\uff81\051\uff81\054\uff81\062\uff81\063" +
    "\uff81\071\uff81\076\uff81\001\002\000\032\003\uffb5\004\uffb5" +
    "\016\uffb5\021\uffb5\022\uffb5\023\uffb5\026\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\055\uffb5\065\uffb5\001\002\000\004\076\020" +
    "\001\002\000\022\003\243\013\145\050\146\052\152\055" +
    "\144\064\151\074\137\075\142\001\002\000\004\076\020" +
    "\001\002\000\042\003\uffd1\005\173\006\154\007\170\010" +
    "\161\011\155\012\167\013\156\014\163\015\164\027\uffd1" +
    "\054\256\062\166\063\162\071\171\076\uffd1\001\002\000" +
    "\010\003\uffd0\027\uffd0\076\uffd0\001\002\000\006\003\247" +
    "\076\020\001\002\000\004\076\020\001\002\000\006\003" +
    "\251\022\252\001\002\000\004\076\020\001\002\000\004" +
    "\076\020\001\002\000\032\003\uffaf\004\uffaf\016\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\026\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\055\uffaf\065\uffaf\001\002\000\032\003\uffab\004\uffab\016" +
    "\uffab\021\uffab\022\uffab\023\uffab\026\uffab\030\uffab\031\uffab" +
    "\032\uffab\055\uffab\065\uffab\001\002\000\032\003\uffac\004" +
    "\uffac\016\uffac\021\uffac\022\uffac\023\uffac\026\uffac\030\uffac" +
    "\031\uffac\032\uffac\055\uffac\065\uffac\001\002\000\020\013" +
    "\145\050\146\052\152\055\144\064\151\074\137\075\142" +
    "\001\002\000\040\003\uffd2\005\173\006\154\007\170\010" +
    "\161\011\155\012\167\013\156\014\163\015\164\027\uffd2" +
    "\062\166\063\162\071\171\076\uffd2\001\002\000\032\003" +
    "\uffad\004\uffad\016\uffad\021\uffad\022\uffad\023\uffad\026\uffad" +
    "\030\uffad\031\uffad\032\uffad\055\uffad\065\uffad\001\002\000" +
    "\032\003\uffae\004\uffae\016\uffae\021\uffae\022\uffae\023\uffae" +
    "\026\uffae\030\uffae\031\uffae\032\uffae\055\uffae\065\uffae\001" +
    "\002\000\020\013\145\050\146\052\152\055\144\064\151" +
    "\074\137\075\142\001\002\000\034\005\173\006\154\007" +
    "\170\010\161\011\155\012\167\013\156\014\163\015\164" +
    "\062\166\063\162\071\171\076\020\001\002\000\032\003" +
    "\uffd3\004\uffd3\016\uffd3\021\uffd3\022\uffd3\023\uffd3\026\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\055\uffd3\065\uffd3\001\002\000" +
    "\004\050\223\001\002\000\004\076\020\001\002\000\032" +
    "\003\uff8c\004\uff8c\016\uff8c\021\uff8c\022\uff8c\023\uff8c\026" +
    "\uff8c\030\uff8c\031\uff8c\032\uff8c\055\uff8c\065\uff8c\001\002" +
    "\000\032\003\uffdc\004\uffdc\016\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc\055\uffdc\065\uffdc" +
    "\001\002\000\032\003\uff8d\004\uff8d\016\uff8d\021\uff8d\022" +
    "\uff8d\023\uff8d\026\uff8d\030\uff8d\031\uff8d\032\uff8d\055\uff8d" +
    "\065\uff8d\001\002\000\004\027\273\001\002\000\004\076" +
    "\uffaa\001\002\000\004\076\020\001\002\000\010\030\uffa9" +
    "\031\uffa9\032\uffa9\001\002\000\010\030\301\031\300\032" +
    "\uffa2\001\002\000\004\032\312\001\002\000\020\013\145" +
    "\050\146\052\152\055\144\064\151\074\137\075\142\001" +
    "\002\000\004\076\uffa4\001\002\000\004\076\020\001\002" +
    "\000\004\032\uffa3\001\002\000\004\027\305\001\002\000" +
    "\004\076\uffa7\001\002\000\004\076\020\001\002\000\010" +
    "\030\uffa6\031\uffa6\032\uffa6\001\002\000\010\030\301\031" +
    "\300\032\uffa2\001\002\000\004\032\uffa5\001\002\000\004" +
    "\026\313\001\002\000\004\076\020\001\002\000\032\003" +
    "\uffa8\004\uffa8\016\uffa8\021\uffa8\022\uffa8\023\uffa8\026\uffa8" +
    "\030\uffa8\031\uffa8\032\uffa8\055\uffa8\065\uffa8\001\002\000" +
    "\006\003\317\050\053\001\002\000\016\002\uffef\003\uffef" +
    "\004\uffef\042\uffef\043\uffef\070\uffef\001\002\000\016\002" +
    "\uffee\003\uffee\004\uffee\042\uffee\043\uffee\070\uffee\001\002" +
    "\000\006\003\322\076\ufff1\001\002\000\004\076\020\001" +
    "\002\000\016\002\uffed\003\uffed\004\uffed\042\uffed\043\uffed" +
    "\070\uffed\001\002\000\004\032\324\001\002\000\004\042" +
    "\325\001\002\000\004\076\020\001\002\000\016\002\ufff0" +
    "\003\ufff0\004\ufff0\042\ufff0\043\ufff0\070\ufff0\001\002\000" +
    "\004\076\uffe6\001\002\000\004\076\020\001\002\000\006" +
    "\032\uffe3\055\336\001\002\000\004\032\333\001\002\000" +
    "\004\070\334\001\002\000\004\076\020\001\002\000\016" +
    "\002\uffe5\003\uffe5\004\uffe5\042\uffe5\043\uffe5\070\uffe5\001" +
    "\002\000\004\041\342\001\002\000\006\032\uffe2\055\uffe2" +
    "\001\002\000\006\032\uffe4\055\336\001\002\000\006\032" +
    "\uffe1\055\uffe1\001\002\000\014\033\040\034\043\035\035" +
    "\036\041\055\036\001\002\000\004\076\020\001\002\000" +
    "\006\032\uffe0\055\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\026\002\021\003\004\004\011\005\022\006" +
    "\013\007\014\015\005\017\012\027\007\056\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\025\006\013\007\014\015\005\017\012\027\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\026\001" +
    "\001\000\020\004\024\005\022\006\013\007\014\015\005" +
    "\017\012\027\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\025\006\013\007\014" +
    "\015\005\017\012\027\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\031\001\001" +
    "\000\002\001\001\000\004\056\045\001\001\000\004\023" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\056\051\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\101\001\001" +
    "\000\004\062\103\001\001\000\002\001\001\000\006\010" +
    "\105\056\104\001\001\000\030\007\122\011\117\012\111" +
    "\033\123\034\121\042\130\043\112\044\115\054\126\055" +
    "\114\057\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\035\244\036\271\037\243" +
    "\040\137\053\142\055\140\057\146\001\001\000\004\056" +
    "\270\001\001\000\002\001\001\000\006\046\217\060\220" +
    "\001\001\000\026\007\122\012\267\033\123\034\121\042" +
    "\130\043\112\044\115\054\126\055\114\057\125\001\001" +
    "\000\004\055\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\133\001\001\000\002\001\001" +
    "\000\004\056\237\001\001\000\014\037\152\040\137\053" +
    "\142\055\140\057\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\046\217\060\220\001\001\000\012\040\216" +
    "\053\142\055\140\057\146\001\001\000\014\037\214\040" +
    "\137\053\142\055\140\057\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\157\052\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\040" +
    "\207\053\142\055\140\057\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\037\174\040" +
    "\137\053\142\055\140\057\146\001\001\000\002\001\001" +
    "\000\004\056\205\001\001\000\012\010\175\041\157\052" +
    "\156\056\104\001\001\000\002\001\001\000\004\056\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\202\001\001\000\002\001\001\000\004\056\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\211\001\001\000\012\040\212" +
    "\053\142\055\140\057\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\157\052\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\022\223\037\226\040\137" +
    "\053\142\055\140\057\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\157\052\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\037" +
    "\234\040\137\053\142\055\140\057\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\157\052\156\001" +
    "\001\000\004\060\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\260\001\001\000\020\035\244\036" +
    "\245\037\243\040\137\053\142\055\140\057\146\001\001" +
    "\000\004\056\257\001\001\000\006\041\157\052\156\001" +
    "\001\000\002\001\001\000\006\010\247\056\104\001\001" +
    "\000\004\056\254\001\001\000\002\001\001\000\004\056" +
    "\253\001\001\000\004\056\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\037\256\040" +
    "\137\053\142\055\140\057\146\001\001\000\006\041\157" +
    "\052\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\037\262\040\137\053\142\055\140\057\146\001\001" +
    "\000\010\041\157\052\156\056\263\001\001\000\002\001" +
    "\001\000\004\046\217\001\001\000\004\056\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\273\001\001\000\006\010\274" +
    "\056\104\001\001\000\004\065\275\001\001\000\004\045" +
    "\276\001\001\000\002\001\001\000\020\035\244\036\303" +
    "\037\243\040\137\053\142\055\140\057\146\001\001\000" +
    "\004\070\301\001\001\000\006\010\302\056\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\305\001" +
    "\001\000\006\010\306\056\104\001\001\000\004\067\307" +
    "\001\001\000\004\045\310\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\313\001\001\000\002\001\001" +
    "\000\004\050\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\320\001\001\000\006\010\322\056\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\325\001\001\000\002\001\001\000\004" +
    "\063\327\001\001\000\006\030\331\056\330\001\001\000" +
    "\006\031\337\032\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\340\001\001" +
    "\000\002\001\001\000\004\023\342\001\001\000\004\056" +
    "\343\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VbParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VbParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VbParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	private VbLexer lexer;
	private ArrayList<VbSyntaxError> errLst = new ArrayList<>();

	public VbParser(VbLexer lex) {
		super(lex);
		this.lexer = lex;
	}

	public void user_init(){
		this.errLst = new ArrayList<>();
		SymTable.init();
	}

	public Symbol getCurToken(){
		return this.cur_token;
	}

	public void report_fatal_error(String message, Object info) throws Exception{
		done_parsing();
		report_error(message, info);
		throw new Exception("Can't recover from previous error(s)");
	}

	public void report_error(String message, Object info){
		System.err.print(message);
		System.err.flush();
		if ((info instanceof Symbol)){
		  if (((Symbol)info).left != -1){
			System.err.println(" at character " + ((Symbol)info).left + " of input");
		  }else{
			System.err.println("");
		  }
		}else{
		  System.err.println("");
	   }
	}

	public void syntax_error(Symbol cur_token){
		System.out.println("syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("1cur_token '" + cur_token + "' no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
		System.out.println("unrec_syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error fatal en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("2unrec cur_token no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	protected int error_sync_size(){
		return 3;
	}
	
	public void addErr(String msg, int left, int right, int offset, int length){
		this.errLst.add(new VbSyntaxError(msg, left, right, offset, length));
	}

	public void appendErr(String msg){
		if (!this.errLst.isEmpty()){
			int index = this.errLst.size() - 1;
			this.errLst.get(index).message += ": " + msg;
		}
	}

	public ArrayList getErrLst(){
		return this.errLst;
	}

	public void setLexer(VbLexer lexer){
		this.lexer = lexer;
	}

	public MyToken tokenAt(java.util.Stack stack, int top, int offset){
		return (MyToken)stack.elementAt(top + offset);
	}

	public MyToken toMyToken(Object o){
		return (MyToken)o;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$VbParser$actions {
  private final VbParser parser;

  /** Constructor */
  CUP$VbParser$actions(VbParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$VbParser$do_action(
    int                        CUP$VbParser$act_num,
    java_cup.runtime.lr_parser CUP$VbParser$parser,
    java.util.Stack            CUP$VbParser$stack,
    int                        CUP$VbParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VbParser$result;

      /* select the action based on the action number */
      switch (CUP$VbParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LineEnd ::= FinDeLinea LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("LineEnd",44, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LineEnd ::= FinDeLinea 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("LineEnd",44, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PropChain ::= Punto Id PropChain 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int propChainleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propChainright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object propChain = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								RESULT = "." + id.toString() + propChain;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PropChain",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PropChain ::= Punto Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								RESULT = "." + id.toString();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PropChain",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Property ::= Id PropChain 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int propChainleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propChainright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object propChain = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								RESULT = id.toString() + propChain;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Property",45, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ArgLst ::= ArgLst Coma error 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Argumento"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",16, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ArgLst ::= ArgLst Coma Expresion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",16, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ArgLst ::= Expresion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",16, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Args ::= ParI error ParD 
            {
              Object RESULT =null;
		 parser.appendErr("Argumentos invalidos"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Args ::= ParI ArgLst error 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba ')'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Args ::= ParI ArgLst ParD 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Args ::= ParI ParD 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FuncEval ::= Id Args 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncEval",43, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // MethodCall ::= Call FuncEval LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("MethodCall",42, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // MethodCall ::= FuncEval LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("MethodCall",42, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Distinto ::= Menor Mayor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Distinto",40, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // BoolLiteral ::= False 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",41, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // BoolLiteral ::= True 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",41, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PassMech ::= ByRef 
            {
              Object RESULT =null;
		int byRefleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int byRefright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object byRef = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = byRef.toString().toLowerCase(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PassMech",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PassMech ::= ByVal 
            {
              Object RESULT =null;
		int byValleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int byValright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object byVal = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = byVal.toString().toLowerCase(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PassMech",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ParamLst ::= PassMech Id As error 
            {
              ArrayList<Parametro> RESULT =null;
		 parser.appendErr("Se esperaba Tipo"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ParamLst ::= PassMech Id error 
            {
              ArrayList<Parametro> RESULT =null;
		 parser.appendErr("Se esperaba 'As'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ParamLst ::= PassMech error 
            {
              ArrayList<Parametro> RESULT =null;
		 parser.appendErr("Se esperaba Id"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ParamLst ::= ParamLst Coma error 
            {
              ArrayList<Parametro> RESULT =null;
		 parser.appendErr("Se esperaba Parametro"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ParamLst ::= ParamLst Coma PassMech Id As Tipo 
            {
              ArrayList<Parametro> RESULT =null;
		int paramLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int paramLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		ArrayList<Parametro> paramLst = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int passMechleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int passMechright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object passMech = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								ArrayList<Parametro> params = new ArrayList<>();
								Parametro p = new Parametro(passMech.toString(), id.toString(), tipo.toString());
								paramLst.add(p);
								RESULT = paramLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ParamLst ::= PassMech Id As Tipo 
            {
              ArrayList<Parametro> RESULT =null;
		int passMechleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int passMechright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object passMech = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								ArrayList<Parametro> params = new ArrayList<>();
								Parametro p = new Parametro(passMech.toString(), id.toString(), tipo.toString());
								params.add(p);
								RESULT = params;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Params ::= ParI error 
            {
              ArrayList<Parametro> RESULT =null;
		 parser.appendErr("Se esperaban parametros"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Params ::= ParI error ParD 
            {
              ArrayList<Parametro> RESULT =null;
		 parser.appendErr("Parametros invalidos"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Params ::= ParI ParamLst ParD 
            {
              ArrayList<Parametro> RESULT =null;
		int paramLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int paramLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Parametro> paramLst = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		 RESULT = paramLst; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Params ::= ParI ParD 
            {
              ArrayList<Parametro> RESULT =null;
		 RESULT = new ArrayList<Parametro>(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Tipo ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = id; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",17, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Tipo ::= Char 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",17, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Tipo ::= String 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",17, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Tipo ::= Boolean 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",17, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Tipo ::= Integer 
            {
              Object RESULT =null;
		 RESULT = "integer"; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",17, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ElseStmts ::= 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseStmts",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ElseStmts ::= Else NT$7 Block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		 
								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseStmts",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$7 ::= 
            {
              Object RESULT =null;
 
								MyToken elseTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								SymTable.createSubScope("Else" + SymTable.blockName(), elseTok.left, elseTok.right, elseTok.offset); 
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$7",54, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ElseStmts ::= ElseIf Condicion Then NT$5 Block NT$6 ElseStmts 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseStmts",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
 
								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$6",53, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$5 ::= 
            {
              Object RESULT =null;
 
								MyToken myelif = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("ElseIf" + SymTable.blockName(), myelif.left, myelif.right, myelif.offset); 
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$5",52, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IfStmt ::= If Condicion Then NT$3 Block NT$4 ElseStmts End If LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("IfStmt",34, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
 
								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$4",51, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$3 ::= 
            {
              Object RESULT =null;

								MyToken ifTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("If" + SymTable.blockName(), ifTok.left, ifTok.right, ifTok.offset); 
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$3",50, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DoWhile ::= Do While Condicion Block error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba 'Loop'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("DoWhile",33, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DoWhile ::= Do While Condicion error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba fin de linea"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("DoWhile",33, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DoWhile ::= Do While error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Condicion"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("DoWhile",33, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DoWhile ::= Do error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba 'While'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("DoWhile",33, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DoWhile ::= Do While Condicion Block Loop LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("DoWhile",33, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ForLoop ::= For Id Igual Expresion To Expresion Block error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Next Id"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ForLoop ::= For Id Igual Expresion To Expresion error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba fin de linea"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ForLoop ::= For Id Igual Expresion To error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba expresion"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ForLoop ::= For Id Igual Expresion error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba 'To'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ForLoop ::= For Id Igual error 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Expresion"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ForLoop ::= For Id error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba '='"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ForLoop ::= For error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Id"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ForLoop ::= For Id Igual Expresion To Expresion Block Next Id LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Operador ::= Ampersand 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Operador ::= Distinto 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Operador ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Operador ::= Mayor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Operador ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Operador ::= Menor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Operador ::= Not 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Operador ::= Or 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Operador ::= And 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Operador ::= Entre 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Operador ::= Por 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Operador ::= Menos 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Operador ::= Mas 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Termino ::= ParI Expresion ParD 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Termino ::= Property 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Termino ::= FuncEval 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Termino ::= Id 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Termino ::= StrLiteral 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Termino ::= BoolLiteral 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Termino ::= IntLiteral 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= Expresion Operador GuionBajo LineEnd Termino 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= Expresion Operador Termino 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= Not Termino 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= Termino 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Condicion ::= Comparacion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Condicion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Condicion ::= Expresion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Condicion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Comparacion ::= Expresion Igual Expresion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Comparacion",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Asignacion ::= Asignable Igual Expresion LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignacion",26, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Asignable ::= Property 
            {
              Object RESULT =null;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object property = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								String[] segments = property.toString().split("\\.");
								
								//Symbol sym = (Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								//MyToken myid = new MyToken(sym.sym, sym.left, sym.right, 0, sym.value);

								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								//MyToken myid = property;
								Variable v = SymTable.curScope.findVar(segments[0]);

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + segments[0] + "\" no ha sido declarada");
								}else{
									switch(v.tipo){
										case "integer":
										case "string":
										case "boolean":
										case "char":
											parser.syntax_error(myid);
											parser.appendErr("La variable \"" + v.id + "\" no es un Type");
											break;
										default:
											TypeStruct t = SymTable.curScope.findTypeStruct(v.tipo);
											
											for (int i = 1; i < segments.length; i++){
												Variable prop = t.findVar(segments[i]);

												if (prop == null){
													parser.syntax_error(myid);
													parser.appendErr("El Type \"" + t.id + "\" no tiene una propiedad llamada \"" + segments[i] + "\"");
													break;
												}else{
													if (prop.tipo.equals("integer") || prop.tipo.equals("string") || prop.tipo.equals("boolean") || prop.tipo.equals("char")){
														if (i < segments.length - 1){
															parser.syntax_error(myid);
															parser.appendErr("La propiedad \"" + prop.id + "\" del Type \"" + t.id + " es de tipo \"" + prop.tipo + "\" y no tiene propiedades");
															break;
														}
													}else{
														t = SymTable.curScope.findTypeStruct(prop.tipo);
													}
												}

												if (i == segments.length - 1){
													RESULT = new Asignable("property", prop.tipo);
												}
											}
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignable",25, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Asignable ::= Id 
            {
              Object RESULT =null;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									RESULT = new Asignable("variable", v.tipo);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignable",25, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BlockStmt ::= MethodCall 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BlockStmt ::= Asignacion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BlockStmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BlockStmt ::= DoWhile 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BlockStmt ::= ForLoop 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BlockStmt ::= VarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BlockStmts ::= BlockStmts BlockStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BlockStmts ::= BlockStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Block ::= LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Block",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Block ::= LineEnd BlockStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Block",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeVarDecl ::= Id As Tipo LineEnd 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);
								Variable v = new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.toString());
								SymTable.curTypeStruct.variables.add(v);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeVarDecl",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TypeBlockStmts ::= TypeBlockStmts TypeVarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlockStmts",23, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TypeBlockStmts ::= TypeVarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlockStmts",23, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TypeBlock ::= LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlock",22, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TypeBlock ::= LineEnd TypeBlockStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlock",22, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TypeDecl ::= Type Id NT$2 TypeBlock End Type LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		
								SymTable.curTypeStruct = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeDecl",21, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								TypeStruct t = new TypeStruct(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curTypeStruct = t;
								SymTable.curScope.addTypeStruct(t);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FuncDecl ::= Function Id Params As error 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Tipo"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",11, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FuncDecl ::= Function Id Params error 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba 'As'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",11, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FuncDecl ::= Function Id error 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaban parametros"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",11, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FuncDecl ::= Function error 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Id"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",11, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FuncDecl ::= Function Id Params As Tipo NT$1 Block End Function LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		
								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",11, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);
								SymTable.curScope.addFunc(new Funcion(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.toString(), params));
								
								Scope s = SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
								
								for (Parametro p:params){
									s.addVar(new Variable(p.id, null, null, null, p.tipo));
								} 
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SubDecl ::= Sub Id Params error 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba bloque"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("SubDecl",13, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SubDecl ::= Sub Id error 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaban parametros"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("SubDecl",13, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SubDecl ::= Sub error 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Id"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("SubDecl",13, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SubDecl ::= Sub Id Params NT$0 Block End Sub LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		
								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("SubDecl",13, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
								if (myid.value.toString().toLowerCase().equals("main")){
									if (SymTable.existeMain){
										parser.syntax_error(myid);
										parser.appendErr("Sub Main ya fue declarado");
									}else{
										SymTable.existeMain = true;
									}
								}

								SymTable.curScope.addSub(new Sub(myid.value.toString(), myid.left, myid.right, myid.offset, params));
								
								Scope s = SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
								
								for (Parametro p:params){
									s.addVar(new Variable(p.id, null, null, null, p.tipo));
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= Dim Id As error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Tipo"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= Dim Id error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba 'As'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDecl ::= Dim error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Id"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDecl ::= Dim Id As Tipo LineEnd 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);
								SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.toString()));
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RootDecl ::= TypeDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootDecl",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RootDecl ::= FuncDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootDecl",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RootDecl ::= SubDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootDecl",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RootDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootDecl",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RootStmt ::= error 
            {
              Object RESULT =null;
		 parser.appendErr("error"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",3, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RootStmt ::= RootDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",3, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RootStmts ::= RootStmts RootStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmts",2, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RootStmts ::= RootStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmts",2, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Root ::= LineEnd RootStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",1, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Root ::= RootStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",1, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgStart ::= Root 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ProgStart",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgStart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		RESULT = start_val;
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VbParser$parser.done_parsing();
          return CUP$VbParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

