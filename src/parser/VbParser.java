
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 25 18:53:59 CST 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;
import lexer.VbLexer;
import parser.VbSyntaxError;
import parser.sym;
import symtable.*;
import org.fife.ui.rsyntaxtextarea.parser.Parser;
import org.fife.ui.rsyntaxtextarea.parser.ExtendedHyperlinkListener;
import org.fife.ui.rsyntaxtextarea.parser.ParseResult;
import org.fife.ui.rsyntaxtextarea.parser.ParserNotice;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 25 18:53:59 CST 2014
  */
public class VbParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public VbParser() {super();}

  /** Constructor which sets the default scanner. */
  public VbParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VbParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\004\000\002\005\003\000\002\005\004" +
    "\000\002\006\003\000\002\006\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\007\000\002\010\005\000\002\010\006\000\002\010" +
    "\007\000\002\056\002\000\002\020\012\000\002\057\002" +
    "\000\002\060\002\000\002\061\002\000\002\016\016\000" +
    "\002\062\002\000\002\025\011\000\002\026\004\000\002" +
    "\026\003\000\002\027\003\000\002\027\004\000\002\030" +
    "\006\000\002\011\004\000\002\011\003\000\002\012\003" +
    "\000\002\012\004\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\031\003\000\002\031\003\000\002\034" +
    "\006\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\007\000\002\036\005\000\002\036\003" +
    "\000\002\036\004\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\063\002\000\002\064\002\000\002\037" +
    "\016\000\002\065\002\000\002\066\002\000\002\040\012" +
    "\000\002\067\002\000\002\070\002\000\002\041\014\000" +
    "\002\071\002\000\002\072\002\000\002\042\011\000\002" +
    "\073\002\000\002\042\005\000\002\042\002\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\046\004\000\002\046\005\000" +
    "\002\047\006\000\002\047\010\000\002\043\003\000\002" +
    "\043\003\000\002\002\003\000\002\002\003\000\002\050" +
    "\004\000\002\051\004\000\002\051\005\000\002\033\004" +
    "\000\002\044\004\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\045\003\000\002\045\005\000\002" +
    "\045\005\000\002\074\002\000\002\053\005\000\002\054" +
    "\004\000\002\075\002\000\002\054\006\000\002\052\003" +
    "\000\002\052\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\016\003\017\004\016\042\005\043\010\070" +
    "\004\074\020\001\002\000\004\055\304\001\002\000\004" +
    "\055\275\001\002\000\004\002\000\001\002\000\016\002" +
    "\ufff7\003\ufff7\004\ufff7\042\ufff7\043\ufff7\070\ufff7\001\002" +
    "\000\004\055\047\001\002\000\016\002\ufff6\003\ufff6\004" +
    "\ufff6\042\ufff6\043\ufff6\070\ufff6\001\002\000\016\002\uffff" +
    "\003\017\004\016\042\005\043\010\070\004\001\002\000" +
    "\016\002\ufff8\003\ufff8\004\ufff8\042\ufff8\043\ufff8\070\ufff8" +
    "\001\002\000\016\002\ufffb\003\ufffb\004\ufffb\042\ufffb\043" +
    "\ufffb\070\ufffb\001\002\000\016\002\ufff9\003\ufff9\004\ufff9" +
    "\042\ufff9\043\ufff9\070\ufff9\001\002\000\006\003\031\055" +
    "\030\001\002\000\016\002\ufffa\003\ufffa\004\ufffa\042\ufffa" +
    "\043\ufffa\070\ufffa\001\002\000\060\002\uff87\003\uff87\004" +
    "\uff87\013\uff87\016\uff87\021\uff87\022\uff87\023\uff87\026\uff87" +
    "\030\uff87\031\uff87\032\uff87\042\uff87\043\uff87\050\uff87\052" +
    "\uff87\055\uff87\064\uff87\065\uff87\070\uff87\074\020\075\uff87" +
    "\076\uff87\001\002\000\014\003\017\004\016\042\005\043" +
    "\010\070\004\001\002\000\004\002\024\001\002\000\016" +
    "\002\ufffd\003\ufffd\004\ufffd\042\ufffd\043\ufffd\070\ufffd\001" +
    "\002\000\004\002\001\001\002\000\016\002\ufffe\003\017" +
    "\004\016\042\005\043\010\070\004\001\002\000\016\002" +
    "\ufffc\003\ufffc\004\ufffc\042\ufffc\043\ufffc\070\ufffc\001\002" +
    "\000\056\002\uff86\003\uff86\004\uff86\013\uff86\016\uff86\021" +
    "\uff86\022\uff86\023\uff86\026\uff86\030\uff86\031\uff86\032\uff86" +
    "\042\uff86\043\uff86\050\uff86\052\uff86\055\uff86\064\uff86\065" +
    "\uff86\070\uff86\075\uff86\076\uff86\001\002\000\006\003\033" +
    "\041\034\001\002\000\004\074\020\001\002\000\042\002" +
    "\ufff4\003\ufff4\004\ufff4\016\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\026\ufff4\030\ufff4\031\ufff4\032\ufff4\042\ufff4\043\ufff4\055" +
    "\ufff4\065\ufff4\070\ufff4\001\002\000\004\074\020\001\002" +
    "\000\016\003\042\033\037\034\043\035\040\036\041\055" +
    "\035\001\002\000\010\046\uffa0\051\uffa0\074\uffa0\001\002" +
    "\000\004\074\020\001\002\000\010\046\uffa4\051\uffa4\074" +
    "\uffa4\001\002\000\010\046\uffa1\051\uffa1\074\uffa1\001\002" +
    "\000\010\046\uffa2\051\uffa2\074\uffa2\001\002\000\004\074" +
    "\020\001\002\000\010\046\uffa3\051\uffa3\074\uffa3\001\002" +
    "\000\042\002\ufff2\003\ufff2\004\ufff2\016\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\042\ufff2" +
    "\043\ufff2\055\ufff2\065\ufff2\070\ufff2\001\002\000\042\002" +
    "\ufff5\003\ufff5\004\ufff5\016\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\026\ufff5\030\ufff5\031\ufff5\032\ufff5\042\ufff5\043\ufff5\055" +
    "\ufff5\065\ufff5\070\ufff5\001\002\000\042\002\ufff3\003\ufff3" +
    "\004\ufff3\016\ufff3\021\ufff3\022\ufff3\023\ufff3\026\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\042\ufff3\043\ufff3\055\ufff3\065\ufff3" +
    "\070\ufff3\001\002\000\004\050\uffef\001\002\000\004\050" +
    "\052\001\002\000\004\041\071\001\002\000\010\037\056" +
    "\040\053\051\055\001\002\000\004\055\uff9a\001\002\000" +
    "\004\055\066\001\002\000\006\041\uff9f\074\uff9f\001\002" +
    "\000\004\055\uff9b\001\002\000\006\046\060\051\061\001" +
    "\002\000\006\037\056\040\053\001\002\000\006\041\uff9e" +
    "\074\uff9e\001\002\000\004\055\063\001\002\000\004\041" +
    "\064\001\002\000\014\033\037\034\043\035\040\036\041" +
    "\055\035\001\002\000\006\046\uff9c\051\uff9c\001\002\000" +
    "\004\041\067\001\002\000\014\033\037\034\043\035\040" +
    "\036\041\055\035\001\002\000\006\046\uff9d\051\uff9d\001" +
    "\002\000\014\033\037\034\043\035\040\036\041\055\035" +
    "\001\002\000\004\074\uffee\001\002\000\004\074\020\001" +
    "\002\000\030\004\016\016\120\021\uffe3\022\uffe3\023\115" +
    "\026\104\030\uffe3\031\uffe3\032\uffe3\055\107\065\111\001" +
    "\002\000\004\032\uffed\001\002\000\004\032\077\001\002" +
    "\000\004\043\100\001\002\000\004\074\020\001\002\000" +
    "\016\002\uffec\003\uffec\004\uffec\042\uffec\043\uffec\070\uffec" +
    "\001\002\000\030\004\uffe2\016\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\055\uffe2\065\uffe2" +
    "\001\002\000\030\004\uffde\016\uffde\021\uffde\022\uffde\023" +
    "\uffde\026\uffde\030\uffde\031\uffde\032\uffde\055\uffde\065\uffde" +
    "\001\002\000\020\013\132\050\133\052\137\055\131\064" +
    "\135\075\124\076\127\001\002\000\030\004\uffdd\016\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\026\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\055\uffdd\065\uffdd\001\002\000\004\074\020\001\002" +
    "\000\010\047\uff8c\050\213\054\uffda\001\002\000\030\004" +
    "\016\016\120\021\uffe4\022\uffe4\023\115\026\104\030\uffe4" +
    "\031\uffe4\032\uffe4\055\107\065\111\001\002\000\004\055" +
    "\245\001\002\000\030\004\uffdc\016\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc\055\uffdc\065" +
    "\uffdc\001\002\000\030\004\uffe0\016\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\055\uffe0\065" +
    "\uffe0\001\002\000\004\054\242\001\002\000\004\024\233" +
    "\001\002\000\004\054\uffd9\001\002\000\030\004\uffdb\016" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\055\uffdb\065\uffdb\001\002\000\004\055\122\001" +
    "\002\000\030\004\uffdf\016\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\026\uffdf\030\uffdf\031\uffdf\032\uffdf\055\uffdf\065\uffdf\001" +
    "\002\000\004\054\123\001\002\000\020\013\132\050\133" +
    "\052\137\055\131\064\135\075\124\076\127\001\002\000" +
    "\046\003\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\014\uffc6\015\uffc6\017\uffc6\027\uffc6\046\uffc6\051" +
    "\uffc6\054\uffc6\062\uffc6\063\uffc6\071\uffc6\074\uffc6\001\002" +
    "\000\046\003\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\014\uffc8\015\uffc8\017\uffc8\027\uffc8\046\uffc8" +
    "\051\uffc8\054\uffc8\062\uffc8\063\uffc8\071\uffc8\074\uffc8\001" +
    "\002\000\046\003\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\014\uffc2\015\uffc2\017\uffc2\027\uffc2\046" +
    "\uffc2\051\uffc2\054\uffc2\062\uffc2\063\uffc2\071\uffc2\074\uffc2" +
    "\001\002\000\046\003\uffc4\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\017\uffc4\027\uffc4" +
    "\046\uffc4\051\uffc4\054\uffc4\062\uffc4\063\uffc4\071\uffc4\074" +
    "\uffc4\001\002\000\046\003\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\017\uffc5\027" +
    "\uffc5\046\uffc5\051\uffc5\054\uffc5\062\uffc5\063\uffc5\071\uffc5" +
    "\074\uffc5\001\002\000\052\003\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\017\uffc3" +
    "\027\uffc3\046\uffc3\047\uff8c\050\213\051\uffc3\054\uffc3\062" +
    "\uffc3\063\uffc3\071\uffc3\074\uffc3\001\002\000\020\013\132" +
    "\050\133\052\137\055\131\064\135\075\124\076\127\001" +
    "\002\000\020\013\132\050\133\052\137\055\131\064\135" +
    "\075\124\076\127\001\002\000\046\003\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1" +
    "\017\uffc1\027\uffc1\046\uffc1\051\uffc1\054\uffc1\062\uffc1\063" +
    "\uffc1\071\uffc1\074\uffc1\001\002\000\046\003\uff98\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\014\uff98\015" +
    "\uff98\017\uff98\027\uff98\046\uff98\051\uff98\054\uff98\062\uff98" +
    "\063\uff98\071\uff98\074\uff98\001\002\000\034\005\155\006" +
    "\140\007\152\010\143\011\141\012\147\014\145\015\146" +
    "\017\154\054\151\062\150\063\144\071\153\001\002\000" +
    "\046\003\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\014\uff99\015\uff99\017\uff99\027\uff99\046\uff99\051" +
    "\uff99\054\uff99\062\uff99\063\uff99\071\uff99\074\uff99\001\002" +
    "\000\020\013\132\050\133\052\137\055\131\064\135\075" +
    "\124\076\127\001\002\000\022\012\203\013\132\050\133" +
    "\052\137\055\131\064\135\075\124\076\127\001\002\000" +
    "\020\013\132\050\133\052\137\055\131\064\135\075\124" +
    "\076\127\001\002\000\020\013\132\050\133\052\137\055" +
    "\131\064\135\075\124\076\127\001\002\000\020\013\132" +
    "\050\133\052\137\055\131\064\135\075\124\076\127\001" +
    "\002\000\020\013\132\050\133\052\137\055\131\064\135" +
    "\075\124\076\127\001\002\000\020\013\132\050\133\052" +
    "\137\055\131\064\135\075\124\076\127\001\002\000\020" +
    "\013\132\050\133\052\137\055\131\064\135\075\124\076" +
    "\127\001\002\000\020\013\132\050\133\052\137\055\131" +
    "\064\135\075\124\076\127\001\002\000\020\013\132\050" +
    "\133\052\137\055\131\064\135\075\124\076\127\001\002" +
    "\000\020\013\132\050\133\052\137\055\131\064\135\075" +
    "\124\076\127\001\002\000\022\013\132\050\133\052\137" +
    "\053\166\055\131\064\135\075\124\076\127\001\002\000" +
    "\020\013\132\050\133\052\137\055\131\064\135\075\124" +
    "\076\127\001\002\000\020\013\132\050\133\052\137\055" +
    "\131\064\135\075\124\076\127\001\002\000\046\003\uffd7" +
    "\005\uffd7\006\uffd7\007\152\010\143\011\uffd7\012\uffd7\014" +
    "\uffd7\015\uffd7\017\uffd7\027\uffd7\046\uffd7\051\uffd7\054\uffd7" +
    "\062\uffd7\063\uffd7\071\uffd7\074\uffd7\001\002\000\034\005" +
    "\155\006\140\007\152\010\143\011\141\012\147\014\145" +
    "\015\146\054\151\062\150\063\144\071\153\074\uffb3\001" +
    "\002\000\004\074\020\001\002\000\004\021\uffb2\001\002" +
    "\000\004\021\163\001\002\000\004\055\164\001\002\000" +
    "\004\074\020\001\002\000\030\004\uffb1\016\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\026\uffb1\030\uffb1\031\uffb1\032\uffb1\055" +
    "\uffb1\065\uffb1\001\002\000\004\074\020\001\002\000\046" +
    "\003\uffd5\005\uffd5\006\uffd5\007\152\010\143\011\uffd5\012" +
    "\uffd5\014\uffd5\015\uffd5\017\uffd5\027\uffd5\046\uffd5\051\uffd5" +
    "\054\uffd5\062\uffd5\063\uffd5\071\uffd5\074\uffd5\001\002\000" +
    "\020\013\132\050\133\052\137\055\131\064\135\075\124" +
    "\076\127\001\002\000\046\003\uffca\005\155\006\140\007" +
    "\152\010\143\011\141\012\147\014\145\015\146\017\uffca" +
    "\027\uffca\046\uffca\051\uffca\054\151\062\150\063\144\071" +
    "\153\074\uffca\001\002\000\046\003\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\014\uffd4\015\uffd4\017" +
    "\uffd4\027\uffd4\046\uffd4\051\uffd4\054\uffd4\062\uffd4\063\uffd4" +
    "\071\uffd4\074\uffd4\001\002\000\046\003\uffce\005\155\006" +
    "\140\007\152\010\143\011\uffce\012\uffce\014\uffce\015\uffce" +
    "\017\uffce\027\uffce\046\uffce\051\uffce\054\uffce\062\uffce\063" +
    "\uffce\071\153\074\uffce\001\002\000\046\003\uffcf\005\155" +
    "\006\140\007\152\010\143\011\uffcf\012\uffcf\014\uffcf\015" +
    "\uffcf\017\uffcf\027\uffcf\046\uffcf\051\uffcf\054\uffcf\062\uffcf" +
    "\063\uffcf\071\153\074\uffcf\001\002\000\046\003\uffd0\005" +
    "\155\006\140\007\152\010\143\011\uffd0\012\uffd0\014\uffd0" +
    "\015\uffd0\017\uffd0\027\uffd0\046\uffd0\051\uffd0\054\uffd0\062" +
    "\uffd0\063\uffd0\071\153\074\uffd0\001\002\000\046\003\uffcb" +
    "\005\155\006\140\007\152\010\143\011\141\012\147\014" +
    "\uffcb\015\uffcb\017\uffcb\027\uffcb\046\uffcb\051\uffcb\054\151" +
    "\062\150\063\144\071\153\074\uffcb\001\002\000\046\003" +
    "\uffcc\005\155\006\140\007\152\010\143\011\141\012\147" +
    "\014\uffcc\015\uffcc\017\uffcc\027\uffcc\046\uffcc\051\uffcc\054" +
    "\151\062\150\063\144\071\153\074\uffcc\001\002\000\046" +
    "\003\uffd1\005\155\006\140\007\152\010\143\011\uffd1\012" +
    "\uffd1\014\uffd1\015\uffd1\017\uffd1\027\uffd1\046\uffd1\051\uffd1" +
    "\054\uffd1\062\uffd1\063\uffd1\071\153\074\uffd1\001\002\000" +
    "\046\003\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\012\uffd3\014\uffd3\015\uffd3\017\uffd3\027\uffd3\046\uffd3\051" +
    "\uffd3\054\uffd3\062\uffd3\063\uffd3\071\uffd3\074\uffd3\001\002" +
    "\000\046\003\uffcd\005\155\006\140\007\152\010\143\011" +
    "\141\012\147\014\145\015\146\017\uffcd\027\uffcd\046\uffcd" +
    "\051\uffcd\054\151\062\150\063\144\071\153\074\uffcd\001" +
    "\002\000\020\013\uff97\050\uff97\052\uff97\055\uff97\064\uff97" +
    "\075\uff97\076\uff97\001\002\000\046\003\uffd2\005\155\006" +
    "\140\007\152\010\143\011\uffd2\012\uffd2\014\uffd2\015\uffd2" +
    "\017\uffd2\027\uffd2\046\uffd2\051\uffd2\054\uffd2\062\uffd2\063" +
    "\uffd2\071\153\074\uffd2\001\002\000\046\003\uffd6\005\uffd6" +
    "\006\uffd6\007\152\010\143\011\uffd6\012\uffd6\014\uffd6\015" +
    "\uffd6\017\uffd6\027\uffd6\046\uffd6\051\uffd6\054\uffd6\062\uffd6" +
    "\063\uffd6\071\uffd6\074\uffd6\001\002\000\034\005\155\006" +
    "\140\007\152\010\143\011\141\012\147\014\145\015\146" +
    "\051\207\054\151\062\150\063\144\071\153\001\002\000" +
    "\046\003\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\014\uffc9\015\uffc9\017\uffc9\027\uffc9\046\uffc9\051" +
    "\uffc9\054\uffc9\062\uffc9\063\uffc9\071\uffc9\074\uffc9\001\002" +
    "\000\046\003\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\014\uffc7\015\uffc7\017\uffc7\027\uffc7\046\uffc7" +
    "\051\uffc7\054\uffc7\062\uffc7\063\uffc7\071\uffc7\074\uffc7\001" +
    "\002\000\046\003\uff94\005\uff94\006\uff94\007\uff94\010\uff94" +
    "\011\uff94\012\uff94\014\uff94\015\uff94\017\uff94\027\uff94\046" +
    "\uff94\051\uff94\054\uff94\062\uff94\063\uff94\071\uff94\074\uff94" +
    "\001\002\000\004\047\227\001\002\000\024\003\216\013" +
    "\132\050\133\051\215\052\137\055\131\064\135\075\124" +
    "\076\127\001\002\000\010\003\221\046\222\051\223\001" +
    "\002\000\046\003\uff93\005\uff93\006\uff93\007\uff93\010\uff93" +
    "\011\uff93\012\uff93\014\uff93\015\uff93\017\uff93\027\uff93\046" +
    "\uff93\051\uff93\054\uff93\062\uff93\063\uff93\071\uff93\074\uff93" +
    "\001\002\000\004\051\220\001\002\000\040\003\uff8f\005" +
    "\155\006\140\007\152\010\143\011\141\012\147\014\145" +
    "\015\146\046\uff8f\051\uff8f\054\151\062\150\063\144\071" +
    "\153\001\002\000\046\003\uff90\005\uff90\006\uff90\007\uff90" +
    "\010\uff90\011\uff90\012\uff90\014\uff90\015\uff90\017\uff90\027" +
    "\uff90\046\uff90\051\uff90\054\uff90\062\uff90\063\uff90\071\uff90" +
    "\074\uff90\001\002\000\046\003\uff91\005\uff91\006\uff91\007" +
    "\uff91\010\uff91\011\uff91\012\uff91\014\uff91\015\uff91\017\uff91" +
    "\027\uff91\046\uff91\051\uff91\054\uff91\062\uff91\063\uff91\071" +
    "\uff91\074\uff91\001\002\000\022\003\224\013\132\050\133" +
    "\052\137\055\131\064\135\075\124\076\127\001\002\000" +
    "\046\003\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92" +
    "\012\uff92\014\uff92\015\uff92\017\uff92\027\uff92\046\uff92\051" +
    "\uff92\054\uff92\062\uff92\063\uff92\071\uff92\074\uff92\001\002" +
    "\000\010\003\uff8d\046\uff8d\051\uff8d\001\002\000\040\003" +
    "\uff8e\005\155\006\140\007\152\010\143\011\141\012\147" +
    "\014\145\015\146\046\uff8e\051\uff8e\054\151\062\150\063" +
    "\144\071\153\001\002\000\046\003\uff8b\005\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\011\uff8b\012\uff8b\014\uff8b\015\uff8b\017" +
    "\uff8b\027\uff8b\046\uff8b\051\uff8b\054\uff8b\062\uff8b\063\uff8b" +
    "\071\uff8b\074\uff8b\001\002\000\004\055\230\001\002\000" +
    "\050\003\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a" +
    "\012\uff8a\014\uff8a\015\uff8a\017\uff8a\027\uff8a\046\uff8a\047" +
    "\uff89\051\uff8a\054\uff8a\062\uff8a\063\uff8a\071\uff8a\074\uff8a" +
    "\001\002\000\004\047\227\001\002\000\046\003\uff88\005" +
    "\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\014\uff88" +
    "\015\uff88\017\uff88\027\uff88\046\uff88\051\uff88\054\uff88\062" +
    "\uff88\063\uff88\071\uff88\074\uff88\001\002\000\020\013\132" +
    "\050\133\052\137\055\131\064\135\075\124\076\127\001" +
    "\002\000\034\005\155\006\140\007\152\010\143\011\141" +
    "\012\147\014\145\015\146\054\151\062\150\063\144\071" +
    "\153\074\uffb0\001\002\000\004\074\020\001\002\000\004" +
    "\022\uffaf\001\002\000\004\022\240\001\002\000\004\074" +
    "\020\001\002\000\030\004\uffae\016\uffae\021\uffae\022\uffae" +
    "\023\uffae\026\uffae\030\uffae\031\uffae\032\uffae\055\uffae\065" +
    "\uffae\001\002\000\020\013\132\050\133\052\137\055\131" +
    "\064\135\075\124\076\127\001\002\000\034\005\155\006" +
    "\140\007\152\010\143\011\141\012\147\014\145\015\146" +
    "\054\151\062\150\063\144\071\153\074\020\001\002\000" +
    "\030\004\uffd8\016\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\055\uffd8\065\uffd8\001\002\000" +
    "\004\050\213\001\002\000\004\074\020\001\002\000\030" +
    "\004\uff95\016\uff95\021\uff95\022\uff95\023\uff95\026\uff95\030" +
    "\uff95\031\uff95\032\uff95\055\uff95\065\uff95\001\002\000\030" +
    "\004\uffe1\016\uffe1\021\uffe1\022\uffe1\023\uffe1\026\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\055\uffe1\065\uffe1\001\002\000\030" +
    "\004\uff96\016\uff96\021\uff96\022\uff96\023\uff96\026\uff96\030" +
    "\uff96\031\uff96\032\uff96\055\uff96\065\uff96\001\002\000\034" +
    "\005\155\006\140\007\152\010\143\011\141\012\147\014" +
    "\145\015\146\027\253\054\151\062\150\063\144\071\153" +
    "\001\002\000\004\074\uffad\001\002\000\004\074\020\001" +
    "\002\000\010\030\uffac\031\uffac\032\uffac\001\002\000\010" +
    "\030\261\031\260\032\uffa5\001\002\000\004\032\272\001" +
    "\002\000\020\013\132\050\133\052\137\055\131\064\135" +
    "\075\124\076\127\001\002\000\004\074\uffa7\001\002\000" +
    "\004\074\020\001\002\000\004\032\uffa6\001\002\000\034" +
    "\005\155\006\140\007\152\010\143\011\141\012\147\014" +
    "\145\015\146\027\265\054\151\062\150\063\144\071\153" +
    "\001\002\000\004\074\uffaa\001\002\000\004\074\020\001" +
    "\002\000\010\030\uffa9\031\uffa9\032\uffa9\001\002\000\010" +
    "\030\261\031\260\032\uffa5\001\002\000\004\032\uffa8\001" +
    "\002\000\004\026\273\001\002\000\004\074\020\001\002" +
    "\000\030\004\uffab\016\uffab\021\uffab\022\uffab\023\uffab\026" +
    "\uffab\030\uffab\031\uffab\032\uffab\055\uffab\065\uffab\001\002" +
    "\000\004\050\ufff1\001\002\000\004\050\052\001\002\000" +
    "\004\074\020\001\002\000\004\032\301\001\002\000\004" +
    "\042\302\001\002\000\004\074\020\001\002\000\016\002" +
    "\ufff0\003\ufff0\004\ufff0\042\ufff0\043\ufff0\070\ufff0\001\002" +
    "\000\004\074\uffeb\001\002\000\004\074\020\001\002\000" +
    "\006\032\uffe8\055\313\001\002\000\004\032\310\001\002" +
    "\000\004\070\311\001\002\000\004\074\020\001\002\000" +
    "\016\002\uffea\003\uffea\004\uffea\042\uffea\043\uffea\070\uffea" +
    "\001\002\000\004\041\317\001\002\000\006\032\uffe7\055" +
    "\uffe7\001\002\000\006\032\uffe9\055\313\001\002\000\006" +
    "\032\uffe6\055\uffe6\001\002\000\014\033\037\034\043\035" +
    "\040\036\041\055\035\001\002\000\004\074\020\001\002" +
    "\000\006\032\uffe5\055\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\026\003\021\004\005\005\011\006\022\007" +
    "\013\010\014\016\006\020\012\025\010\052\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\025\007\013\010\014\016\006\020\012\025\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\026\001" +
    "\001\000\020\005\024\006\022\007\013\010\014\016\006" +
    "\020\012\025\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\025\007\013\010\014" +
    "\016\006\020\012\025\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\031\001\001" +
    "\000\002\001\001\000\004\052\045\001\001\000\004\055" +
    "\035\001\001\000\002\001\001\000\004\052\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\047\001" +
    "\001\000\004\046\050\001\001\000\002\001\001\000\006" +
    "\043\053\047\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\067\001\001\000" +
    "\002\001\001\000\004\055\071\001\001\000\004\060\072" +
    "\001\001\000\006\011\074\052\073\001\001\000\030\010" +
    "\112\012\107\013\101\031\113\033\105\034\111\037\120" +
    "\040\102\041\104\051\116\053\115\001\001\000\004\061" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\127\032\124\033\125\036\251" +
    "\053\133\001\001\000\002\001\001\000\004\052\250\001" +
    "\001\000\006\044\210\074\211\001\001\000\026\010\112" +
    "\013\247\031\113\033\105\034\111\037\120\040\102\041" +
    "\104\051\116\053\115\001\001\000\004\033\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\127\032\124\033\125\036\135\053\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\210\074\211\001\001" +
    "\000\014\002\127\032\124\033\125\036\207\053\133\001" +
    "\001\000\014\002\127\032\124\033\125\036\205\053\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\141\001\001\000\002\001\001\000\014\002\127\032\124" +
    "\033\125\036\204\053\133\001\001\000\014\002\127\032" +
    "\124\033\125\036\203\053\133\001\001\000\014\002\127" +
    "\032\124\033\125\036\201\053\133\001\001\000\014\002" +
    "\127\032\124\033\125\036\200\053\133\001\001\000\014" +
    "\002\127\032\124\033\125\036\177\053\133\001\001\000" +
    "\014\002\127\032\124\033\125\036\176\053\133\001\001" +
    "\000\014\002\127\032\124\033\125\036\175\053\133\001" +
    "\001\000\014\002\127\032\124\033\125\036\174\053\133" +
    "\001\001\000\014\002\127\032\124\033\125\036\173\053" +
    "\133\001\001\000\014\002\127\032\124\033\125\036\172" +
    "\053\133\001\001\000\014\002\127\032\124\033\125\036" +
    "\171\053\133\001\001\000\014\002\127\032\124\033\125" +
    "\036\166\053\133\001\001\000\014\002\127\032\124\033" +
    "\125\036\156\053\133\001\001\000\014\002\127\032\124" +
    "\033\125\036\155\053\133\001\001\000\004\050\141\001" +
    "\001\000\006\050\141\063\157\001\001\000\006\011\160" +
    "\052\073\001\001\000\004\064\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\164\001\001\000\002" +
    "\001\001\000\004\052\167\001\001\000\004\050\141\001" +
    "\001\000\014\002\127\032\124\033\125\036\170\053\133" +
    "\001\001\000\004\050\141\001\001\000\004\050\141\001" +
    "\001\000\004\050\141\001\001\000\004\050\141\001\001" +
    "\000\004\050\141\001\001\000\004\050\141\001\001\000" +
    "\004\050\141\001\001\000\004\050\141\001\001\000\004" +
    "\050\141\001\001\000\004\050\141\001\001\000\002\001" +
    "\001\000\004\050\141\001\001\000\004\050\141\001\001" +
    "\000\004\050\141\001\001\000\002\001\001\000\004\050" +
    "\141\001\001\000\002\001\001\000\004\054\225\001\001" +
    "\000\016\002\127\032\124\033\125\036\216\045\213\053" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\127\032\124\033\125\036\224" +
    "\053\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\075\230\001\001\000\004\054\231\001\001\000" +
    "\002\001\001\000\014\002\127\032\124\033\125\036\233" +
    "\053\133\001\001\000\006\050\141\065\234\001\001\000" +
    "\006\011\235\052\073\001\001\000\004\066\236\001\001" +
    "\000\002\001\001\000\004\052\240\001\001\000\002\001" +
    "\001\000\014\002\127\032\124\033\125\036\242\053\133" +
    "\001\001\000\006\050\141\052\243\001\001\000\002\001" +
    "\001\000\004\044\210\001\001\000\004\052\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\141\001\001\000\004\067\253\001\001\000\006" +
    "\011\254\052\073\001\001\000\004\070\255\001\001\000" +
    "\004\042\256\001\001\000\002\001\001\000\014\002\127" +
    "\032\124\033\125\036\263\053\133\001\001\000\004\073" +
    "\261\001\001\000\006\011\262\052\073\001\001\000\002" +
    "\001\001\000\004\050\141\001\001\000\004\071\265\001" +
    "\001\000\006\011\266\052\073\001\001\000\004\072\267" +
    "\001\001\000\004\042\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\273\001\001\000\002\001\001" +
    "\000\004\056\275\001\001\000\004\046\276\001\001\000" +
    "\006\011\277\052\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\302\001\001\000\002\001\001\000" +
    "\004\062\304\001\001\000\006\026\306\052\305\001\001" +
    "\000\006\027\314\030\313\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\315\001" +
    "\001\000\002\001\001\000\004\055\317\001\001\000\004" +
    "\052\320\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VbParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VbParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VbParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	private VbLexer lexer;
	private ArrayList<VbSyntaxError> errLst = new ArrayList<>();

	public VbParser(VbLexer lex) {
		super(lex);
		this.lexer = lex;
	}

	public void user_init(){
		this.errLst = new ArrayList<>();
		SymTable.init();
	}

	public Symbol getCurToken(){
		return this.cur_token;
	}

	public void report_fatal_error(String message, Object info) throws Exception{
		done_parsing();
		report_error(message, info);
		throw new Exception("Can't recover from previous error(s)");
	}

	public void report_error(String message, Object info){
		System.err.print(message);
		System.err.flush();
		if ((info instanceof Symbol)){
		  if (((Symbol)info).left != -1){
			System.err.println(" at character " + ((Symbol)info).left + " of input");
		  }else{
			System.err.println("");
		  }
		}else{
		  System.err.println("");
	   }
	}

	public void syntax_error(Symbol cur_token){
		System.out.println("syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("1cur_token '" + cur_token + "' no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
		System.out.println("unrec_syntax_error");
		try{
			MyToken my_cur_token = (MyToken)cur_token;
			String msg = "Error fatal en linea " + my_cur_token.left + ", ";
			
			if (my_cur_token.value.toString().contains("\n") || my_cur_token.value.toString().contains("\r")){
				msg += "columna " + my_cur_token.right;
			}else{
				msg += "token '" + my_cur_token.value.toString() + "'";
			}

			addErr(msg, my_cur_token.left, my_cur_token.right, my_cur_token.offset, cur_token.value.toString().length());
		}catch(Exception ex){
			System.out.println("2unrec cur_token no se pudo convertir a mysymbol: " + cur_token.toString() + ", left: " + cur_token.left + ", right: " + cur_token.right);
		}
	}

	protected int error_sync_size(){
		return 3;
	}
	
	public void addErr(String msg, int left, int right, int offset, int length){
		this.errLst.add(new VbSyntaxError(msg, left, right, offset, length));
	}

	public void appendErr(String msg){
		if (!this.errLst.isEmpty()){
			int index = this.errLst.size() - 1;
			this.errLst.get(index).message += ": " + msg;
		}
	}

	public ArrayList getErrLst(){
		return this.errLst;
	}

	public void setLexer(VbLexer lexer){
		this.lexer = lexer;
	}

	public MyToken tokenAt(java.util.Stack stack, int top, int offset){
		return (MyToken)stack.elementAt(top + offset);
	}

	public MyToken toMyToken(Object o){
		return (MyToken)o;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$VbParser$actions {
  private final VbParser parser;

  /** Constructor */
  CUP$VbParser$actions(VbParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$VbParser$do_action(
    int                        CUP$VbParser$act_num,
    java_cup.runtime.lr_parser CUP$VbParser$parser,
    java.util.Stack            CUP$VbParser$stack,
    int                        CUP$VbParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VbParser$result;

      /* select the action based on the action number */
      switch (CUP$VbParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LineEnd ::= FinDeLinea LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("LineEnd",40, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LineEnd ::= FinDeLinea 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("LineEnd",40, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PropChain ::= Punto Id NT$15 PropChain 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int propChainleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propChainright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object propChain = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = propChain; 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PropChain",42, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$15 ::= 
            {
              Object RESULT =null;

								if (SymTable.curProp != null){
									String tipoCurProp = SymTable.curProp.tipo;
									TypeStruct t = SymTable.curScope.findTypeStruct(tipoCurProp);

									if (t == null || SymTable.isPrimitive(tipoCurProp)){
										MyToken myid = new MyToken(sym.Id, SymTable.curProp.linea, SymTable.curProp.columna, SymTable.curProp.offset);
										parser.syntax_error(myid);
										parser.appendErr("\"" + tipoCurProp + "\" no es un Type1");
										SymTable.curProp = null;
									}else{
										MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
										Variable v = t.findProp(myid.value.toString());
										if (v == null){
											parser.syntax_error(myid);
											parser.appendErr("Type \"" + t.id + "\" no tiene una propiedad llamada \"" + myid.value.toString() + "\"2");
											SymTable.curProp = null;
										}else{
											if (!SymTable.isPrimitive(v.tipo)){
												t = SymTable.curScope.findTypeStruct(v.tipo);

												if (t == null || SymTable.isPrimitive(tipoCurProp)){
													parser.syntax_error(myid);
													parser.appendErr("\"" + myid.value.toString() + "\" no es un Type5");
													SymTable.curProp = null;
												}else{
													SymTable.curProp = new Property(v.id, v.linea, v.columna, v.offset, v.tipo);
												}
											}else{
												parser.syntax_error(myid);
												parser.appendErr("\"" + myid.value.toString() + "\" no es un Type2");
												SymTable.curProp = null;
											}
										}
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$15",59, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PropChain ::= Punto Id 
            {
              Object RESULT =null;
		
								if (SymTable.curProp != null){
									String tipoCurProp = SymTable.curProp.tipo;
									TypeStruct t = SymTable.curScope.findTypeStruct(tipoCurProp);

									if (t == null || SymTable.isPrimitive(tipoCurProp)){
										MyToken myid = new MyToken(sym.Id, SymTable.curProp.linea, SymTable.curProp.columna, SymTable.curProp.offset);
										parser.syntax_error(myid);
										parser.appendErr("\"" + tipoCurProp + "\" no es un Type3");
										SymTable.curProp = null;
									}else{
										MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
										Variable v = t.findProp(myid.value.toString());
										if (v == null){
											parser.syntax_error(myid);
											parser.appendErr("Type \"" + t.id + "\" no tiene una propiedad llamada \"" + myid.value.toString() + "\"1");
											SymTable.curProp = null;
										}else{
											RESULT = v.tipo;
										}
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PropChain",42, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Property ::= Id NT$14 PropChain 
            {
              Termino RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Termino) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int propChainleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propChainright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object propChain = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
								RESULT = new Termino(myid.value.toString(), myid.left, myid.right, myid.offset, propChain.toString());
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Property",41, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$14 ::= 
            {
              Termino RESULT =null;

								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									if (!SymTable.isPrimitive(v.tipo)){
										Property p = new Property(v.id, v.linea, v.columna, v.offset, v.tipo);
										SymTable.curProp = p;
									}else{
										parser.syntax_error(myid);
										parser.appendErr("La variable \"" + v.id + "\" no es un Type4");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$14",58, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ArgLst ::= ArgLst Coma error 
            {
              ArrayList<Expresion> RESULT =null;
		int argLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int argLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Expresion> argLst = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		 
								parser.appendErr("Se esperaba Argumento"); 
								RESULT = argLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ArgLst ::= ArgLst Coma Expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int argLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int argLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		ArrayList<Expresion> argLst = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								argLst.add(e);
								RESULT = argLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ArgLst ::= Expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 
								ArrayList<Expresion> args = new ArrayList<>();
								args.add(e);
								RESULT = args;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ArgLst",35, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Args ::= ParI error ParD 
            {
              ArrayList<Expresion> RESULT =null;
		 parser.appendErr("Argumentos invalidos"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",34, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Args ::= ParI ArgLst error 
            {
              ArrayList<Expresion> RESULT =null;
		 parser.appendErr("Se esperaba ')'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",34, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Args ::= ParI ArgLst ParD 
            {
              ArrayList<Expresion> RESULT =null;
		int argLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int argLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Expresion> argLst = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		
								RESULT = argLst;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",34, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Args ::= ParI ParD 
            {
              ArrayList<Expresion> RESULT =null;
		
								RESULT = new ArrayList<Expresion>();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Args",34, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FuncEval ::= Id Args 
            {
              Termino RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		ArrayList<Expresion> args = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
								Funcion f = SymTable.curScope.findFunc(myid.value.toString());

								if (f == null){
									parser.syntax_error(myid);
									parser.appendErr("La funcion \"" + myid.value.toString() + "\" no ha sido declarada");
									RESULT = null;
								}else{
									if (f.parametros.size() != args.size()){
										parser.syntax_error(myid);
										parser.appendErr("La funcion \"" + myid.value.toString() + "\" recibe " + f.parametros.size() + " argumentos. Se pasaron " + args.size());
										RESULT = null;
									}else{
										for (int i = 0; i < f.parametros.size(); i++){
											if (!f.parametros.get(i).tipo.equalsIgnoreCase(args.get(i).tipo)){
												parser.syntax_error(myid);
												parser.appendErr("El argumento en la posicion " + (i + 1) + " es \"" + args.get(i).tipo + "\", debe ser \"" + f.parametros.get(i).tipo);
											}
										}
									}
									RESULT = new Termino(myid.value.toString(), myid.left, myid.right, myid.offset, f.tipo);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncEval",25, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MethodCall ::= Call FuncEval LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("MethodCall",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MethodCall ::= FuncEval LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("MethodCall",39, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Distinto ::= Menor Mayor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Distinto",38, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BoolLiteral ::= False 
            {
              Literal RESULT =null;
		
								MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								RESULT = new Literal("false", tok.left, tok.right, tok.offset, "boolean");
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BoolLiteral ::= True 
            {
              Literal RESULT =null;
		
								MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								RESULT = new Literal("true", tok.left, tok.right, tok.offset, "boolean");
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PassMech ::= ByRef 
            {
              Object RESULT =null;
		int byRefleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int byRefright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object byRef = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = byRef.toString().toLowerCase(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PassMech",33, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PassMech ::= ByVal 
            {
              Object RESULT =null;
		int byValleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int byValright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object byVal = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = byVal.toString().toLowerCase(); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("PassMech",33, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ParamLst ::= ParamLst Coma PassMech Id As Tipo 
            {
              ArrayList<Parametro> RESULT =null;
		int paramLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int paramLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		ArrayList<Parametro> paramLst = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		int passMechleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int passMechright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object passMech = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ParamLst ::= PassMech Id As Tipo 
            {
              ArrayList<Parametro> RESULT =null;
		int passMechleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int passMechright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Object passMech = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);

								if (SymTable.curMethod.hasParam(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("El parametro \"" + myid.value.toString() + "\" ya fue declarado");
								}else{
									SymTable.curMethod.addParam(new Parametro(passMech.toString(), myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ParamLst",37, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Params ::= ParI ParamLst ParD 
            {
              ArrayList<Parametro> RESULT =null;
		int paramLstleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int paramLstright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		ArrayList<Parametro> paramLst = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Params ::= ParI ParD 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Params",36, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Tipo ::= Id 
            {
              MyToken RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",43, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Tipo ::= Char 
            {
              MyToken RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",43, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Tipo ::= String 
            {
              MyToken RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",43, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Tipo ::= Boolean 
            {
              MyToken RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",43, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Tipo ::= Integer 
            {
              MyToken RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		 RESULT = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Tipo",43, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ElseStmts ::= 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseStmts",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ElseStmts ::= Else NT$13 Block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		 
								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseStmts",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$13 ::= 
            {
              Object RESULT =null;
 
								MyToken elseTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								SymTable.createSubScope("Else" + SymTable.blockName(), elseTok.left, elseTok.right, elseTok.offset); 
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$13",57, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ElseStmts ::= ElseIf Expresion Then NT$11 Block NT$12 ElseStmts 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ElseStmts",32, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
 
								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$12",56, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$11 ::= 
            {
              Object RESULT =null;
 
								MyToken myelif = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("ElseIf" + SymTable.blockName(), myelif.left, myelif.right, myelif.offset); 
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$11",55, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IfStmt ::= If Expresion Then NT$9 Block NT$10 ElseStmts End If LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("IfStmt",31, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-9)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
 
								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$10",54, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$9 ::= 
            {
              Object RESULT =null;

								MyToken ifTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("If" + SymTable.blockName(), ifTok.left, ifTok.right, ifTok.offset); 
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$9",53, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DoWhile ::= Do While Expresion NT$7 Block NT$8 Loop LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("DoWhile",30, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$8",52, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$7 ::= 
            {
              Object RESULT =null;

								MyToken doTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
								SymTable.createSubScope("Do" + SymTable.blockName(), doTok.left, doTok.right, doTok.offset); 	
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$7",51, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ForLoop ::= For Id Igual Expresion To Expresion NT$5 Block NT$6 Next Id LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ForLoop",29, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;

								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$6",50, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$5 ::= 
            {
              Object RESULT =null;

								MyToken forTok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5);
								SymTable.createSubScope("For" + SymTable.blockName(), forTok.left, forTok.right, forTok.offset); 	
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$5",49, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Operador ::= Ampersand 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Operador ::= Distinto 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Operador ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Operador ::= Mayor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Operador ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Operador ::= Menor 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Operador ::= Not 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Operador ::= Or 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Operador ::= And 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Operador ::= Entre 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Operador ::= Por 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Operador ::= Menos 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Operador ::= Mas 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Operador",27, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Termino ::= Property 
            {
              Termino RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino p = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (p == null){
									RESULT = null;
								}else{
									RESULT = new Termino(p.id, p.linea, p.columna, p.offset, p.tipo);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Termino ::= FuncEval 
            {
              Termino RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino f = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (f == null){
									RESULT = null;
								}else{
									RESULT = new Termino(f.id, f.linea, f.columna, f.offset, f.tipo);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Termino ::= Id 
            {
              Termino RESULT =null;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
									RESULT = null;
								}else{
									RESULT = new Termino(v.id, v.linea, v.columna, v.offset, v.tipo);
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Termino ::= StrLiteral 
            {
              Termino RESULT =null;
		int strLitleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int strLitright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object strLit = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								String valor = strLit.toString();

								if (valor.length() == 1){
									RESULT = new Termino(valor, tok.left, tok.right, tok.offset, "char");
								}else{
									RESULT = new Termino(valor, tok.left, tok.right, tok.offset, "string");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Termino ::= BoolLiteral 
            {
              Termino RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Literal b = (Literal)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								RESULT = new Termino(b.id, b.linea, b.columna, b.offset, "boolean");
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Termino ::= IntLiteral 
            {
              Termino RESULT =null;
		  
								MyToken intLit = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								RESULT = new Termino(intLit.value.toString(), intLit.left, intLit.right, intLit.offset, "integer");
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Termino",24, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion ::= Not Expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								RESULT = new Expresion(e.id, e.linea, e.columna, e.offset, "boolean");
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion ::= Termino 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino t = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (t != null){
									RESULT = new Expresion(t.id, t.linea, t.columna, t.offset, t.tipo);
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= ParI Expresion ParD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		
								RESULT = e;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= Expresion Ampersand GuionBajo LineEnd Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (SymTable.isPrimitive(e1.tipo) && SymTable.isPrimitive(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "string");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " & " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= Expresion Or Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("boolean") && e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " Or " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= Expresion And Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("boolean") && e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " And " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= Expresion Distinto Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " <> " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= Expresion Igual Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " = " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= Expresion MayorIgual Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " >= " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= Expresion Mayor Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " > " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion MenorIgual Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " <= " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= Expresion Menor Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "boolean");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " < " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= Expresion Entre Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "integer");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " / " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= Expresion Por Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "integer");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " * " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= Expresion Ampersand Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (SymTable.isPrimitive(e1.tipo) && SymTable.isPrimitive(e2.tipo)){
										RESULT = new Expresion("", 0, 0, 0, "string");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " & " + e2.tipo + ")");
										RESULT = null;
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= Expresion Menos Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "integer");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " - " + e2.tipo + ")");
										RESULT = null;
									}
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= Expresion Mas Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (e1 != null && e2 != null){
									if (e1.tipo.equalsIgnoreCase("integer") && e2.tipo.equalsIgnoreCase("integer")){
										RESULT = new Expresion("", 0, 0, 0, "integer");
									}else{
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1);
										parser.syntax_error(tok);
										parser.appendErr("Operacion ilegal (" + e1.tipo + " + " + e2.tipo + ")");
										RESULT = null;
									}
								}else{
									RESULT = null;
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Expresion",28, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Asignacion ::= Asignable Igual Expresion LineEnd 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).right;
		Asignable a = (Asignable)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		
								if (a != null && e != null){
									if (!a.tipo.equalsIgnoreCase(e.tipo)){
										MyToken tok = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2);
										parser.syntax_error(tok);
										parser.appendErr("Asignacion ilegal (" + a.tipo + " = " + e.tipo + ")");
									}
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignacion",26, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Asignable ::= Property 
            {
              Asignable RESULT =null;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Termino property = (Termino)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
		
								if (property == null){
									RESULT = null;
								}else{
									RESULT = new Asignable(property.id, property.linea, property.columna, property.offset, property.tipo, "propiedad");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignable",23, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Asignable ::= Id 
            {
              Asignable RESULT =null;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								Variable v = SymTable.curScope.findVar(myid.value.toString());

								if (v == null){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" no ha sido declarada");
								}else{
									RESULT = new Asignable(v.id, v.linea, v.columna, v.offset, v.tipo, "variable");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Asignable",23, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BlockStmt ::= MethodCall 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",9, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BlockStmt ::= Asignacion 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",9, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BlockStmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",9, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BlockStmt ::= DoWhile 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",9, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BlockStmt ::= ForLoop 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",9, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BlockStmt ::= VarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmt",9, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BlockStmts ::= BlockStmts BlockStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BlockStmts ::= BlockStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",8, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Block ::= LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Block",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Block ::= LineEnd BlockStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Block",7, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TypeVarDecl ::= Id As Tipo LineEnd 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);

								if (SymTable.curTypeStruct.hasProp(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La propiedad \"" + myid.value.toString() + "\" ya existe en este Type");
								}else{
									if (!SymTable.rootScope.hasType(tipo.value.toString())){
										parser.syntax_error(tipo);
										parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
									}

									SymTable.curTypeStruct.addProp(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeVarDecl",22, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TypeBlockStmts ::= TypeBlockStmts TypeVarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlockStmts",21, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TypeBlockStmts ::= TypeVarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlockStmts",21, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TypeBlock ::= LineEnd 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlock",20, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TypeBlock ::= LineEnd TypeBlockStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeBlock",20, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TypeDecl ::= Type Id NT$4 TypeBlock End Type LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		
								SymTable.curTypeStruct = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("TypeDecl",19, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);
								TypeStruct t = new TypeStruct(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curTypeStruct = t;
								SymTable.curScope.addTypeStruct(t);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FuncDecl ::= Function Id NT$1 Params As Tipo NT$2 Block NT$3 End Function LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-6)).value;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",12, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-11)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)).value;

								SymTable.endScope();
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.peek()).value;
 
								((Funcion)SymTable.curMethod).tipo = tipo.value.toString();
								
								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}

								SymTable.curMethod = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            {
              Object RESULT =null;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Function \"" + myid.value.toString() + "\" ya existe");
								}else if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Ya existe un Sub llamado \"" + myid.value.toString() + "\"");
								}
								
								Funcion newFunc = new Funcion(myid.value.toString(), myid.left, myid.right, myid.offset, "void");
								SymTable.curScope.addFunc(newFunc);
								SymTable.curMethod = newFunc;
								Scope s = SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SubDecl ::= Sub Id NT$0 Params Block End Sub LineEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-5)).value;
		
								SymTable.endScope();
								SymTable.curMethod = null;
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("SubDecl",14, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-7)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top);

								if (SymTable.curScope.hasSub(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Sub \"" + myid.value.toString() + "\" ya existe");
								}else if (SymTable.curScope.hasFunc(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("Ya existe una funcion llamada \"" + myid.value.toString() + "\"");
								}else{
									if (myid.value.toString().equalsIgnoreCase("main")){
										SymTable.existeMain = true;
									}
								}
								
								Sub newSub = new Sub(myid.value.toString(), myid.left, myid.right, myid.offset);
								SymTable.curScope.addSub(newSub);
								SymTable.curMethod = newSub;
								SymTable.createSubScope(myid.value.toString(), myid.left, myid.right, myid.offset);
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= Dim Id As error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Tipo"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= Dim Id error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba 'As'"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDecl ::= Dim error LineEnd 
            {
              Object RESULT =null;
		 parser.appendErr("Se esperaba Id"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-2)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDecl ::= Dim Id As Tipo LineEnd 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		MyToken tipo = (MyToken)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		 
								MyToken myid = (MyToken)CUP$VbParser$stack.elementAt(CUP$VbParser$top-3);

								if (SymTable.curScope.hasLocalVar(myid.value.toString())){
									parser.syntax_error(myid);
									parser.appendErr("La variable \"" + myid.value.toString() + "\" ya existe en este contexto");
								}else{
									SymTable.curScope.addVar(new Variable(myid.value.toString(), myid.left, myid.right, myid.offset, tipo.value.toString()));
								}

								if (!SymTable.curScope.hasType(tipo.value.toString())){
									parser.syntax_error(tipo);
									parser.appendErr("\"" + tipo.value.toString() + "\" no es un tipo valido");
								}
						
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("VarDecl",6, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-4)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RootDecl ::= TypeDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootDecl",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RootDecl ::= FuncDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootDecl",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RootDecl ::= SubDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootDecl",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RootDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootDecl",5, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RootStmt ::= error 
            {
              Object RESULT =null;
		 parser.appendErr("error"); 
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RootStmt ::= RootDecl 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmt",4, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RootStmts ::= RootStmts RootStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmts",3, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RootStmts ::= RootStmt 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("RootStmts",3, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Root ::= LineEnd RootStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",2, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Root ::= RootStmts 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("Root",2, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgStart ::= Root 
            {
              Object RESULT =null;

              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("ProgStart",1, ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          return CUP$VbParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgStart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)).value;
		RESULT = start_val;
              CUP$VbParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VbParser$stack.elementAt(CUP$VbParser$top-1)), ((java_cup.runtime.Symbol)CUP$VbParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VbParser$parser.done_parsing();
          return CUP$VbParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

